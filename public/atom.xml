<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  <subtitle>waiting to load</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2020-11-25T01:27:41.152Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[活動筆記] 2020 SCRUM GUIDE UPDATE</title>
    <link href="https://blog.marsen.me/2020/11/20/2020/scrum_guide_2020/"/>
    <id>https://blog.marsen.me/2020/11/20/2020/scrum_guide_2020/</id>
    <published>2020-11-20T09:32:02.000Z</published>
    <updated>2020-11-25T01:27:41.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>2020/11/18 將迎來 Scrum 25 周年與 Scrum Guide 的更新，<br>活動有一些大師對談，錄影放在文末連結之中，<br>另稍微比較一下 2017 與 2020 Scrum Guide 的差異(以中文為主)，<br>特別感謝譯者這麼有效率的更新，我差不多在 19 號就可以在<a href="https://www.scrumguides.org/download.html" target="_blank" rel="noopener">網站下載</a>了</p><h2 id="排版與封面"><a href="#排版與封面" class="headerlink" title="排版與封面"></a>排版與封面</h2><p>2017 版本主要視覺的位置放了兩個大師的合照，首行字為「Scrum 指南™」<br>2020 版本主要視覺的位置為「Scrum 指南」，首行字為兩位大師的名字。<br>理想我會希望使用 2020 的版本，然後兩位大師的名字縮小到角落 :D</p><h3 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h3><p>2020 將目的前移到目錄之前，我覺得這樣的調整很好。<br>讓人可以先讀取本指南的目的。</p><h3 id="Scrum-指南的目的"><a href="#Scrum-指南的目的" class="headerlink" title="Scrum 指南的目的"></a>Scrum 指南的目的</h3><p>篇幅相比 2017 更長了，並將 2017 版「Scrum 的運用」縮減並挪移至此處。<br>簡介了 Scrum 的起源，概述了 Scrum 的運用範圍與現況。  </p><p>另外有兩句預防性的警語，是這個段落的重點</p><ul><li>改變 Scrum 的核心設計或 Scrum 的各種理念，遺漏其中任何元素，或是不遵照 Scrum 的規則，是在掩蓋問題，並限制了 Scrum 的各種好處，甚至可能使其變得毫無用處。</li><li>這些使用 Scrum 框架內的戰術技巧有很大的變化，因此不在此描述。</li></ul><p>這個篇幅簡述了 Scrum 已是被時間與不同產業實証有用的框架，<br>但擅自修改 Scrum 可能會導致 Scrum 效用打折甚至無用，<br>並具體說明 Scrum 的戰術實作不會在此指南描述。</p><h3 id="Scrum-的定義"><a href="#Scrum-的定義" class="headerlink" title="Scrum 的定義"></a>Scrum 的定義</h3><p>相比 2017 的版本，這裡直接提到了 Scrum 中所有的角色與其職責。<br>並明確的說明「原封不動地應用 Scrum」, 並強調這份指南是<code>人之間的指引</code>，<br>而不是具體的流程、技術與方法。</p><p>這裡也是我覺得很好的地方，以前在首次與團隊成員說明 Scrum Guide 時，<br>如果按照 2017 的章節說明，我都要另外安排一個段落先簡述 Scrum 中的角色，<br>因為 2017 在角色出現的篇幅比角色的說明還要早。</p><h3 id="Scrum-的理論"><a href="#Scrum-的理論" class="headerlink" title="Scrum 的理論"></a>Scrum 的理論</h3><p>2020 的版本加上精實思維(Lean Thinking)，<br>並具體說明了檢視、調適的事件( 2017 翻譯為活動)與三大支柱的關係。  </p><p>透明性的段落強調了<code>没有透明性的檢視會產生誤導和浪費(做出讓價值減少且風險增加的決策)</code><br>很有感觸，我在團隊導入 Scrum 的首要宗旨就是看見事實。<br>(有機會再談談如何定義事實與 Ruddy 老師說的「看見全貌」的差異之所在)  </p><p>檢視性強調 Scrum 將以 5 個事件有節奏實踐檢視性(具體作法與事件在這個段落還沒提)，  </p><p><code>檢視性促成調適性。 沒有調適性的檢視是沒有意義的。Scrum 的事件旨在激發改變。</code>  </p><p>這句話作到了承先起後的作用，可以將檢視性視作三大支柱的樞鈕。  </p><p>調適性的篇幅提到了授權與自我管理，這也許是導入常常碰到的地雷。<br>團隊不被授權或缺乏自我管理的能力或意識(有點像有沒有病識感)。  </p><p>2020 的編排我很喜歡，除了一再預告事件如何產生三大支柱之外，不再僅僅以順序暗示三大支柱的關係。<br>而是明確的說明<code>透明性促成檢視性。檢視性促成調適性。</code>。<br>(有點像真善美，沒有真後面就會變成假善、假美那就豪無意義了)  </p><h3 id="Scrum-的價值觀"><a href="#Scrum-的價值觀" class="headerlink" title="Scrum 的價值觀"></a>Scrum 的價值觀</h3><p>對承諾、專注、開放、尊重、與勇氣的排版更明顯了，另外 Stakeholders 也明文納入其中了。  </p><p>誒、不對啊，這些態度不是跟四維八德一樣，小朋友都知道嗎?<br>而且應該不論是你的老闆、雞巴主管、龜毛客戶、秋條前輩到所有人都應該要有相同的態度，不是嗎?<br>這就是知易行難吧… 說個滑坡的，最近在思考尊重與尊敬的差異，<br>朋友給了我一個例子:</p><ul><li>尊重:念在你是一代宗師，你自盡吧</li><li>尊敬:我的戰鬥力只有六千，他起碼有一萬以上</li></ul><p>聽說看得懂的都是老人。</p><h3 id="Scrum-Team"><a href="#Scrum-Team" class="headerlink" title="Scrum Team"></a>Scrum Team</h3><p>引言強調一位 Product Owner(2017 在後面的段落才提到)，<br>強調了沒有子團隊與階級架構(具體實務上會影響到組織結構，實作起來並不容易，需要更多的經驗)。<br>這次沒有翻譯目標/目的了，直接使用 Product Goal 並在後面的段落具體指由 PO 開發、描述溝通。  </p><p>然後強化了對當責的描述，調整了後面篇幅的介紹順序<br>2017:PO &gt; Development Team &gt; Scrum Master<br>2020:Developers &gt; PO &gt; Scrum Master<br>我認為順序都是有暗喻性的，但解讀方式是自由的，就不過多解釋了。  </p><p>重點是責任的部份，我覺得比起 2017 更能簡單的用 Scrum Guide 說明現在角色的職責所在了。  </p><p>Developers</p><p>● 打造一份 Sprint 的計畫，也就是 Sprint Backlog；<br>● 藉由遵循完成之定義，以灌輸品質；<br>● 每天調適其邁向 Sprint Goal 的計畫；和，<br>● 作為專業人士對彼此負責。</p><p>Product Owner</p><p>● 開發並明確的描述溝通 Product Goal；<br>● 創造並清楚的描述溝通 Product Backlog items；<br>● 對 Product Backlog items 進行排序；和，<br>● 確保 Product Backlog 是透明的、可見的與可理解的</p><p>這裡特別加上了</p><p><code>Product Owner 可以自己做上述工作，或者也可以將職責委託他人，然而，Product Owner 仍肩負最終責任。</code></p><p>這句話我視為對大型組織導入 Scrum 的困難之處的回應。<br>錯誤 Scrum (其實就不是 Scrum)會產生缺乏<a href="https://www.youtube.com/watch?v=cr2rjaGmUzo" target="_blank" rel="noopener">實際權限的 PO</a>，<br>或是有權無(卸)責的傳統型領導。</p><p>Scrum Master</p><p>明文<code>Scrum Master 對 Scrum Team 的效能負責</code>;職責更明確了，語句更洗鋉，贅字更少。<br>但我覺得「真正的領導者」這段文字將會產生轉型時的爭議，特別是將「僕人式領導」文字又被拿掉。<br>我會建議作為 Scrum Master 要把這件事放在心中，Title 只是浮雲啊。  </p><h3 id="Scrum-事件-原為-Scrum-活動"><a href="#Scrum-事件-原為-Scrum-活動" class="headerlink" title="Scrum 事件(原為 Scrum 活動)"></a>Scrum 事件(原為 Scrum 活動)</h3><p>Sprint</p><p>明文<code>採用時間較短的 Sprint，可以建立更多學習周期</code>，此外更加強調三大支柱與 Sprint 的關係。  </p><p>特別提醒經驗主義的重要性，更勝於實際的做法(諸如:燃盡圖、燃起圖，或是累積流量圖等…)<br>這與我的經驗也是不謀而合，主管一開始就投入過多心力在要求製作圖表，<br>而忽略了在圖表之前，進行預估其實是需要訓練的，最後圖表變成作假帳…<br>失去透明度，檢視性與調適性將無法發揮功能，Scrum/Sprint 將會失敗(或是不知道成功或失敗)。  </p><p>取消 Sprint 的章節被大幅縮減，僅以不合時宜一句代過。<br>反而釋放更多空間給 Product Owner。<br>我覺得 PO 當要取消 Sprint 時，要思考以下的問題，  </p><ul><li>要如何與其它角色互動?  </li><li>要如何持續實現 Product Goal?  </li></ul><p>這樣的文字編排方式，我覺得是很大的改善，強調在 Scrum 之中，<br>我們的所有行為都是為了實現三大支柱，而我們相信這樣的方法可以領我們到達終點之地。<br>後面的事件也都有類似的描述，我就不再補充。  </p><p>Sprint Planning</p><p>2017 版本<br>第一個討論題目：這次 Sprint 能做出什麼？<br>第二個討論題目：如何完成所選的工作？</p><p>2020 版本<br>主題一：為什麼這次 Sprint 有價值？<br>主題二：這次 Sprint 能完成（Done）什麼？<br>主題三：如何完成所挑選的工作？</p><p>明顯多了一個有關價值的主題，但是需要與 Stakeholders 在 Sprint Planning 結束前被確定下來，<br>就我實務的經驗 Stakeholders 與 PO 會比 Developers 提早決定未來的目標，<br>所以 Stakeholders 依然不是會議中必要的角色。  </p><p>Daily Scrum</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Developers 可以選擇他們想要的任何 Daily Scrum 的結構和技術，</span><br><span class="line">只要他們的 Daily Scrum 專注於實現 Sprint Goal 的進展，</span><br><span class="line">並且產生下一個工作天可執行的計畫。</span><br><span class="line">這樣可以更專注並改進自我管理（self-management）。</span><br></pre></td></tr></table></figure><p>把經典的三個問題拿掉了，這也符合我的經驗，不要流於形式，<br>而是更專注在實現 Sprint Goal，不流於形式則更能讓團隊自我管理。  </p><p>Sprint Review 與 Sprint Retrospective</p><p>這兩個段落的篇幅都縮短了，但是我覺得更言簡意賅。<br>但投影片展示的描述，我還比較喜歡 2017 版本的描述 <code>是為了引發意見的反饋和提升協同合作</code>，<br>但的確實務上往往會淪為簡報報告。  </p><p>關於 Retrospective 這個會議對我的定義，<br>我目前的團隊沒有在跑 Scrum ，但是我直接引入 Retrospective。<br>Retrospective 是一個可以雕塑團隊的會議。<br>有趣的事，團隊現在調整的越來越像 Scrum (當然依然不是 Scrum)  </p><h3 id="Scrum-Artifacts"><a href="#Scrum-Artifacts" class="headerlink" title="Scrum Artifacts"></a>Scrum Artifacts</h3><p>明文: Artifacts 的設計是為了使關鍵資訊之透明性極大化。(其實 2017 年的版本也有提到)<br>2020 版本的文字組織更簡明之外，都加上了承諾的區塊，</p><ul><li>Product Backlog 是為了實現 Product Goal 的承諾</li><li>Increment 是為了實現對完成之定義(Definition of Done) 的承諾</li><li>Sprint Backlog 是為了實現 Sprint Goal 的承諾</li></ul><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>結語的部份並沒有太大幅度的修改，<br>但是我想要再一次強調 「雖然實施部分的 Scrum 是可能的，但結果就不是 Scrum 了。」  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>整體的文章的結構完整性更好了，三大支柱與活動的連結，產出與承諾的連結。<br>然後將實作(戰術)面與角色的行為(戰鬥)樣版移除，這樣給了更多空間讓團隊發揮。<br>也會促使團隊思考背後的原因(Why) ?</p><p>想起以前聽過「守、破、離」的演說，我想這次 Scrum Guide 有一點這樣的味道，<br>在 25 年前，什麼經驗都沒有情況，這樣的樣版帶來了相當大的幫助，<br>現在我們都有一些實作有一些失敗有一些成功，是時候把樣版移除了(或是回到問題的本質)。</p><ul><li>你真要的三個問題嗎 ? 背後想問到的是什麼 ?</li><li>真的不取消 Sprint 嗎 ? 為什麼不行 ?</li><li>不站立真的不能開 Daily Scrum 嗎 ?</li></ul><p><strong>20201125 補充:</strong><br>Adrian 的分享相當清晰，補充連結如下:</p><ul><li><a href="https://www.linkedin.com/pulse/scrum-guide-2020-update-adrian-cheng/" target="_blank" rel="noopener">Scrum Guide 2020 Update — Adrian</a></li><li><a href="https://www.linkedin.com/pulse/scrum-guide-2020-%E8%A2%AB%E7%A7%BB%E9%99%A4%E4%BA%86%E4%BB%80%E9%BA%BC-adrian-cheng/" target="_blank" rel="noopener">Scrum Guide 2020 少了什麼? — Adrian</a></li><li><a href="https://www.linkedin.com/pulse/scrum-guide-2020-%E5%A4%9A%E4%BA%86%E4%BB%80%E9%BA%BC-adrian-cheng/" target="_blank" rel="noopener">Scrum Guide 2020 多了什麼? — Adrian</a></li><li><a href="https://www.linkedin.com/pulse/scrum-guide-2020-%E4%BF%AE%E6%94%B9%E4%BA%86%E4%BB%80%E9%BA%BC-adrian-cheng/" target="_blank" rel="noopener">Scrum Guide 2020 改了什麼? — Adrian</a></li></ul><h2 id="校錯"><a href="#校錯" class="headerlink" title="校錯"></a>校錯</h2><ol><li><img src="https://i.imgur.com/cXQldi5.jpg" alt="的的"></li><li><img src="https://i.imgur.com/PYZ4H8K.jpg" alt="的的"></li><li><img src="https://i.imgur.com/uLK8BRU.jpg" alt="Artifacts"></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.youtube.com/watch?v=Dfxo3PZwDI8" target="_blank" rel="noopener">活動影片</a></li><li><a href="https://wangterryonagile.blogspot.com/2020/11/scrum-guide-2020.html" target="_blank" rel="noopener">Scrum guide 2020 翻譯後記</a></li><li><a href="https://www.scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Chinese-Traditional.pdf" target="_blank" rel="noopener">2020 中文版</a></li><li><a href="https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Chinese-Traditional.pdf" target="_blank" rel="noopener">2017 中文版</a></li><li><a href="https://www.youtube.com/watch?v=cr2rjaGmUzo" target="_blank" rel="noopener">對產品負責人角色的錯誤觀念會如何毀了您的組織，以及其因應之道</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;2020/11/18 將迎來 Scrum 25 周年與 Scrum Guide 的更新，&lt;br&gt;活動有一些大師對談，錄影放在
      
    
    </summary>
    
    
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
      <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 收支流程設計</title>
    <link href="https://blog.marsen.me/2020/11/10/2020/finance/"/>
    <id>https://blog.marsen.me/2020/11/10/2020/finance/</id>
    <published>2020-11-10T05:49:16.000Z</published>
    <updated>2020-11-11T02:16:23.906Z</updated>
    
    <content type="html"><![CDATA[<p>耶和華所賜的福使人富足，並不加上憂慮。— 箴10:22.</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>投資理財是現代人生活極為重要的部份，<br>但是我在學生時期並沒有學習到這方面的知識，<br>出社會也大概 10 年了。稍微作個記錄與分享。  </p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>開源節流</strong>是基本理財認識，簡單分為收入與支出。<br>收入方面，最常為工資所得，在網路時代也有很其它的賺錢方式，<br>最主要我想還是要<strong>建立系統</strong>，這裡不過多著墨，<br>我的系統屬於股票投資，但是記得你可以不只有一個系統，而<code>建立系統是需要時間與反覆思考</code>的。</p><p>支出方面，其實滿足一個人的生活所需，金額不會太大，<br>當然想過得比較滋潤的話，會比較花錢，<br>跟據你所居住的區域來說(不是要戰南北)，還是會有比例上的差異，<br>你也可以用時間來轉換成本，不過裡面藏著一些魔鬼細節，小心得不償失。  </p><blockquote><p>舉例來說:<br>如果是自行開伙，飲食的費用並不會太高(特別是家庭人數較多的情況)，<br>但是就要考量到材料準備、保鮮、整理等環節，外食也可以有便宜的選擇，<br>但是可能會是太油太鹹太甜的餐點，導致健康受到影響。</p></blockquote><p>但除此之外，孝親、偶爾為之的旅行、進修、稅、保險等等…什麼都要花錢。<br>簡單的一句，<strong>所有的支出，我都建議預算制。</strong></p><p>以下是以一個小資上班族(就是我啦)的概念去設計的，<br>不包含保險、股票、信用卡等…其它的工具。<br>如果有人喜歡，也許未來才再寫相關文章吧。</p><h3 id="帳戶分類"><a href="#帳戶分類" class="headerlink" title="帳戶分類"></a>帳戶分類</h3><h4 id="受薪帳戶-InCome-Acct"><a href="#受薪帳戶-InCome-Acct" class="headerlink" title="受薪帳戶(InCome Acct)"></a>受薪帳戶(InCome Acct)</h4><p>受薪階級通常會有<code>薪轉戶</code>，至少要有1次以上的<strong>跨行轉帳免手續費</strong>，<br>如果非工資收入(接案/紅利等…)，應該儘可能直接轉入<code>主帳戶(Main Acct)</code> 。</p><h4 id="主帳戶-Main-Acct"><a href="#主帳戶-Main-Acct" class="headerlink" title="主帳戶(Main Acct)"></a>主帳戶(Main Acct)</h4><p>目的:負責最多轉出轉入功能的帳戶，主要的活存會放在這裡，<br>應該有一定次數的<strong>跨行轉帳免手續費</strong>，或是<strong>約定帳戶免手續費</strong>，<br>依個人使用習慣，建議要有 5~10 次以上，此外要有<code>好用的APP/網銀</code>，<br>最後才是<strong>活存利率要儘可能的高</strong>，因為你大多數的生活費會停滯在此。</p><blockquote><p>目前有些網銀放 5 萬或 10 萬就有 2% 以上的利率，比定存還高。<br>10 萬放一年就有 2000 是蠻值得的，當然不要本末導致，<br>省下的跨行交易手續費與其方便性才是我們要的。<br>這個帳戶的設計上金錢會有小額高頻的流通，<br>不要為了 2% 而讓錢鎖死不流動，<br>假設股市的投資如果有 5% 報酬的話應該讓現金流向股市市場(需要考慮投資風險)，<br>當然有閒錢還是可以考慮…</p></blockquote><p>2020 年可以參考這篇文章，<a href="https://carl5202002.pixnet.net/blog/post/316738662-%E8%B7%A8%E8%A1%8C%E8%BD%89%E5%B8%B3%E5%85%8D%E6%89%8B%E7%BA%8C%E8%B2%BB" target="_blank" rel="noopener">轉帳免手續費帳戶比較</a><br>雖然開戶作業有時候很麻煩，這些優惠也常常過幾年後就消失與改變。<br>但是僅僅這幾年中帶來的方便性也是很高的喔，<strong>手續費這種磨血的花費真的建議能省則省。</strong></p><h4 id="証券戶-証券銀行"><a href="#証券戶-証券銀行" class="headerlink" title="証券戶/証券銀行"></a>証券戶/証券銀行</h4><p>目的:主要的股票投資帳戶，銀行與証券戶轉帳不應有手續費，<br>還沒有投資就先虧一筆，就好像跑百米你讓人家 10 公分，<br>你覺得沒差嗎？我覺得有差，跑百米我不是 Bolt ，理財我不是連公子。<br>証券銀行轉到其它銀行有一定次數的<strong>跨行轉帳免手續費</strong><br>這裡的次數不用多 1~5 次即可，主要是我的交易頻率其實不高，<br>需要交易，通常是有大筆資金需要轉投資其它項目的時候，<br>反而是<strong>單日/周/月轉帳上限</strong>比較重要，可以在開戶的時候作約定。<br>最重要的是証券<strong>交易手續費要儘可能的低</strong>，<br>基本上會有 1.425‰*0.6(ex:富邦) 的折扣，<br><del>高交易額</del>或有活動開戶的券商可以更低 (ex:華南 1.425‰*0.3)，<br>不要小看這千分一點四二五的 3 折，以前我不知道，傻傻被扣的錢可以訂好幾年的 Spotify 了<br>最後要有 <code>好用的App</code> (實際上好像每家都一樣，都是三竹作的？)</p><h4 id="其他投資"><a href="#其他投資" class="headerlink" title="其他投資"></a>其他投資</h4><p>活存</p><blockquote><p>在低/零利率時代，活存已經不適合作投資的首選，<br>所以通常會與 <code>主帳戶(Main Acct)</code> 作結合，<br>主要用於生活上食衣住行娛樂所需的花費，<br>方便性將大於投資目的，但是仍要選擇活存利率高，<br>或是回饋高(ex:刷卡回饋/ShopBack)的消費方式</p></blockquote><p>定存</p><blockquote><p>利率要高，但是在低/零利率時代，定存已經不是良好的投資標的。<br>但建議可以將<strong>緊急預備金</strong>作為定存</p></blockquote><p>外幣:</p><blockquote><p>性質會與<strong>活存</strong>類似，但以外幣計價，應為國際通用貨幣(美金、歐元等…)，利率要高，<br>主要的目的為美股、旅遊、<del>海外置產(目前沒有)</del>，特性是交易手續費都不便宜，所以持有比例不會太多。</p></blockquote><p>美股/其它市場股票</p><blockquote><p>台股之外第一選擇，以美股為主，<br>好處是標的超多，可以賺世界上所有標的的錢，<br>缺點是美金計價所以想轉換成現鈔或是台幣手續費都很高，<br>沒特殊情況這些錢不會拿出來花，會變成純粹的投資。<br>研究中…</p></blockquote><p>黃金/貴金屬:</p><blockquote><p>有使用黃金帳戶買過，非實體黃金，<br><strong>只能賺差價而不生息</strong>，所以不愛，目前已經不再投入。</p></blockquote><h2 id="支出"><a href="#支出" class="headerlink" title="支出"></a>支出</h2><p>所有的支出應該都採取<code>預算制</code>，<br>每年編列並支出，作為個人，不應有消耗預算的行為，<br>但是可以挪移至下一年度。</p><h3 id="Fixed-Charge-固定支出"><a href="#Fixed-Charge-固定支出" class="headerlink" title="Fixed Charge (固定支出)"></a>Fixed Charge (固定支出)</h3><ul><li>保費(綁定信用卡)</li><li>稅金(分期 0 利率)</li><li>孝親費</li><li>訂閱制服務<ul><li>域名( Domain )</li><li>Spotify (綁定信用卡)</li><li>水/電/瓦斯</li><li>網路/手機電信/第四台</li></ul></li><li>生活費</li><li>投資<ul><li>定期不定額</li><li>主動式投資</li></ul></li></ul><h3 id="浮動支出"><a href="#浮動支出" class="headerlink" title="浮動支出"></a>浮動支出</h3><p>預算制設定上限，但是以實支實付為主</p><ul><li>學習費用<ul><li>買書</li><li>上課</li></ul></li><li>娛樂費用<ul><li>旅行</li><li>聚餐</li></ul></li><li>婚喪禮金<ul><li>好友/親人</li><li>普通同事/朋友，只包不去通常可以省時省錢</li></ul></li></ul><h2 id="Over-View"><a href="#Over-View" class="headerlink" title="Over View"></a>Over View</h2><p><img src="/images/2020/11/cashflow.png" alt="Cash Flow Over View"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://carl5202002.pixnet.net/blog/post/316738662-%E8%B7%A8%E8%A1%8C%E8%BD%89%E5%B8%B3%E5%85%8D%E6%89%8B%E7%BA%8C%E8%B2%BB" target="_blank" rel="noopener">轉帳免手續費</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;耶和華所賜的福使人富足，並不加上憂慮。— 箴10:22.&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;投資理財是現代人生活極為重要的部份，&lt;br&gt;但是我在
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 簽署軟體工藝宣言</title>
    <link href="https://blog.marsen.me/2020/10/28/2020/softwarecraftsmanship.manifesto/"/>
    <id>https://blog.marsen.me/2020/10/28/2020/softwarecraftsmanship.manifesto/</id>
    <published>2020-10-28T03:16:17.000Z</published>
    <updated>2020-11-10T05:49:05.997Z</updated>
    
    <content type="html"><![CDATA[<p>As aspiring Software Craftsmen we are raising the bar of<br>professional software development by practicing it and helping<br>others learn the craft. Through this work we have come to value:  </p><p>Not only working software, but also <code>well-crafted software</code><br>Not only responding to change, but also <code>steadily adding value</code><br>Not only individuals and interactions, but also <code>a community of professionals</code><br>Not only customer collaboration, but also <code>productive partnerships</code></p><p>That is, in pursuit of the items on the left we have found the items on the right to be indispensable.  </p><p>作為有理想的軟件工匠，我們一直身體力行，<br>提升專業軟件開發的標準，並幫助他人學習此工藝。<br>通過這些工作，我們建立以下的價值觀：</p><p>不僅要讓軟件工作，更要精益求精<br>不僅要響應變化，更要穩步增加價值<br>不僅要有個體與互動，更要形成專家的社區<br>不僅要與客戶合作，更要建立卓有成效的伙伴關係</p><p>也就是說，左項固然值得追求，右項同樣不可或缺。</p><h2 id="簽署心得"><a href="#簽署心得" class="headerlink" title="簽署心得"></a>簽署心得</h2><p>這些價值觀我是相同認同的,<br>可是這個網站的感覺並沒有呈現出那樣價值觀啊…<br>或許還少了一點美感.  </p><p>我的簽署資訊如下,<br><code>30196   Marsen (Taiwan) 2020/10/28</code>,<br>查詢功能不能查 ID 與國家有點弱,<br>沒有正體中文的翻譯,  補充資料的部份很不錯,<br>但是也只是沒有系統的散落在那裡.<br>想給點回饋,也找不到留言區或討論區, 或是網站的 Repository.  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="http://teddy-chen-tw.blogspot.com/search/label/%E9%82%84%E5%B0%91%E4%B8%80%E6%9C%AC%E6%9B%B8" target="_blank" rel="noopener">【還少一本書】Clean Agile</a></li><li><a href="http://manifesto.softwarecraftsmanship.org/" target="_blank" rel="noopener">Software Craftsmanship Manifesto（軟體工藝宣言）</a></li><li><a href="http://manifesto.softwarecraftsmanship.org/#/en/reading" target="_blank" rel="noopener">Software Craftsmanship Manifesto（軟體工藝宣言）#相關閱讀</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As aspiring Software Craftsmen we are raising the bar of&lt;br&gt;professional software development by practicing it and helping&lt;br&gt;others lear
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 怎麼建立一個網站？(四) - 自訂網域 EMail</title>
    <link href="https://blog.marsen.me/2020/10/22/2020/google_domain_forward_mail/"/>
    <id>https://blog.marsen.me/2020/10/22/2020/google_domain_forward_mail/</id>
    <published>2020-10-22T03:02:59.000Z</published>
    <updated>2020-11-24T06:34:50.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>擁有自已域名的網站已經 4 年啦, 雖然我只有用在 Blog 上，<br>而且是用靜態網站的方式呈現，但也是算小小的一個成就.<br>不過其實心理還是有一個小小的缺憾，就是我沒有自已域名的 email.<br>之前沒有好好作功課，想到還要架設一個 Mail Server 就覺得不可能.<br>但其實並沒有那麼複雜.<br>我使用 <a href="https://domains.google.com/" target="_blank" rel="noopener">Google Domain</a> 的服務結合 <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">CloudFlare</a>.<br>大約只要 30 分鐘就能收到信啦.</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>首先是進入 Google Domain 的後台,<br>記得如果你人在台灣是不被允許使用 Google Domain 的服務,<br>所以必需要透過 VPN 跳轉到美國才能操作後台喔.</p><p>真的是超簡單的,但是數量上限為 100 個,<br>加上 Google 的服務常常說收就收, 有商務需求的人還是不建議這個方式喔.<br>電子郵件 &gt; 新增電子別名,輸入自已想要的名字,然後填入<code>現有收件者電子郵件地址</code></p><p>![新增電子郵件別名](/images/2020/10/email/add_forward.jpgJ</p><p><img src="/images/2020/10/email/add_name.jpg" alt="輸入轉寄電子郵件"></p><p>如果你全部使用 Google 的服務的話,這樣子的設定就好了,<br>DNS 的 MX 記錄 Google 會自動幫你處理到好.<br>但是如果你像我一樣, 使用了別的 DNS 服務就必須要自已手動將 MX 記錄註冊上去喔<br>在 CloudFlare &gt; DNS 就可以進行設定.  </p><table><thead><tr><th>名稱/主機/別名</th><th>類型</th><th>存留時間 (TTL)</th><th>優先順序</th><th>值/回應/目的位置</th></tr></thead><tbody><tr><td>空白或 @</td><td>MX</td><td>1 小時</td><td>5</td><td>gmr-smtp-in.l.google.com</td></tr><tr><td>空白或 @</td><td>MX</td><td>1 小時</td><td>10</td><td>alt1.gmr-smtp-in.l.google.com</td></tr><tr><td>空白或 @</td><td>MX</td><td>1 小時</td><td>20</td><td>alt2.gmr-smtp-in.l.google.com</td></tr><tr><td>空白或 @</td><td>MX</td><td>1 小時</td><td>30</td><td>alt3.gmr-smtp-in.l.google.com</td></tr><tr><td>空白或 @</td><td>MX</td><td>1 小時</td><td>40</td><td>alt4.gmr-smtp-in.l.google.com</td></tr></tbody></table><p><img src="/images/2020/10/email/mx_record.jpg" alt="MX"></p><p>設定完成後依照 Google 的說法會收到一封信(但是有些情況收不到)就會生效,<br>我實測上沒收到信,但是寄信馬上就生效了.<br>有了自已域名的信箱<del>虛榮感</del>專業度是不是又上升了幾個百分點呢?</p><h2 id="補充-20201118"><a href="#補充-20201118" class="headerlink" title="補充 20201118"></a>補充 20201118</h2><p>前面已經可以透過自已的域名收信啦，<br>那麼怎麼寄信呢?  </p><p>想像一下，如果用 <code>admin@yourdomain.com</code> 收信，<br>卻用 <code>youraccout@gmail.com</code> 回信，<br>是不是整個 Low 掉了，而且收信者是不是會懷疑怎麼寄信給 A 卻是 B 回信呢?。</p><p>為了解決這個問題，請參考<a href="https://support.google.com/domains/answer/9437157" target="_blank" rel="noopener">在 Gmail 中使用別名傳送電子郵件</a>，  </p><ol><li><p>產生應用程式密碼</p><ul><li>登入Google帳戶後，前往<a href="https://myaccount.google.com/" target="_blank" rel="noopener">Google 帳戶</a>頁面。<br><img src="/images/2020/10/email/gmail_application_setting.jpg" alt="登入Google帳戶後，前往[Google 帳戶](https://myaccount.google.com/)頁面。"></li><li>左側安全性 &gt; 應用程式密碼 &gt; 選取應用程式(選擇郵件) &gt; 選取裝置(其它) &gt; <strong>輸入自已的 Domain</strong> &gt; 產生<br><img src="/images/2020/10/email/gmail_application_add.jpg" alt="登入Google帳戶後，前往[Google 帳戶](https://myaccount.google.com/)頁面。"><br><img src="/images/2020/10/email/gmail_application_password.jpg" alt="輸入密碼"></li><li>把系統產生的 16 個字元密碼記錄下來。等一下我們會需要用到這組密碼</li></ul></li><li><p>新增電子郵件別名</p><ul><li>登入 Gmail &gt; 設定 &gt; 帳戶和匯入 &gt; 選擇寄件地址 &gt; 新增另一個電子郵件地址</li><li>電子郵件地址輸入 <strong>自訂網域信箱</strong> &gt; 勾選「視為別名」</li><li>SMTP 伺服器輸入 <strong>smtp.gmail.com</strong> 通訊埠 <strong>587</strong>，選取<strong>採用 TLS 的加密連線</strong><br><img src="/images/2020/10/email/gmail_application_smtp.jpg" alt="SMTP 設定"></li><li>使用者帳戶請輸入 Google 帳戶(不用包含<code>@gmail.com</code>)，密碼使用上一步的<strong>應用程式密碼</strong> &gt; 新增帳戶</li><li>系統會寄一封驗証信，驗証後即可使用新的信箱寄信了<br><img src="/images/2020/10/email/gmail_application_verify.jpg" alt="驗証信箱"></li></ul></li><li><p>變更「寄件者」地址</p><ul><li>登入 Gmail &gt; 設定 &gt; 帳戶和匯入 &gt; 選擇寄件地址</li><li>設定回覆郵件時：來自和郵件傳送地址相同位置的回覆</li><li>將自訂網域的信箱設定為預設郵件</li></ul></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://support.google.com/domains/answer/3251241?hl=zh-Hant#emailForwarding" target="_blank" rel="noopener">轉寄電子郵件</a></li><li><a href="https://support.google.com/domains/answer/9428703" target="_blank" rel="noopener">設定自訂名稱伺服器的電子郵件轉寄功能</a></li><li><a href="https://support.google.com/domains/answer/9437157" target="_blank" rel="noopener">在 Gmail 中使用別名傳送電子郵件</a></li></ul><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li><a href="https://blog.marsen.me/2016/08/21/2016/setting_DNS_with_google/">怎麼建立一個網站？(一)</a></li><li><a href="https://blog.marsen.me/2016/08/28/2016/how_to_use_github_page/">怎麼建立一個網站？(二)</a></li><li><a href="https://blog.marsen.me/2016/09/04/2016/http2_by_cloudflare/">怎麼建立一個網站？(三)</a></li><li><a href="https://blog.marsen.me/2020/10/22/2020/google_domain_forward_mail/">怎麼建立一個網站？(四)</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;擁有自已域名的網站已經 4 年啦, 雖然我只有用在 Blog 上，&lt;br&gt;而且是用靜態網站的方式呈現，但也是算小小的一個成就
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] ElasticSearch Reindex</title>
    <link href="https://blog.marsen.me/2020/10/20/2020/elasticsearch_reindex_note/"/>
    <id>https://blog.marsen.me/2020/10/20/2020/elasticsearch_reindex_note/</id>
    <published>2020-10-20T07:10:59.000Z</published>
    <updated>2020-10-28T03:11:34.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>初探 ElasticSearch Service (以下簡稱 ESS )，<br>結合 Logstash、Kibana 合稱 ELK，<br>Elastic Cloud 提供更多的功能雖然蠻多還用不到，但比起自已架設會快相當的多。<br>因為主系統仍在開發中，只有部份功能上線，所以我選擇 ESS 作為我們的 Log System。<br>選擇 ESS 的原因如下:</p><ol><li>快速實現，只需要在 Elastic.io 簡單的操作，便可以有一個功能齊全的服務</li><li>提供很全面的 <a href="https://www.elastic.co/kibana" target="_blank" rel="noopener">Kibana</a> 圖形介面</li><li>與 .NET 的整合很單純，安裝完 NuGet 套件後，只要設定好 Config 立即可以使用</li><li>開源且社群活躍，也是目前主流的 Distribution Search Engine</li></ol><p>現有配置如下</p><p><img src="/images/2020/10/ess_reindex/summary.jpg" alt="Summary"></p><p>初始的配置更低，是使用最小單位、最少節點的配置。<br>Memory 只有 1 GB，Storage 有 30 GB。<br>在初始配置的情況下，<code>JVM memory pressure</code> 常態性達 70% ~ 80%，<br>這是個異常狀況，在實務上緊急將 Memory Scale Up 到 2 Memory 暫時解除這個問題。</p><h2 id="效能問題"><a href="#效能問題" class="headerlink" title="效能問題"></a>效能問題</h2><p>追究後面的本質原因的話，是在系統設計上, 每日建立新的 <a href="https://www.elastic.co/blog/what-is-an-elasticsearch-index" target="_blank" rel="noopener">Index</a>，<br>在官方的 blog 也有提到這樣的實踐方式。</p><blockquote><p>a lot of people use Elasticsearch for logging.<br>A standard format is to assign a new index for each day.<br>中略 …<br>Indices are fairly lightweight data organization mechanisms,<br>so Elasticsearch will happily let you create hundreds of indices.</p></blockquote><p>但是實務上我產生了太多的 Shards ，這也是初學者常踩的一個雷包，<br>一不小心就會 Oversharding 可以參考 <a href="`https://www.elastic.co/guide/en/elasticsearch/reference/current/size-your-shards.html#fix-an-oversharded-cluster`">How to size your shards</a> 進行修正。</p><p>這裡我使用了 Reindex 這個 API 來將一些碎小的 Index 作結合(Combine Smaller Indices)。</p><h2 id="實作記錄"><a href="#實作記錄" class="headerlink" title="實作記錄"></a>實作記錄</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html" target="_blank" rel="noopener">Reindex</a> 的 SOP</p><ol><li><p>確保 maximum shards 的足夠<br>ESS 為了避免 Oversharding 導致整個 Cluster 崩潰會有設定一個上限值，<br>7.x 版本預設為 1000 ，而 Reindex 每一個 Index 都會需要 2 個 Shards (猜測是SWAP機制)<br>以我為例，原本我的 Shards 已達 999 ，當我試著要 Reindex 時會拿到以下會錯誤。</p><p><code>this action would add [2] total shards, but this cluster currently has [1000]/[1000] maximum shards open</code></p><p> 處理的方法也很簡單，只要透過 <code>/_cluster/settings</code> 加大 <code>cluster.max_shards_per_node</code> 即可。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT localhost:9200/_cluster/settings -H "Content-Type: application/json" -d '&#123; "persistent": &#123; "cluster.max_shards_per_node": "3000" &#125; &#125;'</span><br></pre></td></tr></table></figure><p> 實務上我 Reindex 後會刪除碎小的 index，刪除後 Shards 的數量也會下降，<br> 當 Shards 剩餘數量足夠時，我會重設回 1000。</p></li><li><p>執行 reindex ，請確保新舊 index 符合商業邏輯<br> example:</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"staging-aaa-service-2020.06.*"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"dest"</span>: &#123;</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"staging-aaa-service-2020.06"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>確保查詢一致</p><ul><li>query 數量為 N</li><li>Reindex  </li><li>query 數量為 2N</li><li>delete</li><li>query 數量為 N</li></ul></li><li><p>執行紀錄</p><ul><li>staging-aaa-system-*</li><li>staging-bbb-server-*</li><li>staging-ccc-service-*</li><li>prod-aaa-system-*</li><li>prod-bbb-server-*</li><li>prod-ccc-service-*<ul><li>prod-ccc-service-2020.09-* 有掉資料(12萬筆→9萬筆)<br><img src="/images/2020/10/ess_reindex/loss_data.jpg" alt="Loss Data"></li></ul></li></ul></li><li><p>結果評估<br>Memory 只有 2 GB，Storage 有 60 GB 時。<br>ReIndex 並刪除碎小 Indices 前 <code>JVM memory pressure</code> 常態性達 40%，<br>執行後，<code>JVM memory pressure</code> 約為 20%。<br>也就是說我可以改用更小(便宜的配置處理目前的資料量)。</p></li></ol><p><img src="/images/2020/10/ess_reindex/jvm_pressure_down.jpg" alt="JVM Memory Pressure Down"></p><h2 id="改善建議"><a href="#改善建議" class="headerlink" title="改善建議"></a>改善建議</h2><ul><li>重要敏感的資料，要先備份才能進行 Reindex 的操作</li><li>下次 reindex 遇到大量資料，要切成更小的單位進行，<br>比如說每 10 天或每天，減少一次性 reindex 的資料量，<br>減少失敗與掉資料的可能性發生。</li><li>需要將系統改用較長的時間周期去建立 Index  </li><li>縮小雲端系統配置。</li></ul><h2 id="進階思考"><a href="#進階思考" class="headerlink" title="進階思考"></a>進階思考</h2><ul><li>如果我想要維持 Daily Indices Created 但是又不想讓 Shard 成長爆量，我應該怎麼作呢 ?</li><li>或是有什麼機制，可以讓我定期將某些資料 Reindex 嗎 ?</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10253348" target="_blank" rel="noopener">Shard 的最佳化管理</a></li><li><a href="https://www.elastic.co/blog/what-is-an-elasticsearch-index" target="_blank" rel="noopener">What is an Elasticsearch Index?</a></li><li><a href="https://godleon.github.io/blog/Elasticsearch/Elasticsearch-getting-started/" target="_blank" rel="noopener">[Elasticsearch] 基本概念 &amp; 搜尋入門</a></li><li><a href="https://shazi.info/elasticsearch-7-x-node-%E9%96%8B%E6%94%BE-1000-%E5%80%8B-shards-%E9%99%90%E5%88%B6/" target="_blank" rel="noopener">Elasticsearch 7.x node 開放 1000 個 shards 限制</a></li><li><a href="https://www.elastic.co/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster" target="_blank" rel="noopener">How many shards should I have in my Elasticsearch cluster?</a></li><li><a href="https://juejin.im/entry/6844903715468492813" target="_blank" rel="noopener">圖解 Elasticsearch 原理</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;初探 ElasticSearch Service (以下簡稱 ESS )，&lt;br&gt;結合 Logstash、Kibana 合稱
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>單元測試分享(一) --- Why ? How ? What ?</title>
    <link href="https://blog.marsen.me/2020/10/19/2020/unittest_1/"/>
    <id>https://blog.marsen.me/2020/10/19/2020/unittest_1/</id>
    <published>2020-10-19T07:59:51.000Z</published>
    <updated>2020-10-28T02:07:37.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>目前參加的讀書會有點進入了倦怠期，<br>參加的人數出席不穩定，會議過程有點感覺像是在照本宣科。<br>所以我們安排每隔幾周，由不同分享一下個人工作上不同的經驗。<br>讓負責分享章節的人可以有更多時間準備，<br>同時也可以讓聽者換換口味同時喘口氣。  </p><p>對於我來說，可以重新整理一下過往的經驗。<br>試著能不能更有組織的分享單元測試這個工具與知識。<br>同時，因為是線上分享會的形式，當我無法觀察觀眾的表情時，<br><strong>遠端會議應該怎麼進行才能更有效呢?</strong>  </p><p><img src="/images/2020/10/video_phone_conversation.jpg" alt="遠端協作的 Conversation Cost 仍然相當高"></p><h3 id="進行方式"><a href="#進行方式" class="headerlink" title="進行方式"></a>進行方式</h3><ul><li>先問為什麼?</li><li>輪流發表一下想法(TimeBox:60s)</li><li><del>Live Coding</del> (如果是現場分享，我會希望多一點實作)</li></ul><h3 id="思考問題"><a href="#思考問題" class="headerlink" title="思考問題"></a>思考問題</h3><ol><li>(單元)測試是什麼呢 ?</li><li>為什麼要寫(單元)測試 ?</li><li>什麼樣的情境需要(單元)測試?</li></ol><p>這裡的設計是 What、Why、When，我覺得改成 What、When→How、Why 會更好。<br>主要的目的是引導聽眾思考 Why，這裡我的受眾應該為開發人員，<br>實務上還有可能會是 QA(測試人員)、產品經理(PM/PO*)、維運人員、<br>營運部門甚至是老闆或客戶。</p><p>舉例情境如下:</p><p>問:單元測試或是測試是什麼呢?<br>答:是一種自動化的對程式的方法進行驗証 blab blab ….</p><p>捕捉到關鍵字 <code>自動化</code> <code>方法</code>…可以延伸提問</p><ul><li>測試不一定要<code>自動化</code>，但是單元測試建議要作到<strong>一鍵測試(半自動)</strong></li><li>單元不一定是<code>方法</code>，但我們可以以<code>方法</code>當作最小粒度來討論，<br>後續的分享會對粒度再作討論，但重要的是<strong>團隊的認知要一致</strong></li></ul><p>進一步提問<strong>什麼樣的情境需要(單元)測試?</strong>，<br>如果現場乾掉了，可以改成以下的提問:</p><ul><li>上 Prod 前要不要測試?<ul><li>那上 QA/Stage 要不要測試?</li></ul></li><li>開發新功能要不要測試 ?<ul><li>那 HotFix 要不要測試 ?</li></ul></li><li>拿到一份全新沒看過的 Source Code 要不要測試 ?</li></ul><p>你會發現測試無所不在，那我們為什麼(Why)要測試啊?<br>我的回答，(單元)測試是品質保証的一種手段，  </p><p>如果上線前，(單元)測試全過，<br>我就對被測試保護的方法(情境)有信心不會壞。<br>同樣的，在部署到其它環境時測試通過，我對品質信也就會跟著提昇。<br>換句話說，<strong>測試是品質的可量化指標。</strong></p><blockquote><p>可能的問題:測試全過，上線還是有可能會壞掉啊<br>回答: 壞掉是什麼樣的情境 ? 是不是一種沒有被測試保護到的情境 ?<br>是的話只要加上情境即可，一般來說我們應該可以作到 96 % 以上的常態情境<br>剩下考慮發生機率與重要性，應該加上測試就加測試保護，<br>這裡不限定單元測試也包含整合/端到端/手動等其它測試。</p></blockquote><p>另一個情境是開發新功能，<br>任何<strong>功能都是方法與流程的組合</strong>，<br>當你在開發新方法或新功能時，如果能同時寫好測試<em>，<br>那你就會有*</em>一份具備可量化品質的代碼**，<br>同時還可以帶來的額外好處是，當有一個新人拿到你的代碼時，<br>他會有一份測試可以當作規格書來閱讀。  </p><blockquote><p>注意:這裡可以代入很多其它相關的概念<br>比如說:TDD、Code Review、可讀性、Pair Programming</p></blockquote><p>理解方法與流程是最耗時的一件事，<br>如果有測試可以節省相當多的時間，<br>但要注意測試也是人寫的，如果為了寫而寫，很容易寫出垃圾測試，<br>試著在開發流程上引入 Pair Programming、Code Review、Pull Request 等…機制<br>另外當代碼成長到一定程度時，<br>如果需要重構，測試將提供一定的保護網(看覆蓋率多少)。<br>但要小心實務上不應該過度追求覆蓋率。</p><blockquote><p>這裡提供一個觀念，不要為了 Design Pattern 而 Design Pattern<br>但是即有的代碼需要重構之時，Design Pattern 可以提供像是燈塔般的指引作用<br>只要巧妙的設計測試案例，走向目標。</p></blockquote><p>此外，當代碼有了單元測試的保護，<br>在開發日常的除錯作業將會有很大的幫助，<br>測試可以幫你快速的定位錯誤。<br>即使測試並未攔截到錯誤的話，那也表示你發現了一個前所未有的情境，<br>而只要加上這個測試情境，再修改代碼，未來這個情境將不會再有錯誤。</p><h3 id="經典書籍對單元測試的定義"><a href="#經典書籍對單元測試的定義" class="headerlink" title="經典書籍對單元測試的定義"></a>經典書籍對單元測試的定義</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一個單元測試是一段自動化的程式碼，這段程式會呼叫被測試的工作單元，</span><br><span class="line">之後對這個單元的單一最終結果的某些假設或期望進行驗証。</span><br><span class="line">單元測試幾乎都是可以使用單元測試框架進行撰寫的。</span><br><span class="line">撰寫單元測試很容易，執行起來快速。單元測試可靠，易讀，並且很容易維護。</span><br><span class="line">只要要產品不發生改化，單元測試執行結果是穩定一致的。</span><br><span class="line"></span><br><span class="line">--- &lt;&lt;單元測試的藝術2nd&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="F-I-R-S-T-Principles"><a href="#F-I-R-S-T-Principles" class="headerlink" title="F.I.R.S.T Principles"></a>F.I.R.S.T Principles</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- Fast : 快速→不夠快就不會被頻繁執行</span><br><span class="line">- Independent :獨立→互相依賴的測試，會讓除錯變得困難</span><br><span class="line">- Repeatable : 可重複→在任何環境下執行都有相同的結果(EX:時間／網路)</span><br><span class="line">- Self-Validating : 自我驗証→測試是否通過，不需額外的判斷與操作</span><br><span class="line">- Timely : 即時→產品代碼前不久先寫測試</span><br><span class="line"></span><br><span class="line">---&lt;&lt;Clean Code&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>上面提到很多工程面的實踐，<br>也不僅限於單元測試，更多的是測試與品質的關係。<br>一再強調的觀念是:</p><p><strong>測試是品質的可量化指標。</strong><br><strong>測試是品質的可量化指標。</strong><br><strong>測試是品質的可量化指標。</strong></p><p>而回到工程面上來說，作為第一線的品質把關，<br>開發人員本來就應該對自已的代碼提供單元測試，<br>而 TDD、Test As Document、Refactoring、Design Pattern 等…是環環相扣的工程實踐，<br>Pair Programming、Code Review、Pull Request 等…是工程流程的實踐<br>單元測試正是那個將各種實踐結合在一起的一種工具。</p><p><img src="/images/2020/10/unit_test_is_basic_tool.jpg" alt="Unit Test is basic tool"></p><p>在心法上，要將單元測試視作工具，而非聖盃，<br><code>TDD</code> 或是<code>覆蓋率</code>也是同樣的道理，御物而不御於物。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的軟體 重於 詳盡的文件</span><br><span class="line">&lt;&lt;敏捷軟體開發宣言&gt;&gt;</span><br></pre></td></tr></table></figure><p>引用一下敏捷宣言:<br>可用的軟體 重於 100%覆蓋率的代碼<br>可用的軟體 重於 測試全過的代碼<br>右側項目雖然有其價值，但我們更重視左側項目。</p><p>而這裡<strong>可用的最低標準，我認為是符合品質期待</strong>。</p><h2 id="First-Test"><a href="#First-Test" class="headerlink" title="First Test"></a>First Test</h2><h3 id="第一個單元測試，加法計算器"><a href="#第一個單元測試，加法計算器" class="headerlink" title="第一個單元測試，加法計算器"></a>第一個單元測試，加法計算器</h3><h4 id="Case-Add-1-1-2"><a href="#Case-Add-1-1-2" class="headerlink" title="Case:Add(+) : 1 + 1 = 2"></a>Case:Add(+) : 1 + 1 = 2</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add_1_1_is_2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> Calculator();</span><br><span class="line">    Assert.Equal(<span class="number">2</span>, target.Add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Production 代碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> first, <span class="keyword">int</span> second</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Next-Case"><a href="#Next-Case" class="headerlink" title="Next Case"></a>Next Case</h4><p>用 Test Case 逼出邏輯，用最簡單的方法實踐</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add_2_1_is_3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> Calculator();</span><br><span class="line">    Assert.Equal(<span class="number">3</span>, target.Add(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Calculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span>(<span class="params"><span class="keyword">int</span> first, <span class="keyword">int</span> second</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> first + second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3A-原則"><a href="#3A-原則" class="headerlink" title="3A 原則"></a>3A 原則</h4><ul><li><p>Arrange(準備、初始化)<br>如果 Arrange 過長會是一個壞味道，<br>表示這方法相依太多參數、服務或模組<br>範例:</p><ul><li><code>target = new Calculator();</code></li><li>first number is <code>2</code></li><li>second number is <code>1</code></li></ul></li><li><p>Act(執行/呼叫受測行為)</p><ul><li><code>target.Add(2, 1)</code></li></ul></li><li><p>Assert(驗証)</p><ul><li>`Assert.Equal(3, acted result);</li></ul></li></ul><p>不要過度追求可讀性，而將測試程式變得難以理解，<br>可以使用測試驗証框架(ex:Fluent Assertions)，<br>或是抽出方法來增加可讀性，但比起可讀，更重要是可理解。</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><p>後續的 Live Coding 會讓參加者完成後續的方法測試，<br>加法、減法、乘法、除法…<br>特別計算到除法的除零邏輯時，應該拋出錯誤。<br>趁這個機會可以介紹如何驗証 Exception。</p><blockquote><p>進一步可以介紹如何使用 <code>fluentassertions</code>。</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Divide_7_0_is_Exception</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Func&lt;<span class="keyword">int</span>&gt; act = () =&gt; _target.Divide(<span class="number">7</span>, <span class="number">0</span>);</span><br><span class="line">    act.Should().Throw&lt;DivideByZeroException&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;目前參加的讀書會有點進入了倦怠期，&lt;br&gt;參加的人數出席不穩定，會議過程有點感覺像是在照本宣科。&lt;br&gt;所以我們安排每隔幾周
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] TUTORING APP 多特英 第四屆體驗大使 --- 心得篇</title>
    <link href="https://blog.marsen.me/2020/10/03/2020/after_try_tutoring_app/"/>
    <id>https://blog.marsen.me/2020/10/03/2020/after_try_tutoring_app/</id>
    <published>2020-10-03T15:34:53.000Z</published>
    <updated>2020-10-05T07:23:20.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>直接連結<a href="https://blog.marsen.me/2020/09/09/2020/before_try_tutoring_app/">前篇</a> 吧。<br><a href="https://bit.ly/3dJk4Sr" target="_blank" rel="noopener">APP 下載連結</a>我也不囉唆，直接給。</p><h2 id="使用記錄"><a href="#使用記錄" class="headerlink" title="使用記錄"></a>使用記錄</h2><p>我在使用前就知道接下來兩個禮拜並不輕鬆，<br>除了一些平日的課程之外，還有排舞與游泳的練習與它牌的英語課。<br>所以我計劃第一周上 4 次課(80分鐘)，<br>第二周上 5 次課(100分鐘)。</p><p>我原本的想法是這個 app 應該可以用一些空閒時間來填補，<br>但是實際上真的沒有那麼簡單。</p><h3 id="心態面"><a href="#心態面" class="headerlink" title="心態面"></a>心態面</h3><p>畢竟這是一個跟真人對話的英文口說 APP ，同時要使用你並不擅常的語言。<br>以我來說並不是那麼容易的東西，通常老師也會跟你作一小段的開場白，<br>問問你今天過得好嗎，或是簡單的自我介紹，身為內向者其實要保留一點心力來回答。</p><h3 id="環境面"><a href="#環境面" class="headerlink" title="環境面"></a>環境面</h3><p>一開始我認為我可以中午午休在咖啡廳/樓梯間/公園之類的地方進行，<br>實際上沒那麼容易，一方面是心態上面的問題，<br>如同上面所說，開始的時候需要一點心理建議，需要一點儀式感，<br>在公眾場合會讓困難度倍增，有陌生人在旁邊，即使有使用耳機，<br>但恥度不夠仍然無開始課程。<br>另一方面，在公眾場合有較高的機率發生未逾期的狀況，所以可能會導致課程被中斷。</p><p>我自已經驗是，有一次我跟一個老師通話，才開始 5 分鐘，<br>家裡就有人回來，然後敲我的門，被迫中斷了課程，<br>雖然我有跟老師說我馬上回來，但是不知何種原故，我回來時老師已經中斷課程，<br>並且離線了。</p><h3 id="師資面"><a href="#師資面" class="headerlink" title="師資面"></a>師資面</h3><p>這次體驗老師都是國際老師，我的經驗是大多是菲律賓老師，<br>只有一位應該是韓國老師，希望有機會在平台上看到台灣老師唷<br>然後有部份的老師我上課起來仍然是有一些環境音的，<br>影不影響，我覺得就看個人，是可以跟老師溝通一下。</p><p>未來有機會的話，我可能還是會試試母語老師，不過沒有上過也很難比較就是了。<br>這次的 9 堂課就老師我來說，覺得都是很 OK 的唷。</p><h3 id="課程面"><a href="#課程面" class="headerlink" title="課程面"></a>課程面</h3><p>對我來說理想的上課時間可能至少 40 分鐘一次比較能有完整的對話。<br>但是 20 分鐘以目前的課程來說，其實也是夠了。<br>它內部推薦給我的課程等級是 <code>Int. Low</code> 大概還在講解基本的時態，<br>這個評分我相信是準確的，但是課程仍是有些無聊，比起課程的理論，<br>也許我需要更多的實際應用，能在對話上實際演練。</p><h3 id="APP-面"><a href="#APP-面" class="headerlink" title="APP 面"></a>APP 面</h3><p>主要的操作是蠻簡單的，也算好理解，<br>不懂的地方也可以問老師，但是我不確定是不是安卓與 iOS 的差異，<br>我之前問的一些按鈕的位置，老師的說明跟我實際上看到並不一樣，<br>所幸我很快就有找到，不然蠻浪費時間在這裡的。</p><p>說明一下課程中，你會看到教材頁，老師在滑動時，你的教材也會連動，<br>另外還有對話頁，可以在這些透過打字跟老師溝通。<br>我是使用 iPhone 7 ，在課程中老師有時候會傳訊息給你，<br>當我切到對話頁，想再切換回教材頁時，常常會反應不良，<br>我不確定是延遲或是觸發區太小我按不到，但是的確是一個困擾。  </p><p>還有的時候教材連動會斷掉，不確定機制為何。<br>但是對我來說不影響，只要問一下在第幾頁就好了。</p><h2 id="心得與題外話"><a href="#心得與題外話" class="headerlink" title="心得與題外話"></a>心得與題外話</h2><p>我在上面說到，我本來打算第一周上 4 堂課，第二周上 5 堂課的，<br>但是我真的是在第二周忙到爆炸了，所以我在最後的一天的晚上 10 點鐘，<br>一口氣上完了 5 堂課。</p><p>唯一的問題大概就是太晚了找不太到老師(因為大多為菲律賓老師，而時區與台灣相同)，<br>另外中間還有發生跟老師有誤會導致課程中斷的事。<br>所以整體而言，跟我原先的預期大概只完成了 87 % 左右。</p><p>不過三更半夜的在 2 個小時內找到 4 個老師上課，這就是現實生活中難以實現的事吧。<br>多虧了網路的無遠弗界，再加上 TUTORING APP 這樣的線上英文學習媒合才辦得到吧，<br>當然希望未來有更多時區的老師可以選擇囉。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://tutoring.pixnet.net/blog/post/3797354" target="_blank" rel="noopener">價格介紹文章</a></li><li><a href="https://tutoring.pixnet.net/blog/post/12459416" target="_blank" rel="noopener">TUTORING客服</a></li><li><a href="https://tutoring.pixnet.net/blog/post/7117913-app%e4%bd%bf%e7%94%a8%e4%bb%8b%e7%b4%b9%ef%bd%9c%e5%a6%82%e4%bd%95%e7%8d%b2%e5%be%97%e5%85%8d%e8%b2%bb%e6%b0%b4%e5%b9%b3%e6%b8%ac%e8%a9%a6%e5%88%b8%ef%bc%9f%ef%bd%9ctut" target="_blank" rel="noopener">獲得免費水平測試</a></li><li><a href="https://tutoring.pixnet.net/blog/category/270020" target="_blank" rel="noopener">使用FAQ</a></li><li><a href="https://tutoring.pixnet.net/blog/category/219587" target="_blank" rel="noopener">用戶反饋</a></li><li><a href="https://tutoring.pixnet.net/blog/category/214517" target="_blank" rel="noopener">外師推薦</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;直接連結&lt;a href=&quot;https://blog.marsen.me/2020/09/09/2020/before_try
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[翻譯] AHA Programming 💡</title>
    <link href="https://blog.marsen.me/2020/09/30/2020/aha_programing/"/>
    <id>https://blog.marsen.me/2020/09/30/2020/aha_programing/</id>
    <published>2020-09-30T06:44:53.000Z</published>
    <updated>2020-09-30T06:49:03.678Z</updated>
    
    <content type="html"><![CDATA[<p>The dangers of DRY, the web of WET, the awesomeness of AHA.</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>為什麼我要翻譯 ? 練習英文，同時學習程式開發的原則 。<br>程式開發原則其實超級多，稍稍整理一下。</p><h3 id="物件導向程式設計的-SOLID-原則"><a href="#物件導向程式設計的-SOLID-原則" class="headerlink" title="物件導向程式設計的 SOLID 原則"></a>物件導向程式設計的 SOLID 原則</h3><p>這五個知名的原則，可以一言以蔽之 — 高內聚、低耦合。<br>而我自已更喜歡 <a href="http://teddy-chen-tw.blogspot.com/2014/04/solid.html" target="_blank" rel="noopener">Teddy 老師的五則皆變:「面對原始碼改變的五種不同策略」</a></p><h4 id="SRP-Single-Responsibility-Principle-單一職責原則"><a href="#SRP-Single-Responsibility-Principle-單一職責原則" class="headerlink" title="SRP(Single Responsibility Principle) 單一職責原則"></a>SRP(Single Responsibility Principle) 單一職責原則</h4><p>A class should have only one reason to change<br>以一個類別來說，應該只有一個引起它變化的原因。  </p><p>舉個實務上在改動代碼的例子:<br>線上回報了一個購物車的問題，<br>你去追查發現購物車保含禮品與折價券的情境下，才會發生問題，<br>同時主管要求你，這段代碼發生異常時加上 Log 並發 Email 通知。  </p><p>你會怎麼改呢 ? 加個 if 判斷購物車/禮品/折價券之間的對應關係 ?<br>使用 Try Catch 補捉異常，記錄 Log 並發送 Email ?<br>那麼這些邏輯應該被加到哪些類別呢 ?<br>請思考一下<br>在這個原則底下，應該考慮 if 的邏輯屬於購物車/禮品/折價券中的哪一類 ?<br>而三個商務邏輯如何互動，當前的設計也是要注意的方向。<br>Log / Email 也是同樣的，是否也應該隸屬獨立類別呢。<br>請思考一下，請思考一下。  </p><p>這遵循這個原則的程式設計下，可以有效減少單一類別被改變的機會。<br>以上面情境為例，Log / Email / if 的邏輯都是不同的職責，<br>如果設計得當，一個職責需要異動時只會修改到一個類別。</p><h4 id="OCP-Open-Closed-Principle-開閉原則"><a href="#OCP-Open-Closed-Principle-開閉原則" class="headerlink" title="OCP(Open Closed Principle) 開閉原則"></a>OCP(Open Closed Principle) 開閉原則</h4><p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification<br>軟體實體(類別,模組,函式等等) 應該是可以擴展的，但不能被修改</p><p>同上的情境，遵循 OCP 在面對新增需求的時候，可以單純透過新增類別或方法來達成需求。</p><h4 id="LSP-Liskov-Substitution-Principle-里氏替換原則"><a href="#LSP-Liskov-Substitution-Principle-里氏替換原則" class="headerlink" title="LSP(Liskov Substitution Principle) 里氏替換原則"></a>LSP(Liskov Substitution Principle) 里氏替換原則</h4><p>Subtypes must be substitutable for their base types.<br>基底類別應該要能夠被他的衍生類別給替代而不影響原本的功能</p><p>這裡提到的原則，其實是對繼承的限制，在強型別語言都已經有這方面的實作了。<br>以上述的例子來說，Log/Email 的實作至少應該有一層的抽象隔離，<br>並以繼承抽象的實作來，<br>也就是說實際上如何 Log 可以是 files、DB、Clound 或任何其它的東西。  </p><p>這裡也跟下面的 ISP 相呼應。</p><h4 id="ISP-Interface-Segregation-Principles-介面隔離原則"><a href="#ISP-Interface-Segregation-Principles-介面隔離原則" class="headerlink" title="ISP(Interface Segregation Principles) 介面隔離原則"></a>ISP(Interface Segregation Principles) 介面隔離原則</h4><p>No client should be forced to depend on methods it does not use.<br>不應該讓使用者去依賴他根本不會使用到的東西</p><p>介面是方法的抽象，所以我認為當一個介面有超過一個方法時，<br>就應該思考一下有沒有違背這個原則。<br>實務上會有許多的同類型的介面應該被歸屬到同一類之中，<br>簡單可行的方法是當你實作一個介面時，會不會要跟著實作許多用不到的方法呢?<br>如果有的話，試著將它們拆分成不同的介面吧。</p><h4 id="DIP-Dependency-Inversion-Principle-依賴反轉原則"><a href="#DIP-Dependency-Inversion-Principle-依賴反轉原則" class="headerlink" title="DIP(Dependency Inversion Principle) 依賴反轉原則"></a>DIP(Dependency Inversion Principle) 依賴反轉原則</h4><p>High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces).<br>高層模組不應該依賴於低層模組。兩者皆應該依賴抽象。</p><p>Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.<br>抽象不應該依賴細節。細節應該依賴抽象<br>DRY(an acronym for “”)</p><p><img src="https://i.imgur.com/pI1bZ7h.png" alt="DRY"></p><p>直接透過 wiki 的圖片來說明上面的例子。<br>想像 Object A 是購物車 Object B 是 Logger,<br>Figure 1 顯示的就是直接相依的情境，而如果我們可以透過一個 ILogger 的介面就可以反轉相依，<br>使得購物車與 Logger 都相依與介面，<br>現行主流的程式也都有提供對應的 DI Framework 或 Libary，<br>只要好好使用，這個原則並不難實踐了。</p><h3 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h3><p>說得有點太多了，以上的部份未來另外抽成相關的文章吧。</p><h2 id="主文"><a href="#主文" class="headerlink" title="主文"></a>主文</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/wuVy7rwkCfc" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="DRY"><a href="#DRY" class="headerlink" title="DRY"></a>DRY</h3><p>DRY(Don’t Repeat Yourself 的縮寫，不要重複你自已)，一個古老的軟體原則，<br>在維基百科的定義如下:</p><blockquote><p>Every piece of knowledge must have a single,<br>unambiguous, authoritative representation within a system<br>每一項知識都必須在系統中具有單一，明確，權威的表示形式</p></blockquote><p>儘管實務上比定義更為寬鬆，我仍然認為這個一個好習慣。<br>使用 Copy/Paste 最大的問題是，當某處發現了一個錯誤，<br>我會意識到其它複製貼上的地方也有相同的錯誤，並且需要被修正。</p><p>我曾經接手了一份代碼，有著大量重複代碼，為了修正一個 Bug 我需要修改 8 個地方!<br>抽像化這部份的代碼成為一個隨處可呼叫 funciton 將有很大的幫助。</p><h3 id="WET"><a href="#WET" class="headerlink" title="WET"></a>WET</h3><p>另一個概念是<code>WET(Write Everything Twice)</code></p><blockquote><p>You can ask yourself “Haven’t I written this before?”<br>two times, but never three</p><p>你可以問自己 “我以前沒有寫過這個嗎？” 兩次，但從來沒有三次</p></blockquote><p>在上面的例子中，有時候過度抽像比重複更有害。<br>那是一份 AngularJS 代碼與一些 AngularJS controller，<br>這份代碼傳遞 <code>this</code> 給一個猴子補丁(Monkey Patch)方法(註:一種在runtime時動態修改代碼的技巧)，<br>這個方法會用某種方式提供 controller 額外的能力。<br>但是這超級讓人困惑，而讓人害怕修改。</p><p>這個代碼在三個以上的地方重複使用，但是抽象性很差，我寧可代碼重複。</p><h3 id="AHA"><a href="#AHA" class="headerlink" title="AHA"></a>AHA</h3><blockquote><p>Avoid Hasty Abstractions<br>避免草率抽象<br>prefer duplication over the wrong abstraction<br>寧可重複也不要錯誤抽像<br>Optimize for change first<br>為改變而優化</p></blockquote><p>關鍵是我們不會知道代碼的未來。<br>我們無法確認，我們能確認的只有改變可能會發生，<br>如果沒有發生，為什麼要修改代碼 ?</p><p>注意以下事實:</p><ul><li>不要介意重複，直到你對重複代碼的用例有信心為止</li><li>代碼有差異的部份，是否可以抽出參數提供給你的方法</li><li>逐步執行的過程，可以抽象共用的部份將會躍來而上</li><li>不用擔心何時該對重複代碼進行抽象，直到你接觸到他</li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>不用擔心何時該對重複代碼進行抽象，<br>這不是一個硬性規定，也是為什麼我更喜歡 AHA 勝於 DRY 或 WET.  </p><h2 id="相關文章"><a href="#相關文章" class="headerlink" title="相關文章"></a>相關文章</h2><ul><li><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a></li><li><a href="https://en.wikipedia.org/wiki/Duplicate_code" target="_blank" rel="noopener">Code Duplicate</a></li><li><a href="https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33" target="_blank" rel="noopener">WET</a></li><li><a href="http://teddy-chen-tw.blogspot.com/2014/04/solid.html" target="_blank" rel="noopener">五則皆變</a></li><li><a href="https://blog.marsen.me/2020/07/27/2020/oop_experience/">[閱讀筆記] 物件導向的心得與隨筆</a></li><li><a href="https://ihower.tw/blog/archives/7181" target="_blank" rel="noopener">Kent Beck 的四個簡單程式設計原則</a></li><li><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/410455/" target="_blank" rel="noopener">九大設計原則</a></li><li><a href="https://dev.to/wuz/stop-trying-to-be-so-dry-instead-write-everything-twice-wet-5g33" target="_blank" rel="noopener">Stop trying to be so DRY, instead Write Everything Twice (WET)</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The dangers of DRY, the web of WET, the awesomeness of AHA.&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[生活筆記] L 的轉職閒聊與問題</title>
    <link href="https://blog.marsen.me/2020/09/22/2020/talk_career_with_l/"/>
    <id>https://blog.marsen.me/2020/09/22/2020/talk_career_with_l/</id>
    <published>2020-09-22T04:54:51.000Z</published>
    <updated>2020-09-22T04:56:08.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>朋友想轉職，隨便尬聊了一下，有談到自已的職涯，<br>還有我對軟體產業的一些看法。</p><h2 id="自我解析"><a href="#自我解析" class="headerlink" title="自我解析"></a>自我解析</h2><p>資策會對我的意義，系統的整理學習程式的概念，<br>在 2008 年找不到工作時，透過它成為就業的門檻。<br>薪資的成長 N → O 我大概花了 10 年。</p><ul><li>N,N+5,N+7,N+10…</li><li>M,M+1,M+2…</li><li>O…</li></ul><h2 id="軟體"><a href="#軟體" class="headerlink" title="軟體"></a>軟體</h2><ul><li>軟體工程師機會仍然很多，但薪資在掉，整體趨勢有偏向 M 型化。</li><li>第一份工作用來洗經歷<ul><li>挑一下薪水(起薪不要太低)</li><li>找能加分與學到東西的公司/產業/新創 =&gt; 可以透過社群的聯結去尋找，facebook 也找得到</li><li>前期要不恥下問，閒聊去建立聯結，有機會可以找到好公司(有大神的公司)</li><li>這個技能很百搭，其實會走各自的路</li></ul></li><li>1~2 年跳回到 6 萬 =&gt; 一直跳槽就有機會，不要騎驢找馬但是要建立連結。</li><li>為何不換公司而要換產業 ?</li><li>程式 &amp; 英文 是百搭的必修技能</li><li>無人車/電動車/人臉辨識</li><li>寫程式也有很高壓的環境，也會作假，也會有不合理的要求</li><li>新創公司大多要年輕人，30 歲以上會嫌老，但頂薪有限</li><li>中大型公司大多要穩定，結婚生子會加分，</li><li>這個產業要賺錢的話跳槽可能最快</li><li>理想加薪路徑<ul><li>4x up 第一份工作，每半年 Promo 自已一次</li><li>一年後至少上 50k 繼續每半年 Promo 自已一次(包含社群分享之類的…)</li><li>靠跳槽與 Promo 自已，兩年後上 60 k …</li><li>時間是理想值(實際上，3~6 我大約花了 5 年，有很多人是比我快的)</li><li>6~10 應該都還有上升空間，應該可以到 120 ~ 150 / year</li><li>再往上應該要跨管理</li></ul></li><li>薪水不會比時間重要</li><li>我們的好處是可以接案(但是也要花時間)</li></ul><h2 id="資策會的課程設計-AIoT"><a href="#資策會的課程設計-AIoT" class="headerlink" title="資策會的課程設計(AIoT)"></a>資策會的課程設計(AIoT)</h2><h3 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h3><ul><li>MySQL<ul><li>PostgreSql</li><li>MsSQL</li></ul></li></ul><p>用來有系統有結構性的儲存資料。<br>主要先掌握關聯性資料庫的概念就好，<br>如果要專精這塊未來主要會效能調校(需要理解資料庫的底層設計才能作到又快又好，不同牌的資料庫多少會有不同)</p><ul><li>NoSQL<ul><li>MongoDB</li><li>其它</li></ul></li></ul><h3 id="後端"><a href="#後端" class="headerlink" title="後端"></a>後端</h3><p>主要的商業邏輯的程式部份，學好 Java 才是課程主體。<br>可以考慮學習其它的語言。</p><ul><li>Java to DB</li><li>Java</li><li>Java to Web</li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>HTML、CSS、JavaScript 是前端工程師的必須項目，<br>門檻也不高但是 JavaScript 會有很多特異的行為要注意。<br>學好後再學主流的 Framework(Angular、Vue 或 React)。  </p><ul><li>Html &amp; Css</li><li>JavaScript</li><li>JQuery(不要拿來跟 Angular、Vue 或 React 比較，它的存在有歷史因素，現在學的 CP 值比較低，直接學好 JavaScript 為主)</li></ul><h2 id="主流程式開發-Web-amp-App-之路"><a href="#主流程式開發-Web-amp-App-之路" class="headerlink" title="主流程式開發(Web &amp; App)之路"></a>主流程式開發(Web &amp; App)之路</h2><p><img src="https://i.imgur.com/ME75oy1.png" alt="Before"></p><p>F2E</p><p><img src="https://i.imgur.com/OtC8yoW.png" alt="F2E"></p><p>Back-end<br><img src="https://i.imgur.com/KYi08LU.png" alt="Back-end"></p><p>DevOps<br><img src="https://i.imgur.com/ftRylxZ.png" alt="DevOps"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">https://github.com/kamranahmedse/developer-roadmap</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;朋友想轉職，隨便尬聊了一下，有談到自已的職涯，&lt;br&gt;還有我對軟體產業的一些看法。&lt;/p&gt;
&lt;h2 id=&quot;自我解析&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] Young Marvel 1.0 小結 --- 需改善消化系統</title>
    <link href="https://blog.marsen.me/2020/09/21/2020/young_marvel_1/"/>
    <id>https://blog.marsen.me/2020/09/21/2020/young_marvel_1/</id>
    <published>2020-09-21T06:51:17.000Z</published>
    <updated>2020-09-21T07:04:29.391Z</updated>
    
    <content type="html"><![CDATA[<p>有些事情一時間我沒辦法說得清楚，<br>總要一些沉澱…  </p><p>這個課程也算是跌跌撞撞的完成了。<br>中間卡了個中共肺炎，又遇上炎熱的夏天，<br>練習室的冷氣顯示好像是我殘餘的血量而不是希望的溫度。  </p><p>消失了兩個教室，但是人都還在，沒事、沒事。<br>肺炎的關係室外的 Social 沒有了，<br>淹水的關係地下室也沒有了，<br>上課 Follower 總是少幾個，但也不是大問題;<br>資深的 Leader 沒有走到最後，其實對我也還好。<br>沒事、沒事…吧。  </p><p>喜歡兩個人的 Solo 再結合的橋段，<br>喜歡聽著音樂即興發揮，雖然我常常是即興發呆，<br>開始會注意到 Routine 之中的 And 拍。<br>試著 6+2 或是 2+6 甚至是 2+4+2 的方式打散固定的東西。  </p><p>但是老實說，我還是覺得沒有進步。<br>總歸一句，吸收與消化能力太差，<br>從生物的例子來說，我缺乏分解肉的酶。<br>花再多時間啃頂級的牛排也得不到養份，<br>小藍莓雖然好消化，但是沒有蛋白質。  </p><p>下個問題是…如何產生酶 ?<br>太大哉問了，好難回答。  </p><p>其它零碎的想法:<br>風城的熱情大過天龍，是因為取之不易，所以珍惜 ?<br>如果斷掉了，黏了幾次還是好不了就放棄了吧 。<br>停損很重要、退場很重要，理財如此、工作如此、生活如此。<br>點頭之交仍然是最好的狀態，再熟一點就會開始莫名奇妙的要求。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有些事情一時間我沒辦法說得清楚，&lt;br&gt;總要一些沉澱…  &lt;/p&gt;
&lt;p&gt;這個課程也算是跌跌撞撞的完成了。&lt;br&gt;中間卡了個中共肺炎，又遇上炎熱的夏天，&lt;br&gt;練習室的冷氣顯示好像是我殘餘的血量而不是希望的溫度。  &lt;/p&gt;
&lt;p&gt;消失了兩個教室，但是人都還在，沒事、沒事。
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] TUTORING APP 多特英 第四屆體驗大使</title>
    <link href="https://blog.marsen.me/2020/09/09/2020/before_try_tutoring_app/"/>
    <id>https://blog.marsen.me/2020/09/09/2020/before_try_tutoring_app/</id>
    <published>2020-09-09T06:53:03.000Z</published>
    <updated>2020-09-10T01:26:55.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>學英文一直以來都是我的硬傷，<br>而且不論是補習、聽歌、看美劇各種方法我都試過，<br>也不能說沒有效，就是無法持續且無法應用在生活上，<br>所以有什機會能夠讓自已更進步我都會想試試看。</p><p>這篇文章可能有點微工商，<br>總之前幾天我滑到這個廣告，  </p><p><a href="https://www.facebook.com/TutoringApp/posts/645426629424215?__cft__[0]=AZWZ8RmP2GoiGK3qd63VguoGdXajn0Xsaj8ZPBzO7H_XUKKw2gpBqpPWDip9Ei_XQA2Ac4AOOmvnp6_XzdYSKZDA_PmSFiQdUzq2UKUbZylDsFQhrCya_gsvDFOWG5dyRZoemH7m0pzswr08rfBYX2dTbfLiWBSpjR4pX-TIPCUj7g&__tn__=%2CO%2CP-R" target="_blank" rel="noopener"><img src="https://i.imgur.com/KaAdrTh.png" alt="看到這個廣告"></a></p><p>我只是一個小小工程師，<br>不是網紅應該沒什麼流量(應該是我在蹭 TUTORING APP 的流量 XD)，<br>竟然也能錄取，真的覺得很開心呢，<br>這也是這篇文章誕生的原因啦。</p><p>同時，這個兩禮拜我剛好特別忙(應該會忙到 10 月初)，<br>工作之外還有表演的排練、教學課程的準備以及一場讀書會的發表。<br>我本來應該拒絕，但是我還是想挑戰看看，<br>首先是 9 堂課其實只有 180 分鐘(9x20)而已，應該不是難到無法克服程度。<br>再來是 TUTORING APP 其實很方便，我想試試是否能隨時找到安靜的角落，<br>就能夠完成一次英文對話(比起上課我更想閒聊啦)。<br>最後是我原本就有打算要寫一篇 Blog 來記錄這件事，<br>那就順水推舟一下，讓這篇文章誕生啦。</p><h2 id="參加-TUTORING-兩週學習挑戰的動機-原因"><a href="#參加-TUTORING-兩週學習挑戰的動機-原因" class="headerlink" title="參加 TUTORING 兩週學習挑戰的動機/原因"></a>參加 TUTORING 兩週學習挑戰的動機/原因</h2><p>在今年初，肺炎還沒有在世界上造成大流行，可以出國趴趴造的一月，<br>就曾經試用過這個 APP，當時我在上面臨時找了一個菲律賓老師，<br>選擇了一個簡單的課程，體驗的時間很短，應該不到一小時，<br>但是給我留下很好的印象，時間超彈性，找到老師到上課大概花不到 1 分鐘。<br>這對我來說很方便。</p><p>APP 的操作也很直覺順手，當時其實有想要再體驗幾次，<br>可惜那時候工作比較忙錄的情況下，<br>一不小心就過期了(還是次數用完 ? 我忘了)  </p><p>其實我比較希望由母語教師來教，但是上了那堂課後的確讓我改觀，<br>TUTORING APP 其實也是有母語教師的，但是好的老師就是好的老師，是不分國籍與母語的。<br>所以可以看一下老師的簡介與評分，也可以聽聽發音，<br>可能我聽多了印度英文(線上程式課)，我反而覺得英國腔有點不習慣XD，<br>但那次上課的菲律賓老師，咬字與發音真的都很好，完全不比母語老師差，人也很有耐心。  </p><p>網路上有很多的英文教材，台灣也有很多英語學習的管道與廣告，<br>為什麼 TUTORING APP 會吸引我呢 ?<br>不是因為他的圖示很可愛，而<strong>是不用留電話</strong>這一點，<br>蠻多英文教學的課程廣告都會要求留電話，<br>為了你留電話，會打折會送測試送體驗，但是<strong>千萬不要留電話</strong>。<br>除非你想要有接不完的銷售電話…<br>一直約課程、約實體見面，甚至催你買課…。<br>而我追求的是時間彈性，空間彈性的上課方式，<br>明明有類似 TUTORING APP 的服務(真人線上英文學習一對一家教)，<br>我就不懂為什麼要留言電話，電訪行銷不是 1980 年代的東西了嗎 ?<br>另外一方面，我會參加一些語言交換的聚會，<br>不過目前程度還是太差，所以聊得很乾(其實我用母語聊天一樣乾…)，<br>有一個教材讓我跟著學習反而是比較輕鬆的方式練習英文口說，當然我也是會繼續參加線下活動。<br>多認識一下外國的朋友:)。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://bit.ly/3dJk4Sr" target="_blank" rel="noopener">TUTORING APP 下載</a></li><li><a href="https://tutoring.pixnet.net/blog/post/3797354" target="_blank" rel="noopener">價格介紹文章</a></li><li><a href="https://tutoring.pixnet.net/blog/post/12459416" target="_blank" rel="noopener">TUTORING客服</a></li><li><a href="https://tutoring.pixnet.net/blog/post/7117913-app%e4%bd%bf%e7%94%a8%e4%bb%8b%e7%b4%b9%ef%bd%9c%e5%a6%82%e4%bd%95%e7%8d%b2%e5%be%97%e5%85%8d%e8%b2%bb%e6%b0%b4%e5%b9%b3%e6%b8%ac%e8%a9%a6%e5%88%b8%ef%bc%9f%ef%bd%9ctut" target="_blank" rel="noopener">獲得免費水平測試</a></li><li><a href="https://tutoring.pixnet.net/blog/category/270020" target="_blank" rel="noopener">使用FAQ</a></li><li><a href="https://tutoring.pixnet.net/blog/category/219587" target="_blank" rel="noopener">用戶反饋</a></li><li><a href="https://tutoring.pixnet.net/blog/category/214517" target="_blank" rel="noopener">外師推薦</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;學英文一直以來都是我的硬傷，&lt;br&gt;而且不論是補習、聽歌、看美劇各種方法我都試過，&lt;br&gt;也不能說沒有效，就是無法持續且無法
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[翻譯]每個 Sprint 都需要 Retrospective Meeting 嗎 ？</title>
    <link href="https://blog.marsen.me/2020/09/07/2020/does_a_scrum_team_need_a_retrospective_every_sprint/"/>
    <id>https://blog.marsen.me/2020/09/07/2020/does_a_scrum_team_need_a_retrospective_every_sprint/</id>
    <published>2020-09-07T09:43:03.000Z</published>
    <updated>2020-09-07T09:49:51.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="擷錄翻譯"><a href="#擷錄翻譯" class="headerlink" title="擷錄翻譯"></a>擷錄翻譯</h2><h3 id="常見的問題"><a href="#常見的問題" class="headerlink" title="常見的問題"></a>常見的問題</h3><ul><li>我們的團隊很棒，我們沒有需要改進的項目…</li><li>回顧會議很無聊，所以…</li><li>我們實際的工作太忙了(或回顧會議太花時間了)…</li><li>我就不喜歡回顧…  </li></ul><h3 id="你永遠不夠好到太好"><a href="#你永遠不夠好到太好" class="headerlink" title="你永遠不夠好到太好"></a>你永遠不夠好到太好</h3><blockquote><p>作者舉自已經驗 10 年的團隊，每 2 周的回顧仍有許多改善的地方。</p></blockquote><p>實際上你永遠不會好到太好，即便你已經是市場上最好的團隊。<br>在 VUCA 的世界一切都在變，就像一句老話說的「逆水行舟，不進則退」<br>看看世上最好的職業球隊，三連冠很棒，但是你試過四連冠、五連冠嗎?<br>再談談軟體的熵，為了滿足各種需求，你開始切前後端、開始用微服務<br>容器化技術、DevOps 到 SRE …<br>只會變得更細緻、更專業、更多的溝通…</p><p>所以真正的問題或許是，<strong>為什麼你覺得你不能更好了呢 ?</strong></p><h3 id="回顧會議很無聊"><a href="#回顧會議很無聊" class="headerlink" title="回顧會議很無聊"></a>回顧會議很無聊</h3><blockquote><p>作者提供了幾個方法讓回顧會議回覆活力</p><ol><li>由別的團隊的 Scrum Master 來帶領你的團隊的回顧會議</li><li>改變場地</li><li>使用不同風格進行<br>推薦書單 <a href="https://www.amazon.com/Improving-Agile-Retrospectives-Efficient-Addison-Wesley/dp/0134678346" target="_blank" rel="noopener">Improving Agile Retrospectives</a></li></ol></blockquote><p>尋求社群的建議，我個人再推薦一個網站 <a href="https://www.funretrospectives.com/" target="_blank" rel="noopener">FunRetrospectives</a>…<br>回顧會議很無聊對 Scrum Master 應該是個警鐘，<br>但是醫生也會生病，請勇敢的尋求協助，而不是僵化的照本宣科，  </p><p><em>No one said a retrospective should be as exciting as the latest Hollywood blockbuster.But there are things you can to do to liven them up.</em></p><h3 id="Too-Busy-To-Improve"><a href="#Too-Busy-To-Improve" class="headerlink" title="Too Busy To Improve"></a>Too Busy To Improve</h3><p><img src="https://i.imgur.com/VkHvIDP.png" alt="too busy to improve"></p><blockquote><p>作者僅說明這樣是一個短視的團隊，<br>同時引用《高效率人士的七個習慣》書中的故事<br>短視近利的樵夫永遠不會打磨他的斧頭。</p></blockquote><p>請注意「短視」的文化根歸何處 ?<br>這是一個複雜的問題，需要細心的觀察。<br>是團隊嗎 ? 或是 PO ? 也有可能是老闆或是客戶。<br>需要用系統思考的方式找到癥結點。<br>然後 — Change Your Company !</p><h3 id="我就是不喜歡回顧"><a href="#我就是不喜歡回顧" class="headerlink" title="我就是不喜歡回顧"></a>我就是不喜歡回顧</h3><blockquote><p>這個可能回顧會議變得無聊的變形<br>但作者將兩者分別出來的原因是，有的人就只是單純不喜歡而已<br>這些人只想作他們想作的部份…</p></blockquote><p>作者例子基本上是團隊的害蟲了，<br>實務上我認為更多是人的價值觀不同，<br>在一般的開發人員或是 Team Member 身上或許還好解決，<br>透過溝通，排除他的困難。<br>個人經驗上比較麻煩的反而是中階主管，<br>比如說 : Team Leader 身兼 Team Member，<br>但是每次都翹掉回顧會議，說「我有其它會議、我很忙、我很特別…」  </p><p>我的想法是將他的角色提昇到 StackHolder，如果他的權限會影響開發，<br>鼓勵他下放，讓 Team Members 具備獨力開發的能力。<br>讓他去作特別的事，反之如果他回頭想參與開發，<br>那應該與其它 Team Members 一樣全程參與會議。</p><p>黑暗兵法:在回顧會議取回他會影響開發的權限。喔，你當然可以選擇一場他不在的場次 :)</p><p>最後作者仍然補上可以減少回顧的可能性，</p><blockquote><p>當你的團隊真得很棒，<br>或是為了讓回顧不無聊而付出巨大的努力，<br>或是你的團隊其實不太忙，甚至不太需要什麼改善計劃(可能要改善需求端)<br>能理解工作與喜歡作的項目的價值<br><strong>團隊在一個極短的 sprint之中</strong><br>可以減少團隊的回顧會議</p><p>If your team:</p><p>Is really good.<br>Has made significant efforts to make sure retrospectives aren’t boring.<br>Is not too busy to invest in improvements that don’t pay them back  immediately.<br>And understands the value of doing other than just the most pleasant work.</p><p>… and if they work in short sprints, I’ll say it’s OK for the team do retrospectives less frequently.</p></blockquote><p>但是並不建議，僅僅為了這個理由改變 Sprint 的長度，<br>而 Scrum Master 應該悍衛每個 Sprint 應執行的回顧會議，<br>但也可以適當調整為每兩個 Sprint 一次。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.mountaingoatsoftware.com/blog/does-a-scrum-team-need-a-retrospective-every-sprint" target="_blank" rel="noopener">Does a Scrum Team Need aRetrospective Every Sprint?</a></li><li><a href="https://www.funretrospectives.com/" target="_blank" rel="noopener">FunRetrospectives</a></li><li><a href="https://www.betteruserstories.com/courses/better-user-stories/videos?video_id=1" target="_blank" rel="noopener">https://www.betteruserstories.com/courses/better-user-stories/videos?video_id=1</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;擷錄翻譯&quot;&gt;&lt;a href=&quot;#擷錄翻譯&quot; class=&quot;headerlink&quot; title=&quot;擷錄翻譯&quot;&gt;&lt;/a&gt;擷錄翻譯&lt;/h2&gt;&lt;h3 id=&quot;常見的問題&quot;&gt;&lt;a href=&quot;#常見的問題&quot; class=&quot;headerlink&quot; title=&quot;常見的問題&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[N社筆記] 沒有後端不行嗎？</title>
    <link href="https://blog.marsen.me/2020/08/29/2020/coupon_on_f2e/"/>
    <id>https://blog.marsen.me/2020/08/29/2020/coupon_on_f2e/</id>
    <published>2020-08-29T05:03:47.000Z</published>
    <updated>2020-09-03T06:59:29.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>我在今年３月已經離開 N 社了，<br>不過這幾天在社群與朋友蠻多人在討論一個來自<a href="https://kaobei.engineer/cards/show/5087?fbclid=IwAR0QxJCSvn_ULFo_gwqQmORL5y8UX22LBdf5neAXikALWfjo7DGA91Ohlw0" target="_blank" rel="noopener">靠北工程師</a>的話題，<br>我看了一下後，有些自已的想法，稍微記錄一下。</p><p>另外延伸討論另一個最近炎上的話題，<br>前端不用寫程式 !? 出道(?)為<del>全端</del>網站工程師的我，談談我的看法。</p><h2 id="事件-靠北工程師-把序號寫在JS裡面"><a href="#事件-靠北工程師-把序號寫在JS裡面" class="headerlink" title="事件 靠北工程師-把序號寫在JS裡面"></a>事件 靠北工程師-把序號寫在JS裡面</h2><p><a href="https://www.facebook.com/init.kobeengineer/photos/a.1416496745064002/3246423438737981" target="_blank" rel="noopener">靠北文章聯結</a><br>簡單的說，這是一個抽獎的功能，可以抽最高 550 元的折價券，<br>然後所有的實現都在前端，facebook 留言的回覆蠻有趣，<br>已經有人寫<a href="https://medium.com/@kurosean/%E9%96%8B%E7%AE%B191app%E7%98%8B%E5%9E%8B%E8%BD%89%E8%BD%89%E6%A8%82-7e74d402e708" target="_blank" rel="noopener">相關文章</a>，有興趣可以看看始末。</p><p>回覆的留言大多分為幾種，</p><ol><li>(只?)有註解很棒</li><li>序號、次數等不應該寫在前端</li><li>資料筆數很多，應該怎麼處理等等…<br>另外有一些來自 N 社的員工(?)留言這是行銷部門替 T 廠找的外包，<br>所以不代表 N 社的工程單位會寫出這樣的代碼。  </li></ol><blockquote><p>20200902 補充:<br>可靠消息指出「那包code 不只是外包而已，是給一包範本<br>叫廠商自己改完，然後放到某位置去做活動」</p><p>以上需求為前提，陣列的處理也可以理解了，<br>整份代碼也是相同適合廠商修改，雖然不知道改得人會是工讀生還是總經理。<br>總之這樣的需求下，這份代碼我覺得是合格的。<br>反思 : If I Had Only One Hour To Save The World I Would Spend 55 Minutes Defining The Problem And 5 Minutes Finding The Solution.</p></blockquote><h3 id="反思-靠北工程師"><a href="#反思-靠北工程師" class="headerlink" title="反思 靠北工程師"></a>反思 靠北工程師</h3><p>這邊說說我的看法，<br>現在的我已經離開前端開發一陣子了，<br>但是我覺得這份代碼(只論抽獎 js 的部份)是簡單好懂的，<br>反而釣出有人作免費的 Code Review ，很多建議也算是不錯。<br>但這是公司文化層面上的一個問題，<br>有沒有遇過「前輩」堅持某種(好壞不論)寫法呢 ?  </p><p>撇除 Style 與 Code smell，這段代碼我覺得已經用最簡單的方式達到目的了。<br>抽獎與增券，稍微操作一樣可以理解了，抽獎完後，你可以拿到一個折價券號。<br>然後…這些資訊都在 js 代碼之中。<br>稍微有一點概念的話，你可以直接拿到 550 元的折價券的序號，  </p><p><strong>然後呢 ?</strong></p><p>如果你去消費的話，T 廠與 N 社行銷的目的就達成了… 。<br>而合理推測， 550 元已經在原本的計劃成本之中，而越多人買好像反而是個多贏的結局。</p><ol><li>行銷目的達成</li><li>廠商銷售成功</li><li>節少內部開發效能</li></ol><p>那另一方面，這樣的代碼出去會有什麼壞處 ?</p><ol><li>讓人覺得 N 社技術不專業 ?</li><li>轉移行銷焦點，從折扣碼到程式碼 XD</li></ol><p>有辦法改善嗎 ? 首先，我認為行銷找外包技術單位實作，是一個合理且正確的行為。<br>技術人員在各個公司仍是稀缺資源，所以流程上通常會被加上層層保護，<br>而行銷兵貴神速，用找傭兵的方式， 迅速達成客戶的需求將是必然的選擇。</p><p>再談談外包，雖然不知道收的價金多少，最主要的功能他們是實現了，<br>那有沒有辦法再好一點呢 ? 對我來說，這樣是有點傷害到 N 社開發部門的形象，<br>比如先簡單的 uglify 與 minify，<br>再進一步用一些 serverless 的作法將折扣碼隱藏起來 ?<br>或是真的起一個小小 api 服務來作這層的運算 ?<br>以我來說，頂多就多作 uglify 與 minify 就足夠了吧。<br>這也是取捨，倒是沒有什麼對錯。</p><h3 id="如何信賴專業"><a href="#如何信賴專業" class="headerlink" title="如何信賴專業"></a>如何信賴專業</h3><p>再來我想討論行銷人員<em>因為缺乏專業，所以尋求外包。但是沒有專業的他們，如何進行驗收?</em><br><del>本想舉年初館長 300 萬網站的話題，但是館長的事另有後續，故不在本篇詳述了。</del><br>舉蓋房子為例，雖然房子蓋好了，也能住人。但是風一吹就倒，或是海砂屋，你能接受嗎？<br>目前業界主要幾種解法：</p><ul><li><p>合約法：</p><blockquote><p>透過合約的法律強制力來要求甲乙方，但是在文字表述上與理解上都有太多的模糊空間，<br>最後合約會變成一本厚厚的法律全書，好像什麼都有又好像什麼都沒有。<br>專案的運作，最後仍然回歸於人;當專案有所爭議之時，怎麼解讀合約反而會取代產品本身成為焦點。</p></blockquote></li><li><p>靠關係法:</p></li></ul><blockquote><p>找信任的人作為代理人來處理，但是這樣的方式只是轉價問題，代理人缺乏專業也不少見，<br>層層溝通反而更沒效率，更常見到上線即掛點的慘案</p></blockquote><ul><li>第三方認證:</li></ul><blockquote><p>這個方法，是透過機構的認証來証明這個人具備某種能力。<br>對單一的技能是很好的門檻設定，畢業証書或是駕照都是類似的套路。<br>但是軟體開發真的只是「單一技能」嗎 ? 而你對第三方機構的信任，是不是會犯了「靠關係法」同樣的錯呢 ?<br>証照的產業，現在也有另一個困境，<br>比如說「學店」或是「雞腿換駕照」的情況不勝玫舉，這裡我不再深入討論了…<br>舉個例子來說，n 小時學會 xxx 與 1x 天學會 ooo 真的好嗎 ?  </p></blockquote><p>最後，這件事其實對一間軟體公司的專業形象是有損的，<br>我就用 <a href="https://www.facebook.com/91apptech/posts/164919178538886" target="_blank" rel="noopener">N 社的回應</a> 作為小結。<br>雖然我不知道為什麼不同步回覆到原始文章的底下，可能是公關想冷處理(之前 PTT 或其它事件也都無聲無息)<br>整個事件有很多反思的點，也有所取捨，這就是人生吧(茶)。</p><h2 id="事件二、前端不用寫程式"><a href="#事件二、前端不用寫程式" class="headerlink" title="事件二、前端不用寫程式"></a>事件二、前端不用寫程式</h2><p>另外這個事件也引起許多討論，因為我不想幫別人賣課，所以就不貼上啦。<br>可以 google 看看「 前端不用寫程式」加「15天」，應該會有意外的驚喜。<br>批判的話我就不說了，不過參考上面的事件，是不是再次說明了第三方任証機構的問題 ?<br>這種廉價的認証或是「學園」 ，他們的公信力真的可以相信嗎 ?  </p><p>這裡我想談的是，<a href="https://medium.com/marketingdatascience/%E7%B2%BE%E6%BA%96%E8%A1%8C%E9%8A%B7%E7%9A%84%E8%90%BD%E5%AF%A6-%E8%A1%8C%E9%8A%B7%E6%BC%8F%E6%96%97-304c1d1e8197" target="_blank" rel="noopener">marketing funnel(行銷漏斗)</a> 。<br>當行銷在推廣一件事情的時候，會盡可能的把餅作大，<br>但是有時候會將一些事情去脈絡化或簡化，這樣的好處是可以減少門檻讓新手玩家快速進入，<br>缺點是很有可能會誤導學員，有些觀念會被錯置。<br>而學生如果再深入一點，肯定會遇到問題。<br>對我來說，這反而是一個過濾器(filter)，進一步將專業分類，<br>學生必須學會分辨，這是成為專業的第一步。<br>有的人只是想要體驗，有的人想學以致用，有人想深入學習…。</p><p>以程式來說，先入門程式大概是什麼概念，而目前主流市場大概會用到什麼技術 ?<br>整個軟體開發的系統為何? 前端、後端、DBA、DevOps…<br>你感興趣的是哪一段 ? 你擅長的又是哪一段 ?<br>往廣度延伸或是往深度延伸，或是擴及整個產業，<br>而我的看法是當這個產業，越多人參與且越多人討論的時候，才會越健全。</p><h3 id="後續補充"><a href="#後續補充" class="headerlink" title="後續補充"></a>後續補充</h3><p><a href="https://www.youtube.com/embed/B5alI7bYwHw" target="_blank" rel="noopener">CSScoke 的 Amos</a> 的直播直接拉事主出來討論<del>謝罪</del>了，<br>有這樣的討論是很好的，也可以看出來，軟體的教學方式與系統還有很多嚐試與調整的空間，<br>看看<a href="https://www.youtube.com/watch?v=wqB8w1osofY" target="_blank" rel="noopener">網頁 15 天 Taker(道歉與回應)</a><br>寫程式這行仍在茁壯擴展之中，並且深入百業之中，但人學習的速度確漸漸的跟不上了。<br>舊有的學校系統跟不太上了，所以才產生了補教業的市場，而其中當然有良莠不齊的現象，<br>當然市場成熟後，市場機制本身就可以作一些汰除，<br>也或許這些講師也正在學習當中，我們可以繼續 <del>Diss</del> 督促，讓整個產業逐漸更加成熟。</p><p>順便評論一下兩方的公關處理方式，冷處理或直面道歉似乎效果都不錯，<br>不過我比較欣賞後者就是了。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;我在今年３月已經離開 N 社了，&lt;br&gt;不過這幾天在社群與朋友蠻多人在討論一個來自&lt;a href=&quot;https://kaob
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 大話設計模式 --- 橋接模式(Bridge Pattern)</title>
    <link href="https://blog.marsen.me/2020/08/12/2020/book/talk_DP_bridge_pattern/"/>
    <id>https://blog.marsen.me/2020/08/12/2020/book/talk_DP_bridge_pattern/</id>
    <published>2020-08-12T00:22:18.000Z</published>
    <updated>2020-08-31T01:05:45.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>因緣繼會下參加了一個線上讀書會，<br>讀的是一本老書，<a href="https://www.tenlong.com.tw/products/9789866761799" target="_blank" rel="noopener">「大話設計模式」</a>，<br>簡體書應該是 2007 年出版，但是國內有繁體書，<br>我是在 2010 年左右入手這本書的，號稱簡單易懂，<br>當時翻了幾遍，但是對 Design Pattern 與 OOP 並沒有很深刻的認知。</p><p>如果對 OOP 沒有什概念的人，這本書的附錄也有簡單的介紹。<br>算是適合當作入門的書。</p><p>在實務上，卻很少看到同事在用 Design Pattern 在解決問題，<br>更多是前人怎麼作，我就怎麼作。<br>一直到我學習了 TDD 與重構，<br>我才漸漸了解 Design Pattern 是怎麼一回事，<br>書中小菜有幸遇到大鳥而我沒有，只能更多努力了。  </p><h2 id="本書小得"><a href="#本書小得" class="headerlink" title="本書小得"></a>本書小得</h2><p>這篇 blog 主要是寫書中的第 22 章–橋接模式，<br>但是我想提一下心得，也許之後會寫別的章節，也許不會，<br>但心得就先收錄在這裡了。  </p><p>首先是這本書面向的讀者應該是小菜，<br>同時是書中的主角，對物件導向與設計模式不熟悉的人，<br>所以書中用了很多現實生活中的例子來舉例，<br>當然我們可以將現實投影到程式當中，但我實際上的感受還是有差異的。<br>比起生活實例，我現在可能更希望是代碼實例吧。</p><p>第二點，書中的背景是 2007 年，所以時空背景已經不太相同了，<br>以本章(22章，橋接模式)為例，書中提到的手機遊戲跨平台問題，<br>在 2020 年已經不存在了，現在的智慧型手機與書中的「掌上電腦」功能描述差不多了。  </p><p>第三點，網路上有簡體版的書在流通，但是用語與正體中文有所差異。  </p><p>想讀這本書的人參考一下上述幾點，<br>或許結合一些其它的書籍或是網路資源，<br>對你來說可以對設計模式有更好的理解。  </p><h2 id="橋接模式"><a href="#橋接模式" class="headerlink" title="橋接模式"></a>橋接模式</h2><p>我猜想命名的原因是來自完成後的類別圖看起來的樣子，<br>在本書中舉了手機品牌(Brand)與手機軟體(Soft)的關係作為例子，<br>你可以以 <code>Brand</code> 作為分類，也可以用 <code>Soft</code> 作為分類，<br>但最後都會長出三層繼承的類別圖，<br>然後其中都會包含奇怪的職責; <code>Soft</code> 包含 <code>Brand</code> 的資訊(或是 <code>Brand</code> 包含 <code>Soft</code> 的資訊)。</p><p>而真正的問題是，難以擴充，每當我們需要一個新的 <code>Soft</code> 或是 <code>Brand</code>，<br>我就需要為所有的 <code>Brand</code> 或 <code>Soft</code> 新增一整組的類別。<br>而這問題背後的原因就是過度繼承。</p><p>書中的例子，有一處我覺得不佳的地方，<br>在使用橋接模式前，主邏輯如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"Run N Brand Game"</span>);</span><br></pre></td></tr></table></figure><p>使用橋接模式後的代碼如下，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"Run Game"</span>);</span><br></pre></td></tr></table></figure><p>作者可能想強調其橋接的觀念，而不討論橋接的兩端實際有資訊互通的需求，<br>但是我認為這是不正確的，我們不應該套用了某種 Design Pattern 而改變其原始行為。  </p><p>接下來我會以下面這張圖，Demo 一下怎麼重構到橋接模式  </p><p><img src="/images/2020/8/talk_DP_bridge_pattern_01.jpg" alt="手機品牌"></p><p>首先，先寫測試，由於我視作這個結構是遺留代碼的產物，<br>所以我不認為他會有完整的單元測試，當然如果有的話就要考慮這些測試是否仍然適用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handsetNokiaAddressBook = <span class="keyword">new</span> HandsetNokiaAddressBook();</span><br><span class="line">handsetNokiaAddressBook.Run();</span><br><span class="line"><span class="keyword">var</span> handsetNokiaGame = <span class="keyword">new</span> HandsetNokiaGame();</span><br><span class="line">handsetNokiaGame.Run();</span><br><span class="line"><span class="keyword">var</span> handsetMotorolaAddressBook = <span class="keyword">new</span> HandsetMotorolaAddressBook();</span><br><span class="line">  handsetMotorolaAddressBook.Run();</span><br><span class="line"><span class="keyword">var</span> handsetMotorolaGame = <span class="keyword">new</span> HandsetMotorolaGame();</span><br><span class="line">handsetMotorolaGame.Run();</span><br></pre></td></tr></table></figure><p>我寫了一些 End To End 測試列舉出所有的情境。</p><blockquote><p>延申問題</p><ol><li>目前只是 2 x 2，所以要寫 E2E 測試似乎不難，如果是 3 x 3 或更多呢 ? 你會怎麼作 ?</li><li>這裡隱含著一件事，當你看到你的繼承鏈與商業邏輯的交互，<br>已經開始出現 2 x 2 的現象時，是一個明示你應該重構它了。</li></ol></blockquote><p>下一步，我可以很明顯的發現中間層的類別，其實一點意義也沒有</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>所以我們要將繼承鏈中最葉端(leaf node)的類別繼承關係移除，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandsetNBrandGame</span> : <span class="title">HandsetNBrand</span></span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandsetNBrandGame</span></span><br></pre></td></tr></table></figure><p>當然我不認為實務上有這麼簡單能移除一個繼承關係，<br>所以要達到這一步之前，我們也許要先創造無意義的中間層。<br>因為這步是對葉端類別的處理，所以我喜歡稱它為「修剪枝葉節點」。</p><p>下一步，當我把所有葉端的類別剪除後，我會先作分類，<br>實務上我會更傾向在腦海中作好分類再剪除，然後一個分類一個分類重構。<br>比如說 Game 類別:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Game</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">string</span> brand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Run <span class="subst">&#123;brand&#125;</span> Game"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到我已經將 brand 抽出來作為方法變數，<br>作為過渡時期多載(overloading)或許是個手段<br>此外，可以看到我透過參數傳遞來解除相依，<br>這個手段甚至可以套用在 delegate 或是複雜型別。</p></blockquote><p>同樣的步驟再作一次，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressBook</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">string</span> brand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Run <span class="subst">&#123;brand&#125;</span> Address Book"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們可以明顯發現重複的項目可以抽出介面，<br>實務不需要特別介意是 <code>interface</code> 或 <code>abstract class</code>，<br>依最小改動為原則，選擇適當的手段進行即可。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">string</span> brand</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddressBook</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">string</span> brand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Run <span class="subst">&#123;brand&#125;</span> Address Book"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Game</span> : <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"><span class="keyword">string</span> brand</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Run <span class="subst">&#123;brand&#125;</span> Game"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候我們必須將 <code>brand</code> 傳入，  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandsetNBrand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> HandsetSoft Soft;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> Brand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandsetNBrand</span>(<span class="params">HandsetSoft soft</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Soft = soft;</span><br><span class="line">        Brand = <span class="string">"NBrand"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Soft.Run(Brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Client 端就可以組合起來使用。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> game = <span class="keyword">new</span> HandsetNokia(<span class="keyword">new</span> HandsetGame());</span><br><span class="line">game.Run();</span><br></pre></td></tr></table></figure><p>同樣的手法作在 <code>HandsetMBrand</code> 之中</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandsetMBrand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> HandsetSoft Soft;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> Brand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandsetMBrand</span>(<span class="params">HandsetSoft soft</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Soft = soft;</span><br><span class="line">        Brand = <span class="string">"MBrand"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Soft.Run(Brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候可以發現重複，重構後如下。<br>除了各自的品牌資訊，大多可以共用的方法與欄位，<br>我們就抽到父類別。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HandsetBrand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Application _app;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">string</span> Brand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HandsetBrand</span>(<span class="params">Application app</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _app = app;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._app.Run(Brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">HandsetNBrand</span> : <span class="title">HandsetBrand</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HandsetNBrand</span>(<span class="params">Application app</span>):<span class="title">base</span>(<span class="params">app</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">      Brand = <span class="string">"NBrand"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">HandsetMBrand</span> : <span class="title">HandsetBrand</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HandsetMBrand</span>(<span class="params">Application app</span>):<span class="title">base</span>(<span class="params">app</span>)</span></span><br><span class="line"><span class="function"></span>  &#123;</span><br><span class="line">      Brand = <span class="string">"MBrand"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/2020/8/talk_DP_bridge_pattern_02.jpg" alt="完成"></p><h2 id="Recap"><a href="#Recap" class="headerlink" title="Recap"></a>Recap</h2><ol><li>修剪枝葉，</li><li>製造重複，重構並產出 <code>Implementor</code></li><li>如果橋接的兩端有需要傳遞的資訊，考慮使用方法參數</li><li><code>Abstraction</code> 抽象呼叫 <code>Implementor</code> 來建立橋接<br><img src="/images/2020/8/talk_DP_bridge_pattern_03.jpg" alt="Bridge"></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://refactoring.guru/design-patterns/bridge" target="_blank" rel="noopener">https://refactoring.guru/design-patterns/bridge</a></li><li><a href="https://sourcemaking.com/design_patterns/bridge" target="_blank" rel="noopener">https://sourcemaking.com/design_patterns/bridge</a></li><li><a href="https://simpleprogrammer.com/design-patterns-simplified-the-bridge-pattern/" target="_blank" rel="noopener">https://simpleprogrammer.com/design-patterns-simplified-the-bridge-pattern/</a></li><li><a href="https://www.tenlong.com.tw/products/9789867794529" target="_blank" rel="noopener">深入淺出 Design Pattern</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;因緣繼會下參加了一個線上讀書會，&lt;br&gt;讀的是一本老書，&lt;a href=&quot;https://www.tenlong.com.t
      
    
    </summary>
    
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
      <category term="OOP" scheme="https://blog.marsen.me/tags/OOP/"/>
    
      <category term="Design Pattern" scheme="https://blog.marsen.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 物件導向的心得與隨筆 </title>
    <link href="https://blog.marsen.me/2020/07/27/2020/oop_experience/"/>
    <id>https://blog.marsen.me/2020/07/27/2020/oop_experience/</id>
    <published>2020-07-27T08:42:16.000Z</published>
    <updated>2020-07-27T08:52:14.221Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Object 泛指所有的物件，Instance 是明確指透過 Class 創建的 Object</p><ul><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/anonymous-types" target="_blank" rel="noopener">Anonymous Types C#</a></li><li>Java ?</li></ul></li><li><p>Class 是 Object 的藍圖/設計書 ( Class 是 Object 的抽象 )  </p><ul><li>Object 是 Class 的具像化</li><li>通常透過 new Class</li><li>一種常見的應用是 Object 裡面只有欄位，用來作為資料的載體</li><li>另一種常見的應用是 Object 包含可執行的 Function</li><li>Static 另作討論</li></ul></li><li><p>Abstract Class 是 Class 的藍圖/設計書 ( Abstract Class 是 Class 的抽象 )</p><ul><li>Class 是 Abstract Class 具像化<ul><li>通常透過繼承方式</li></ul></li><li>Abstract Class 會定義共用的欄位與方法給它的子類別<ul><li>當某一個方法，實作細節必須由子類別處理時，會宣告成抽象方法 abstract method</li><li>子類別繼承後必須實作 abstract method</li><li>Abstract 無法直接具像成 Object</li></ul></li></ul></li><li><p>Interface 是 Method 的藍圖/設計 ( Interface 是 Method 的抽象 )</p><ul><li>Method 是 Interface 的具像化<ul><li>但是 Method 必須生存在 instance 上</li><li>所以不會是 Static Object</li><li>所以 Interface 必須與 Class 共存，才能在 instance 上實現</li></ul></li></ul></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Object 泛指所有的物件，Instance 是明確指透過 Class 創建的 Object&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming
      
    
    </summary>
    
    
    
      <category term="OOP" scheme="https://blog.marsen.me/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Tennis KATA 與 State Pattern </title>
    <link href="https://blog.marsen.me/2020/07/21/2020/tennis_kata_to_state_pattern/"/>
    <id>https://blog.marsen.me/2020/07/21/2020/tennis_kata_to_state_pattern/</id>
    <published>2020-07-21T00:16:27.000Z</published>
    <updated>2020-08-31T01:05:45.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>Tennis Kata 是我最常練習的一個題目，<br>就我個人而言，這個題目源起 91 大的極速開發，<br>目前最快只有在 17 分左右，使用 Rider with Mac 的話可能還會再慢一些。<br>我很熟悉，所以很少作需求分析，Test Case 也大多有即定的寫法。<br>手動得很快，腦卻不怎麼動了，明明這是一個相當經典的題目，<br>不過我卻被定錨了。</p><p>今年 5 月上了「測試驅動開發與持續重構」，<br>第一天 91 大也有透過 Tennis Kata 展示了一下火力，<br>那個時候又有提到可以使用 State Pattern 來實作，<br>最近工作上又恰巧有使用到 State Pattern。<br>於是我便決定要試著用 State Pattern 來進行 Tennis Kata 。  </p><p>有兩種方法，一種是無到有的 Kata，<br>一種是將現有 Tennis Production Code，<br>透過重構轉換成 State Pattern，<br>這次我選擇從無到有。</p><h2 id="第一次失敗"><a href="#第一次失敗" class="headerlink" title="第一次失敗"></a>第一次失敗</h2><p>總歸來說，需求分析作得不夠徹底，<br>Test Case 設計不良，所以很難自然而然的讓 State 產生</p><p><img src="/images/2020/7/tennis_kata_to_state_pattern_00.jpg" alt="第一次失敗"></p><p>上圖是我第一次畫的 State ，<br>現在回過頭來想想，圖型上其實可以很明顯看出重複的壞味道。<br>但是我當下完全沒有「覺察」，明明是想要消除 if else，<br>卻在 State 裡面產生了大量的 if else。  </p><h2 id="第二次不成功"><a href="#第二次不成功" class="headerlink" title="第二次不成功"></a>第二次不成功</h2><p>總而言之是作完了，但是不是很順暢。<br><img src="/images/2020/7/tennis_kata_to_state_pattern_01.jpg" alt="第二次不成功"></p><p>如上圖，我蠻粗暴的將所有比分轉換成可能的 State，<br>一樣我沒有注意到重複，但是比較起第一次的失敗，<br>這次的狀態機是將所有可能的狀態攤平，<br>這樣作是為了符合 Tennis 的規則。</p><h3 id="Test-Cases"><a href="#Test-Cases" class="headerlink" title="Test Cases"></a>Test Cases</h3><ul><li>LoveAll<ul><li>產生 Context 類別與 Score 方法</li><li>產生 LoveAll State</li><li>產生 IState 介面，包含 Score方法，讓 LoveAllState 實作 IState 介面</li></ul></li><li>FifteenLove<ul><li>產生 ServerScore 方法</li><li>產生 FifteenLove State</li><li>產生 SetContext 方法</li><li>產生 ChangeState 方法</li><li>轉換 IState 介面成為 State 抽象類別</li></ul></li><li>LoveFifteen<ul><li>產生 ReceiverScore 方法</li><li>產生 LoveFifteen State</li></ul></li><li>LoveThirty<ul><li>產生 LoveThirty State</li></ul></li><li>LoveForty<ul><li>產生 LoveForty State</li></ul></li><li>FifteenAll<ul><li>產生 FifteenAll State<br>略…</li></ul></li><li><strong>覺察重複，重構</strong><ul><li>產生 NormalState</li><li>產生 ServerPoint  </li><li>產生 ReceiverPoint  </li><li>使用 Dictionary 消除 if else</li><li>產生 SameState</li></ul></li><li>Deuce<ul><li>產生 DeuceState<br>以下略…</li></ul></li></ul><p><img src="/images/2020/7/tennis_kata_to_state_pattern_02.jpg" alt="Final State"></p><p>最後的狀態會如上圖，當大量的 State 產生之時，心裡真的有點慌慌的，<br>這次的 TDD 仍然不算順暢成功，設計階段就可以在腦中模擬的問題，<br>我拖到了開發階段，雖然後來收斂成 <code>NormalState</code> 時頗有一回事，<br>但如果在實務上，這段不確定且發散的時間仍然是太長。</p><h2 id="第三次成功，仍然不足夠"><a href="#第三次成功，仍然不足夠" class="headerlink" title="第三次成功，仍然不足夠"></a>第三次成功，仍然不足夠</h2><p>參考第二次所作的 State Diagram。<br>可以看到缺少了 Normal to Normal 的線條。<br>第三次將它補上了。<br><img src="/images/2020/7/tennis_kata_to_state_pattern_03.jpg" alt="Final State"></p><table><thead><tr><th>States</th><th>Sample</th><th>Next States</th></tr></thead><tbody><tr><td>Same</td><td>0-0,1-1,2-2</td><td>Normal</td></tr><tr><td>Normal</td><td>0-1,0-2,1-2,1-3</td><td>Same、Normal、Deuce、Win</td></tr><tr><td>Deuce</td><td>3-3,4-4,5-5</td><td>Advantage</td></tr><tr><td>Advantage</td><td>3-4,5-6</td><td>Deuce、Win</td></tr><tr><td>Win</td><td>5-3,5-7</td><td></td></tr></tbody></table><p>參考上表製作測試案例，<br>這裡我想強調的是狀態改變的動線，<br>狀態由 <code>SameState</code> 開始。</p><p>簡單筆記一下測試與重構的幾個亮點<br>完整的 commit 可以從 <a href="https://github.com/marsen/Marsen.NetCore.Dojo/commits/Kata/TennisWithStatePattern2?before=af1303f38d61abc0dba0a965e5dfadf55bc08ccd+105" target="_blank" rel="noopener">d792b2e</a>開始看</p><h3 id="Highlight-Test-Cases"><a href="#Highlight-Test-Cases" class="headerlink" title="Highlight Test Cases"></a>Highlight Test Cases</h3><p>測試的案例的設計會依 State Diagram 的箭頭來設計，<br>也就是狀態的改變，<strong>初始狀態為 <code>SameState</code> 比分為 0 - 0</strong> ，<br>並將 Design Pattern 作為指引重構出 <code>SameState</code> 。</p><p><strong>第二個測試案例</strong>也很簡單，<br>因為 <code>SameState</code> 只會往 <code>NormalState</code> 移動，<br>所以只要使用 1 - 0 或是 0 - 1 這個案例，我就可以建立出 <code>NormalState</code> 類別。<br>並且可以觀察到兩個 State 的共通性，這個時候就會重構出 <code>IState</code> 介面。</p><p>一樣看圖開發，<br><code>NormalState</code> 是最為複雜的一個狀態，他的狀態可能為  </p><ul><li>保持原樣 : <code>NormalState</code></li><li>退回平手 : <code>SameState</code></li><li>進入決勝 : <code>DeuceState</code></li><li>直接獲勝 : <code>WinState</code></li></ul><p>而剩下的狀態都算是相當簡單，<br><code>WinState</code> 的狀態不會再改變，<br><code>DeuceState</code> 只會往 <code>AdvState</code> 狀態前進，<br><code>AdvState</code> 是相對複雜的狀態，可能變成 <code>WinState</code> 也可能降回 <code>DeuceState</code> ，<br>與 <code>NormalState</code> 並沒有直接的關聯路徑，所以在案例設計上，應該放比較後面。</p><p><strong>第三個案例</strong>，我會讓 <code>NormalState</code> 變回 <code>SameState</code>，除了可以完成一條狀態改變的路徑外，<br>好處是我不用新增類別，作到最小異動。<br>一開始我的邏輯會放在 GameContext 之中，但是不論是依循著 Design Pattern 的設計，<br>或是單純考量職責，很自然地將這裡的邏輯移至 <code>NormalState</code> 之中。<br><strong>這裡案例會選用 1-1</strong> 。</p><p>但是要將邏輯移到 <code>NormalState</code> 之中時，會面臨一個問題。<br><code>NormalState</code> 之中，為了判斷是否會回到 <code>SameState</code>，<br>需要知道 GameContext 的資訊 ( ServerPoint 與 ReceiverPoint )，<br>依循 Design Pattern 的指引，<br>將會在 <code>IState</code> 之中建立 SetContext 方法。<br>儘管 <code>SameState</code> 其實不用 ServerPoint 或 ReceiverPoint 的資訊。<br>但是因為我們相依於介面 <code>IState</code> 之上，導致 <code>NormalState</code> 或 <code>SameState</code> 都要實作 SetContext 方法。</p><p>再進一步，SetContext 在不同的 State 實作上是不會有變化的，<br>所以我會轉換 <code>IState</code> 為抽像類別 <code>State</code>。<br>而我也需要在比賽初始時呼蹈後 SetContext 並將初始狀態設為 <code>SameState</code></p><p><strong>案例 4、5、6 我選擇了 0-1 、0-2 、0-3 等案例</strong>，<br>這裡實作的是 Normal to Normal 的狀態改變(其實是沒變)，透過 Dictionary 消除 if 的手法就略過不提。<br>但是也許下次我不會急著完成 <code>NormalState</code> 而是先完成 <code>WinState</code> 與 <code>DeuceState</code> 。</p><p><strong>接下來讓 3-3 這個案例，帶我們走到 <code>DeuceState</code></strong>，<br>稍微繞了一點路作 4-4 這個案例，雖然一樣是 <code>DeuceState</code>，<br>我一開始的設計案例上並沒有考量清楚，從 3-3 走到 4-4 必須經過 <code>AdvState</code>，<br>下次應該先選擇 <strong>3-4 或 4-3 的案例</strong>，<br>再透過 <strong>4-4 的案例</strong>實作 <code>AdvState</code> 回到 <code>DeuceState</code> 的這條路徑。<br>最後再將透過<strong>案例 5-3 讓 <code>AdvState</code> 走到 <code>WinState</code></strong> 與 <strong>案例 4-1 讓 <code>NormalState</code> 走到 Win</strong> 就可以結束主要的流程了。</p><p>收官的部份就是簡單的重構，與補足一些特殊比分的案例，<br>特別要注意的是 <code>NormalState</code> 的 Score 仍然有許多的 if 讓我想重構移除，<br>目前暫時沒有想法。<br>此外，實際上 Tennis 會特別重視得分的順序，<br>比如說 <strong>100-100 Deuce 這種極端案例</strong>，交互得分的情況應忠實呈現在測試之中。<br>所以在寫測試時，就要特別注意得分的順序性。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>這次還是有用到一些常用的重構套路，<br>比如說，用 Dictionary 消除 if else 的手段。<br>另一個則是 <code>Template Method Pattern</code>，<br>讓我們看看以下的 commit  </p><ul><li><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/e8ddf89fdee94d6a82115f4449e213a4874269f8" target="_blank" rel="noopener">e8ddf8</a></li><li><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/145d3cb408ed5b39a729c4a9b22fb6744b62c48f" target="_blank" rel="noopener">145d3c</a></li></ul><p>以 <code>ServerScore</code> 方法為例，<br>本來是在定義在 Abstract Class State 之中的抽像方法，<br>由各個 State (Normal、Same、Deuce、Adv 與 Win)實作，<br>但是我們可以明顯發現， <code>Context.ServerPoint++</code> 是重複的，<br>而 <code>ChangeState</code> 才是真正抽像的地方，<br>所以我們可以在 Abstract Class State 加入以下的方法與抽像方法，  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ServerScore</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Context.ServerPoint++;</span><br><span class="line">    ChangeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ChangeState</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p>這不就恰巧是 <code>Template Method Pattern</code> 嗎 ?<br>同樣的手段可以放在 <code>ReceiverScore</code> 方法再重構一次。  </p><p>實務上 Design Pattern 本來就應該星月交輝，而非千里獨行。<br>在學習 Design Pattern 的路上，不是硬套，而是找出適用場景。  </p><p>也是我比較建議的作法，透過重構自然走向 Pattern，<br>透過限制改變來提昇品質，首先要有測試保護，再找尋套路或壞味道重構，<br>最後讓 Design Pattern 成為指引，讓代碼自動躍然而上。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://refactoring.guru/design-patterns/state" target="_blank" rel="noopener">State Pattern</a></li><li><a href="https://refactoring.guru/design-patterns/template-method" target="_blank" rel="noopener">Template Method Pattern</a></li><li><a href="https://www.rulesofsport.com/sports/tennis.html" target="_blank" rel="noopener">Tennis Rules</a></li><li><a href="http://teddy-chen-tw.blogspot.com/2014/04/solid.html" target="_blank" rel="noopener">SOLID 五則皆變</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;Tennis Kata 是我最常練習的一個題目，&lt;br&gt;就我個人而言，這個題目源起 91 大的極速開發，&lt;br&gt;目前最快只有
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
      <category term="OOP" scheme="https://blog.marsen.me/tags/OOP/"/>
    
      <category term="Design Pattern" scheme="https://blog.marsen.me/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>[A社筆記] KATA 跟本是個屁，練不出什麼鬼東西，不服來戰</title>
    <link href="https://blog.marsen.me/2020/07/20/2020/kata_in_dojo/"/>
    <id>https://blog.marsen.me/2020/07/20/2020/kata_in_dojo/</id>
    <published>2020-07-20T06:27:03.000Z</published>
    <updated>2020-07-20T07:20:51.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>前幾天有個小朋友問我說<br>「想問問 Tennis KATA 練習的重點是重構嗎<br>有沒有什麼重構的目標 ?」  </p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>這讓我想起一年前寫的文章，<a href="https://blog.marsen.me/2019/01/30/2019/coding_dojo_in_company/">[N社筆記] 在公司小規模玩 Coding Dojo</a><br>順便記錄一下後續，那個實驗大概在三月隨著參與的人員忙碌而停止了，<br>然後在後續有再重啟一次，那次是使用 Production Code 進行，<br>有多一些新的成員，但是也是隨著「忙碌」與「沒時間」而停止，<br>雖然我心裡比較想直接譙那些不出席又不出聲的人渣一些髒話，<br>不過我想這就是現實吧。這也引發我後續對 <a href="https://blog.marsen.me/2020/01/28/2020/book/better_by_atul_gawande/">TDD 產鉗的反思</a>。  </p><h2 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h2><h3 id="簡答版"><a href="#簡答版" class="headerlink" title="簡答版"></a>簡答版</h3><p>Kata 可以幫助你學習到。</p><ul><li>需求分析</li><li>寫測試案例</li><li>TDD 與 Unit Test</li><li>找到壞味道與重構</li><li>Design Pattern</li></ul><h3 id="詳答版"><a href="#詳答版" class="headerlink" title="詳答版"></a>詳答版</h3><p>Kata 就是一個簡單的需求，當需求來的時候<br>你必需先作需求分析，透過需求分析找到測試案例。<br>如果你想學習 TDD 你可以試著讓每個測試案例趨動你的代碼生成。<br>也就是說分析測試案例的時候，你要考慮案例的順序與帶來代碼的改變。  </p><p>試著遵守 TDD 的 紅-綠-重構 準則，<br>重構包含「測試代碼」與「產品代碼」，<br>如果是 OO 語言試著去遵循「SOLID原則」，<br>試著自已隨著 Kata 的過程流動可以看到代碼的變化。  </p><p>Design Patten 可以當作目標或指引去重構代碼。<br>不過以 Design Patten 為目標的話，<br>有兩種可能:</p><ol><li>在「需求分析」階段覺察適合的 Patten 透過設計案例來趨動</li><li>在已完成的代碼中覺察適合的 Patten 在不破壞測試的情況下重構(也有可能需要加測試案例)</li></ol><h4 id="原始回答"><a href="#原始回答" class="headerlink" title="原始回答"></a>原始回答</h4><p><img src="/images/2020/7/kata_in_dojo.jpg" alt="原始回答"></p><h2 id="新的問題"><a href="#新的問題" class="headerlink" title="新的問題"></a>新的問題</h2><p>要花多少時間才能培育一個懂「OO、TDD、Refactoring、DP」的工程師 ?<br>這個性價比符合商業利益嗎 ? 職涯規劃上值得嗎 ?<br>業界真的有需求嗎 ? 還是只要會剪下貼上就好 ?<br>真正的大公司是這樣開發的嗎 ? 業界很多公司不這樣作不也活得好好的 ?<br>目前的趨勢會更加的專業分工，這些準繩依舊適用嗎 ?</p><p><strong>我還沒有答案，但我還在路上。</strong></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;前幾天有個小朋友問我說&lt;br&gt;「想問問 Tennis KATA 練習的重點是重構嗎&lt;br&gt;有沒有什麼重構的目標 ?」  &lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 回饋隨筆—《SCRUM敏捷實戰手冊》</title>
    <link href="https://blog.marsen.me/2020/06/30/2020/yuubuke_talk_about_scrum/"/>
    <id>https://blog.marsen.me/2020/06/30/2020/yuubuke_talk_about_scrum/</id>
    <published>2020-06-30T09:51:03.000Z</published>
    <updated>2020-07-01T04:36:52.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>朋友在一個知識型部落客的團隊中工作，<br>作了一個有關 Scrum 的影片，<br>恰巧我最近的工作與 Scrum 的導入有比較深的關係，<br>影片我也蠻喜歡的，就稍微作個筆記當作回饋。</p><h2 id="回饋隨筆"><a href="#回饋隨筆" class="headerlink" title="回饋隨筆"></a>回饋隨筆</h2><p>第一點，讓我可以看到非業界人員初探 Scrum 的角度，<br>我第一次「知道」Scrum 已經是在 C 社的事了。<br>有點忘了第一次接觸的「初心」，台灣非軟體人說這方面的非常稀少。<br>能夠提供不同視角是很重要的。  </p><p>橄欖球列陣這部份我蠻喜歡的; 雖然直譯就知道 Scrum 原本的意思，<br>但是離「光速蒙面俠」太遠，已經有點忘了那些規則，<br>現在對比起來真的很像，為了一次的達陣，你需要多少衝刺 ?<br>戰術又該怎麼選擇 ? 球員平時的訓練與臨場反應是不是也可以映射到這個業界呢 ?  </p><p>整個影片很淺顯易懂，口齒清晰即使放到 1.5 倍速還是聽得清楚，<br>可惜的是汽車廠 5 年轉型的故事我想知道更多細節或出處，<br>不是很喜歡「一半的時間，作兩倍的工作」的結論，<br>我覺得是書商的行銷手段，不是 Scrum 的目標與強項。<br>產能的提昇不過是個結果，重點是三大支柱對團隊帶來的效應。<br>沒提到透明性、檢視性與調適性我覺得蠻可惜的，  </p><p>另外個人的工作流程我不覺得需要跑 Scrum ，<br>可以試試 GTD 或 PDCA ，而且你會發現很多類似的觀念與原則。<br>Scrum 設計上是適合小型團隊的，業界說法是 3~9 人，不含 PO 與 SM<br>多人的公司也有很多別的方法論(EX: LeSS or SAFe)，這裡我不多開戰線，敏捷無它「務實」而已。<br>方法沒有不好，只有適不適合。</p><h2 id="差異"><a href="#差異" class="headerlink" title="差異"></a>差異</h2><p>有些用字跟業界不太一樣有點可惜，硬要翻譯不如保留英文或是業界常用翻譯。<br>Scrum 跟規格固定應該沒有什麼關係，不過工程上的確這樣作會帶來一些好處。<br>Scrum 跟 Agile 本質上還是有些不同， Agile 比較像願景、原則比較抽象的層次。<br>複習一下 Agile 的宣言</p><ul><li>Individuals and interactions over processes and tools</li><li>Working software over comprehensive documentation</li><li>Customer collaboration over contract negotiation</li><li>Responding to change over following a plan</li></ul><p>Scrum 是業界較常見的框架而且與其它工作法相容性非常的高，<br>就我個人而言擷取過 XP、GTD、番茄鐘、ORID 與 ToC 等方法。<br>作為一個框架，有彈性的包容各種方法是它如此廣佈的原因之一。</p><p>最後 Scrum 無法擺脫加班、Scrum 無法擺脫加班、Scrum 無法擺脫加班<br>不要盲從，Google 是先成為 google 才有導入 Scrum，你導入 Scrum 也不會成為 Google。<br>丟書前多想 3 秒鐘，丟桌上不如丟臉上，丟書不如丟辭呈。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://william-yeh.net/post/2018/11/why-safe-over-less/" target="_blank" rel="noopener">為什麼 LeSS 這麼迷人，可是總是輸給 SAFe？</a></li><li><a href="https://www.youtube.com/watch?v=dzu9yYgmO6s" target="_blank" rel="noopener">影片無法嵌入，改分享連結</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;朋友在一個知識型部落客的團隊中工作，&lt;br&gt;作了一個有關 Scrum 的影片，&lt;br&gt;恰巧我最近的工作與 Scrum 的導入
      
    
    </summary>
    
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[A社筆記] Introduce Unit Test --- 心法篇</title>
    <link href="https://blog.marsen.me/2020/06/11/2020/unit_test_introduce_on_a_taipei_1/"/>
    <id>https://blog.marsen.me/2020/06/11/2020/unit_test_introduce_on_a_taipei_1/</id>
    <published>2020-06-11T09:03:11.000Z</published>
    <updated>2020-10-19T08:44:25.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-Unit-Test-心法篇"><a href="#Why-Unit-Test-心法篇" class="headerlink" title="Why Unit Test 心法篇"></a>Why Unit Test 心法篇</h2><p>網路上很多，自已找(兇)。</p><h3 id="我的想法-about-Unit-Test"><a href="#我的想法-about-Unit-Test" class="headerlink" title="我的想法 about Unit Test"></a>我的想法 about Unit Test</h3><h4 id="點"><a href="#點" class="headerlink" title="點"></a>點</h4><ul><li>有驗收才有品質，所以我需要測試<ul><li>黑箱</li><li>白箱</li><li>整合</li><li>單元</li></ul></li><li>UT 不過是驗收的最基本的單位。</li><li>開發人員一定會測試的，不論用何種方法<ul><li>Debug</li><li>Console Output</li><li>Break Point</li></ul></li><li>程式人員的好品德<ul><li>Laziness</li><li>Impatience</li><li>Hubris</li></ul></li><li>程式是照你寫的跑，而不是照你想的跑</li></ul><h4 id="線"><a href="#線" class="headerlink" title="線"></a>線</h4><ul><li>既然你會測試，那麼為什麼不讓它可以[重複/一鍵]被執行</li></ul><h4 id="面"><a href="#面" class="headerlink" title="面"></a>面</h4><ul><li>只是為了重複執行，何不使用現有的測試框架與工具?</li></ul><h4 id="體"><a href="#體" class="headerlink" title="體"></a>體</h4><p>先訂驗收標準，再進行開發是正常不過的作法，<br>只不過你太聰明而在腦中測試過了。<br>但是<strong>程式是照你寫的跑，而不是照你想的跑</strong>。<br>不如先寫下驗收標準(測試左移/DoD/TDD),再進行開發。<br>錦上添花的話，就透過工具讓「執行測試」可以快速重複。<br>剩下的問題是，這些驗收標準寫到多「鉅細靡遺」?<br>有沒有什麼方式可以提昇我撰寫的速度 ?</p><p>假設我有了測試保護，那麼重構將是一件安全的事。<br>壞味道可以給我提示，而 Design Pattern 可以是改善程式的一個指引。</p><h2 id="Unit-Test"><a href="#Unit-Test" class="headerlink" title="Unit Test"></a>Unit Test</h2><h3 id="3A"><a href="#3A" class="headerlink" title="3A"></a>3A</h3><p>程式寫的是 AAA (正序)心裡想的是AAA(逆序)</p><ul><li>Arrange</li><li>Act</li><li>Asset</li></ul><h3 id="紅、綠、重構"><a href="#紅、綠、重構" class="headerlink" title="紅、綠、重構"></a>紅、綠、重構</h3><p>如果以 TDD 開發，寫完新的測試後，得到的一個「綠燈」反而是一個壞味道。</p><h2 id="第一天分享"><a href="#第一天分享" class="headerlink" title="第一天分享"></a>第一天分享</h2><p>pair programming 30 min，QA 約 20分鐘。<br>先請同事實作 1+1 的 Unit Test 看一下他對測試的理解。</p><ul><li><p>建立測試專案，可以選用 xUnit</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不選 MsTest 的理由是，我比較喜歡建構子與解構子的寫法，  </span><br><span class="line">勝過 TestInitialize&#x2F;TestCleanup 的 Attribute 的寫法</span><br></pre></td></tr></table></figure></li><li><p>引導由測試寫出方法。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logic → function → class method  </span><br><span class="line">透過寫測試讓 Production 在思考中產生</span><br><span class="line">引導的沒有很成功</span><br></pre></td></tr></table></figure></li><li><p>3A 的寫法，未來會介紹沒有 3A 的寫法(為了更好的理解)</p></li><li><p><del>方法</del>測試案例的命名</p></li><li><p>介紹 Assert.Equal 取代 Debug.Assert</p></li><li><p>簡單提到三種邏輯，回傳值、改變值、互動。</p></li><li><p>為什麼我討厭 Static</p></li></ul><h3 id="未排序-預計要講的題目"><a href="#未排序-預計要講的題目" class="headerlink" title="[未排序]預計要講的題目"></a>[未排序]預計要講的題目</h3><ul><li>範例是否為偶數 → 牛奶是否過期 → 如何透過一些手法，控制不可控的類別</li><li>怎麼對 Legacy Code 作解耦 ?</li><li>介紹 Mock Framework</li><li>怎麼寫出好理解的 Assertion ?</li><li>介紹 Assert Framework</li><li>建立 A 社的道場 Repo</li><li>more …</li></ul><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ul><li>開發<del>完</del>後，自已會完全不自已測試就丟給 QA 或客戶嗎 ?</li><li>什麼是 Dojo ?<ul><li>日文的道場，把寫程式想像成是在練功，建立一個練功的環境。  </li></ul></li><li>什麼是 Kata ?<ul><li>日文的形，或是可以說是套路/招式，一樣透過練習招式來強化自已的能力。</li></ul></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.facebook.com/notes/kent-beck/rip-tdd/750840194948847/" target="_blank" rel="noopener">RIP TDD</a></li><li><a href="https://wiki.c2.com/?LazinessImpatienceHubris" target="_blank" rel="noopener">Laziness Impatience Hubris</a></li><li><a href="http://otischou.tw/2019/08/02/unit-test.html" target="_blank" rel="noopener">瞭解單元測試</a></li><li><a href="https://softchris.github.io/pages/dotnet-di.html" target="_blank" rel="noopener">How YOU can Learn Dependency Injection in .NET Core and C#</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-Unit-Test-心法篇&quot;&gt;&lt;a href=&quot;#Why-Unit-Test-心法篇&quot; class=&quot;headerlink&quot; title=&quot;Why Unit Test 心法篇&quot;&gt;&lt;/a&gt;Why Unit Test 心法篇&lt;/h2&gt;&lt;p&gt;網路上很多，自已找(
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Elasticsearch Insert Data with .Net  </title>
    <link href="https://blog.marsen.me/2020/06/03/2020/elasticsearch_with_dotnet/"/>
    <id>https://blog.marsen.me/2020/06/03/2020/elasticsearch_with_dotnet/</id>
    <published>2020-06-03T02:11:06.000Z</published>
    <updated>2020-06-08T02:02:11.972Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.marsen.me/2020/05/13/2020/dotnet_logger_with_elasticsearch_kibana/">前篇</a></p><p>上次使用 Nlog 直接與 ElasticSearch 作結合，<br>這次來看看怎麼賽入資料給 ElasticSearch 。</p><h2 id="NEST"><a href="#NEST" class="headerlink" title="NEST"></a>NEST</h2><p>一般來說，ElasticSearch 只要透過呼叫 API 就可<br>但是我將使用 C# 的 Nuget 套件 <a href="https://www.elastic.co/guide/en/elasticsearch/client/net-api/current/introduction.html" target="_blank" rel="noopener">NEST</a> 來簡化呼叫 API 的行為。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="安裝套件"><a href="#安裝套件" class="headerlink" title="安裝套件"></a>安裝套件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package NEST</span><br></pre></td></tr></table></figure><h3 id="建立連線"><a href="#建立連線" class="headerlink" title="建立連線"></a>建立連線</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="keyword">new</span> Uri(<span class="string">"http://localhost:9200"</span>);</span><br><span class="line"><span class="keyword">var</span> settings = <span class="keyword">new</span> ConnectionSettings(node);</span><br><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> ElasticClient(settings);</span><br></pre></td></tr></table></figure><h3 id="寫入資料"><a href="#寫入資料" class="headerlink" title="寫入資料"></a>寫入資料</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="keyword">new</span></span><br><span class="line">&#123;</span><br><span class="line">    name = <span class="string">"test name"</span>,</span><br><span class="line">    timestamp = DateTime.Now.ToString(<span class="string">"yyyy-MM-ddTHH:mm:ss.fffffffK"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">string</span> indexName = <span class="string">$"test-index-<span class="subst">&#123;DateTime.Now:yyyy.MM.dd&#125;</span>"</span>;</span><br><span class="line">client.Index(json, idx =&gt; idx.Index(indexName));</span><br></pre></td></tr></table></figure><h3 id="Create-Index-Pattern"><a href="#Create-Index-Pattern" class="headerlink" title="Create Index Pattern"></a>Create Index Pattern</h3><p>連線進入 Kibana (<a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601/</a>),  </p><p>Setting &gt; Kibana &gt; Index patterns &gt; Create index pattern  </p><p>Step 1 of 2: Define index pattern<br>輸入 <code>test-index-*</code>  </p><p>Step 2 of 2: Configure settings<br>記得選取時間軸(x軸)為 <code>timestamp</code>，這裡會透過 automap 對應欄位，<br>故在產生測試資料時，記得先產出時間資料，<br>這個範例我使用的格式為</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DateTime.Now.ToString(<span class="string">"yyyy-MM-ddTHH:mm:ss.fffffffK"</span>)</span><br></pre></td></tr></table></figure><h2 id="設計共用型別"><a href="#設計共用型別" class="headerlink" title="設計共用型別"></a>設計共用型別</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Record</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> DateTime Created &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Type &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Object Record &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想法是通用類別，或許用抽像類別繼承也可以 ?<br>Created 欄位用來記錄資料產生時間，<br>Type 用來記錄 Record 的型別，<br>Record 用來記錄實際的資料。</p><p>預計未來可能會需要取出 Json 資料再轉成物件操作。</p><p>大概就醬。</p><h3 id="6-8-補充-Net-Logger-分級"><a href="#6-8-補充-Net-Logger-分級" class="headerlink" title="6/8 補充 .Net Logger 分級"></a>6/8 補充 .Net Logger 分級</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>Trace</td><td>0</td><td>包含最詳細訊息的記錄。 這些訊息可能包含敏感性應用程式資料。 這些訊息預設會停用，且永遠不應在生產環境中啟用。</td></tr><tr><td>Debug</td><td>1</td><td>開發期間用於互動式調查的記錄。 這些記錄主要應包含適用於偵錯的資訊，且不具備任何長期價值。</td></tr><tr><td>Information</td><td>2</td><td>追蹤應用程式一般流程的記錄。 這些記錄應具備長期值。</td></tr><tr><td>Warning</td><td>3</td><td>醒目提示應用程式流程中異常或未預期事件的記錄，這些異常或未預期事件不會造成應用程式執行停止。</td></tr><tr><td>Error</td><td>4</td><td>在目前執行流程因失敗而停止時進行醒目提示的記錄。 這些記錄應指出目前活動中的失敗，而非整個應用程式的失敗。</td></tr><tr><td>Critical</td><td>5</td><td>描述無法復原的應用程式或系統損毀，或需要立即注意重大失敗的記錄。</td></tr><tr><td>None</td><td>6</td><td>不會用來寫入記錄訊息。 指定記錄類別不應寫入任何訊息。</td></tr></tbody></table><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.marsen.me/2020/05/13/2020/dotnet_logger_with_elasticsearch_kibana/&quot;&gt;前篇&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上次使用 Nlog 直接與 ElasticSearch 作結合，&lt;
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
