<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  <subtitle>waiting to load</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2019-11-26T03:38:26.552Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[生活筆記] 2019 Inter View 心得分享</title>
    <link href="https://blog.marsen.me/2019/11/26/2019/interview_log/"/>
    <id>https://blog.marsen.me/2019/11/26/2019/interview_log/</id>
    <published>2019-11-26T03:38:55.000Z</published>
    <updated>2019-11-26T03:38:26.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 N 社 4 年了，一直以來都有一個習慣，就是每年都會定期開 CV，<br>有好的機會就去面試看看。<br>部門主管 C 哥在這部份相當開明。<br>我印象深刻是剛進公司時，他要大家寫 1 年後的履歷寄信給他再跟他 1-1。<br>他也鼓勵有好的機會就去試，重點是「以終為始」，搞清楚自已要的到底是什麼 ?  </p><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><h3 id="有比沒有好一點的敏捷"><a href="#有比沒有好一點的敏捷" class="headerlink" title="有比沒有好一點的敏捷"></a>有比沒有好一點的敏捷</h3><p>我是一個理論的實踐者，如果有我認同的理想，<br>就會試著去實踐，可惜「理想很豐滿，現實很骨感」，<br>理論與實踐往往總是有一條橫溝。<br>這不是我想走的主因，但是如果我能找到橫溝一處較窄的地方。<br>我想我會毫不猶豫的走過去。  </p><h3 id="打不敗的通膨"><a href="#打不敗的通膨" class="headerlink" title="打不敗的通膨"></a>打不敗的通膨</h3><p>另一個理由就更現實了，「薪資」基本上4年來是沒有調整的，<br>當然我的計算方式比較特別。我是會考慮通膨率，<br>此外，在這個大前端的時代不知道為什麼我好像選錯了邊，<br>不得不說 F2E 的價金較高機會也較多。<br>而我在 C 社時期，其實是前後通吃的，但是不包含切版。<br>在 N 社我不止一次想轉換到 F2E 卻有以下幾個卡點，  </p><ol><li>缺乏實際行動，僅止於與 F2E主管聊聊的階段</li><li>切版在 N 社 F2E 是必備技能，但不是我職涯規劃中準備投資的項目</li><li>過舊的技術棧 Angular 1.0 與 KnockOutjS 還有 KendoUI 等…</li><li>F2E 與 RD 部門的 Silo</li></ol><p>重點我想還是在 1 ，其它項目其實都有漸漸在改變。</p><h3 id="工作內容"><a href="#工作內容" class="headerlink" title="工作內容"></a>工作內容</h3><p>再延申到最後一個原因，想作的事與正在作的事。<br>其實我很清楚，這兩者要相同並沒有那邊容易，<br>想作的事還很模糊，而正在作的事很無聊。<br>過去一年基本上只是在抽字串，<br>或是將功能搬到 A 市場, 再搬到 B 市場，<br>而且真的只有搬，有沒有人用都不知道，業績如何也不知道，團隊作起來很沒有成就感。  </p><p>而跟主系統(台灣市場)比較起來，A/B市場規模相對小，人力也少，<br>當有產品需求調整的情況，往往犧牲的都是A/B市場的，再由我們開發補丁作修正。<br>而不是一開始就以一個國際化的產品在設計產品，這樣作下來漸漸就提不勁了。  </p><p>就業一段時間應該都知道，只有功勞沒有苦勞。<br>不賺錢，沒資源，更不賺錢，更沒資源是一種惡向循環。  </p><p>我的解決方案，重新定位團隊目標，<br>所以我非常強力推動幾個項目的國際版標準化，<br>因為我認為這才是我們的核心項目。  </p><h3 id="彼得效應"><a href="#彼得效應" class="headerlink" title="彼得效應"></a>彼得效應</h3><p>彼得效應其實是我在 C 社的功課，簡單的說就是碰到天花板了。<br>不論在能力上、薪資上或是發展性上都到了一個瓶頸，<br>這問題不只在我身上，在我的同儕、我的主管以及我周邊所有的人身上，<br>我以前會考慮，要如何才能延續我技術人員的生涯?<br>特別是在這個變化如此快速的時代。  </p><p>目前我還沒有一個很完整的答案，不過我周邊的人離開了原本公司之後，<br>又遇到了相同的問題，討厭的主管/討厭的政治環境/討厭的工作內容，<br>在不同的公司，卻有相同離開的理由…<br>我目前的想法，不再只以「技術人員」作考量，<br>在薪資可接受的範圍下，我作為一個人，作為「我自已」我要如何讓自已盡可能的發展 ?<br>純技術是不是自我設限 ? 主管不會領導，那我能不能反過來引導他 ?<br>環境不喜歡，我能不能改變它 ? 人不喜歡，我能不能找到志同道合的夥伴 ?  </p><h2 id="各社流程"><a href="#各社流程" class="headerlink" title="各社流程"></a>各社流程</h2><p>講了一堆現在才要進到主題。<br>先講結論，我愛的人不愛我，愛我的人我不愛。</p><h3 id="N-B"><a href="#N-B" class="headerlink" title="N* B*"></a>N<strong>* B*</strong></h3><p>純網銀的公司。慕名 N 社前 HR 大主管之名而去，<br>面試機會好像很難拿到，但是我運氣蠻好的，拿到了面試機會。  </p><p>總共有三面，<br>第一面是技術職的面試(60mins)，只有閒聊工作上的經驗，沒考什麼技術。<br>有三個技術主管，聊起來的感覺人都蠻和善的。<br>技術棧並不確定，但是有很多機會，什麼都可以嚐試的感覺。<br>不太熟悉敏捷，但是宣稱一定會跑測試與自動化等功能。  </p><p>第二面是 N 社的前主管(30mins)，合作的機會不多，所以互相聊了一下公司的進況。<br>另外我問了一些新聞八掛(肥貓啊、排名最後啊…)，也很坦率的回應，<br>他敢說我就敢信，基本上沒有逃避閃躲問題我覺得就 Ok 了  </p><p>第三面是總經理，基本上不問你問題，<br>而是請你問問題，但是我覺得我沒有準備的很好，<br>只有問一下目前的目標與挑戰，回答是「活下去」  </p><p>Offer : Get  </p><h3 id="T"><a href="#T" class="headerlink" title="T****"></a>T****</h3><p>社群上有名的「敏捷」公司，遊戲產業，<br>剛好有認識的人介紹之下去面試。  </p><p>面試的內容，程式題一題，DB題一題，<br>不過相當的簡單，不太像是在找 Senior 的題目，<br>剩下的就是閒聊，不過可能是我聊的沒有很好，另外一個可能性，就是薪資的問題所以沒有上。  </p><p>感覺比較差的兩點，<br>一個是 T 社找了我兩次，<br>兩次 HR 都說不論是否錄取都會通知，<br>但是兩次都沒有通知，<br>第二次去面試前我還有特別在通訊軟體上與 HR 確認是否會告知結果，<br>但是仍然是無聲卡。  </p><p>第二點是兩次面試的題目一模一樣，<br>完全沒有變化，面試官也知道但好像也不是很介意，<br>但是以我面試者的角度會覺得這間公司在招慕上沒有什麼鑑別度。  </p><p>Offer : 無聲卡 * 2  </p><h3 id="C"><a href="#C" class="headerlink" title="C****"></a>C<strong>****</strong></h3><p>主要作工程師媒合平台，是我非常喜歡的一間公司，<br>也是第一次線上面試，問題蠻廣泛的，但是我覺得我都回答得出來<br>只有問了一題 ACID 我沒有回答的很好，我有另文記錄。<br>總之就是我對 DB 的認識停留在預設值，而沒有考慮應該商業需求可能的調整。  </p><p>另外我作了一些線上面試的小小 Retro，稍稍記錄一下  </p><ul><li>面向光源，不然你會臉會很黑</li><li>保持背景單調乾淨</li><li>跟同居的事先說好有面試，避免臨時打擾</li><li>儘可能讓攝影機高過你的頭，不然看起來會很肥</li><li>就算是凌晨面試也要梳洗，看起來比較有精神</li><li>網路可能有延遲，可以稍等一下再回答問題</li></ul><p>Offer : Reject  </p><h3 id="F"><a href="#F" class="headerlink" title="F*****"></a>F<strong>*****</strong></h3><p>後面好像有個富爸爸的收據公司，數位轉型作 CMS，<br>而且只針對 mobile 製作，聽起來工作內容蠻輕鬆的。<br>不過他們的瓶頸在 DB ，所以要找一個後端懂SQL的人。<br>只有一面，介紹產品還有面臨的問題，<br>技術棧算蠻新的，不過沒有CI/CD與自動化等工程。  </p><p>CMS 是我蠻喜歡的 Topic , N 社現在也有在作，<br>但是我最後還是拒絕了。  </p><p>主要的原因可能是，我覺得技術上好像沒有辦法在那邊得到進步。  </p><p>Offer : Get</p><h3 id="a"><a href="#a" class="headerlink" title="a**"></a>a<strong>**</strong></h3><p>微軟 Teams 服務的合作廠商，主要作數位電話相關。<br>也是朋友介紹的公司，應該是第二次找我，<br>因為之前沒有很強烈的離職意願，所以沒有去面試。<br>特色的早上班早下班，大概 5 點就能下班了，據說不太加班，<br>一面，與美國主管線上訪談，這次有吃到 Codementor 的經驗，<br>所以聊得蠻順利的，美國主管有技術底，會講中文所以溝通無礙，<br>不過我一直以為他是美國人，其實是台灣人的樣子，只是在美國待久了有點口音。  </p><p>二面，跟台灣當地主管面試，介紹產品與閒聊，<br>老實說工作環境與地點還有薪資我都蠻 OK 的，<br>當初有考慮過接收 Offer 的。<br>最後就是跟朋友閒聊，朋友是 C 社的前同事。<br>基本上就是一個小公司，產業蠻穩定的，那個職位也有很多機會，<br>但是成長就要靠自已了，現在想想還是會覺得放棄可惜。  </p><p>Offer : Get  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>我覺得定期作面試是很有幫助的，<br>他能帶來以下的好處，  </p><ul><li>了解市場需求，直接面對第一線的招幕才知道現在含金量最高的技術是什麼</li><li>了解自已，過程中不斷評估自已要的東西(薪資、成就感、穩定、福利、名氣…)，什麼都是假的，離開(或留下)才是真的</li><li>了解不足與市場的差距(特別是技術面)</li><li>與不同產業的技術主管聊天，技術只是一種手段，不要忘記背後的商業目的</li></ul><p>家家有本難唸的經，不同的公司也有不同的難處，<br>時時檢視自已所處的環境，換或不換你都可以選擇，<br>成為更好的自已。<br>開始準備 2020 的履歷囉。  </p><p>最後謝謝所以推薦我與面試我的人。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 N 社 4 年了，一直以來都有一個習慣，就是每年都會定期開 CV，&lt;br&gt;有好的機會就去面試看看。&lt;br&gt;部門主管 C 哥在這部份相當開
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[生活筆記] Swing Dance 雜記</title>
    <link href="https://blog.marsen.me/2019/11/07/2019/swing_dance_log/"/>
    <id>https://blog.marsen.me/2019/11/07/2019/swing_dance_log/</id>
    <published>2019-11-07T09:03:56.000Z</published>
    <updated>2019-11-07T09:05:54.609Z</updated>
    
    <content type="html"><![CDATA[<p>學習 Swing 大概滿周年了，最初的理由已經有點忘記了;<br>為了避免忘掉更多東西，還是隨手記錄一下自已的一些小小想法。</p><h2 id="波動的感覺"><a href="#波動的感覺" class="headerlink" title="波動的感覺"></a>波動的感覺</h2><p>在新手期的階段有一件有趣的事，在牽起 Follower 手的時候，<br>大概就知道這個人有沒有跳過舞，基本上會有波動從對方的手傳遞過來，<br>正常來說這個波動應該是上下的，有時候會遇到左右或是扭扭的波動，<br>也有波平如鏡的狀況。</p><p>Lindy 的基本動作之一是 Bounce，它帶來的波動應該是上下，而且是下律動的。<br>所以如果感覺到不太一樣的波，大概可以猜這個人之前有跳過別的舞蹈，<br>準確率還蠻高的，只是現在我好像感覺不太到了。</p><h2 id="與武術的關係"><a href="#與武術的關係" class="headerlink" title="與武術的關係"></a>與武術的關係</h2><p>上面提到了波，就聊聊舞與武的關係，因為不知道為何我腦海總會出現「波動拳」三個字。<br>除了波以外，練基本步跟 Bounce 就好像是在蹲馬步，跟 Follower 練習就好像在練套路(Kata)<br>而 Social 場合就像是賽際過招，年度大型 Event 就是天下武術大會的概念。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>跳舞的目的很抽象，不像其它的運動，有明確的目的，例如把球投進籃子裡或是率先衝過終點線。<br>我給自已訂了一些目標與原則，<br>首先要讓 Follower 感到安全，<br>同時不能讓他感到無聊，整個過程必須是有趣的，<br>最後一定要讓 Follower 跳得好看。<br>如果 Follower 被誇獎跳得很美，Leader 才算成功。</p><h2 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h2><p>一開始學習給的一些自我約束，不一一說明原委，反正我就是喜歡沒事找事作</p><ol><li>不要找同一個人一直跳舞，儘可能每首都換</li><li>全場通殺，小一點的 Social 場合儘量跟每個人都跳到</li><li>Follower 永遠是對的，如果 Follower 跟錯了，想想是不是自已的 Leading 不夠明確</li><li>Last Song , 可以的話最後一首一定要跳</li></ol><h2 id="教室"><a href="#教室" class="headerlink" title="教室"></a>教室</h2><p>Big Apple(BA)、Swing Taiwan(ST)、YM Swing(YM)、Lindy Island(艾倫)、JF Swing(JF)、Naughty Swing</p><p>台北我知道的教室大概就這幾間(2019)，第一次是在 ST 上的，後來時間對不上就去 YM 學了一陣子(半年以上)，<br>Lindy Island 上過一期 Swing Out(四堂)，Naughty Swing 上過一次 Solo 。<br>上面的教室括號內是教室的簡稱，然後我是按照某種神祕規則排序的，不知道有人看得出來嗎 ?</p><h2 id="給一年前的我的建議"><a href="#給一年前的我的建議" class="headerlink" title="給一年前的我的建議"></a>給一年前的我的建議</h2><ol><li>不要先學 Charleston 。</li><li>照教室開課的順序去學，但是覺得困難的話，與其往下上，不如上複習班</li><li>不同教室類似的課通常會錯開，時間許可的話都去上。</li><li>常去 Socail 多聽音樂，練習、練習、練習</li><li>Solo 比想像中的好玩，一定要試試</li><li>Keep Learning</li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;學習 Swing 大概滿周年了，最初的理由已經有點忘記了;&lt;br&gt;為了避免忘掉更多東西，還是隨手記錄一下自已的一些小小想法。&lt;/p&gt;
&lt;h2 id=&quot;波動的感覺&quot;&gt;&lt;a href=&quot;#波動的感覺&quot; class=&quot;headerlink&quot; title=&quot;波動的感覺&quot;&gt;&lt;/a&gt;波
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 用 Github Registry 作自已的 Nuget Server</title>
    <link href="https://blog.marsen.me/2019/10/11/2019/github_registry_with_nuget_packages/"/>
    <id>https://blog.marsen.me/2019/10/11/2019/github_registry_with_nuget_packages/</id>
    <published>2019-10-11T03:55:41.000Z</published>
    <updated>2019-10-17T00:55:32.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>使用 GitHub Package Registry 建立一個自已的 Nuget Server。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><h4 id="申請"><a href="#申請" class="headerlink" title="申請"></a>申請</h4><p>GitHub Package Registry 還在 Beta 階段，需要申請才能取得試用。<br>過程並不複雜，在此不贅述，請再自行查找網路。</p><h4 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h4><p>實測的結果，<code>nuget push</code> 並無法建立 Repository ，<br>並且會導致發佈失敗，故必需 <strong>優先建立 Packages 的 Repository</strong> 。<br>Repository 可以包含多個專案，並獨立發佈(發佈指令詳見下文)。  </p><h4 id="建立-nuget-文檔"><a href="#建立-nuget-文檔" class="headerlink" title="建立 .nuget 文檔"></a>建立 .nuget 文檔</h4><p>請以專案名稱命名檔案，ex:<code>Marsen.Utility.nuget</code><br>請依實際情況調整 <strong>id</strong>、<strong>version</strong> 與 <strong>projectUrl</strong><br>特別是 <strong>version</strong> 代表的是 Packages 的版本<br>更多訊息請<a href="https://docs.microsoft.com/zh-tw/nuget/reference/nuspec" target="_blank" rel="noopener">參考</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Marsen.Utility<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span>Marsen Lin<span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Marsen Utility<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">language</span>&gt;</span>en-US<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">projectUrl</span>&gt;</span>https://github.com/marsen/Marsen.Nuget.Packages<span class="tag">&lt;/<span class="name">projectUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="取得授權-token"><a href="#取得授權-token" class="headerlink" title="取得授權 token"></a>取得授權 token</h3><p>請參考<a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry#authenticating-to-github-package-registry" target="_blank" rel="noopener">Configuring NuGet for use with GitHub Package Registry</a> 或是 <a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Creating a personal access token for the command line</a><br><strong>至少需要以下權限</strong></p><ul><li><input disabled type="checkbox"> repo Full control of private repositories<ul><li><input disabled type="checkbox"> repo:status Access commit status</li><li><input disabled type="checkbox"> repo_deployment Access deployment status</li><li><input disabled type="checkbox"> public_repo Access public repositories</li><li><input disabled type="checkbox"> repo:invite Access repository invitations</li></ul></li><li><input disabled type="checkbox"> write:packages Upload packages to github package registry</li><li><input disabled type="checkbox"> read:packages Download packages from github package registry</li></ul><h3 id="下載-安裝-設定-Nuget"><a href="#下載-安裝-設定-Nuget" class="headerlink" title="下載/安裝/設定 Nuget"></a>下載/安裝/設定 Nuget</h3><ol><li><a href="https://www.nuget.org/downloads" target="_blank" rel="noopener">下載 Latest Nuget</a>，取得 nuget.exe</li><li>設定 Path (以 Windows 10 為例)<ul><li>控制台</li><li>系統設定&gt;進階設定</li><li>環境變數 &gt; Path</li></ul></li><li>設定完 path 記得重啟 Terminal Session</li></ol><h3 id="新增-Nuget-Source"><a href="#新增-Nuget-Source" class="headerlink" title="新增 Nuget Source"></a>新增 Nuget Source</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p>Name 、 Source 與 UserName 網址請依實際調整參數<br>Password 請代入 token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nuget sources Add -Name <span class="string">"Marsen.Nuget sources"</span> /</span><br><span class="line">-Source <span class="string">"https://nuget.pkg.github.com/marsen/index.json"</span> /</span><br><span class="line">-UserName marsen -Password 3*******************************1</span><br></pre></td></tr></table></figure><h4 id="設定-Key"><a href="#設定-Key" class="headerlink" title="設定 Key"></a>設定 Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget setapikey 3*******************************1 -Source <span class="string">"Marsen Nuget Sources"</span></span><br></pre></td></tr></table></figure><h4 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget sources Remove -Name <span class="string">"Marsen.Nuget sources"</span></span><br></pre></td></tr></table></figure><h4 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget sources</span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget pack Marsen.Package.csproj -OutputDirectory c:\local_nugets</span><br></pre></td></tr></table></figure><h4 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget push c:\local_nugets\Marsen.Utility.1.0.0.nupkg -Source <span class="string">"Marsen Nuget Sources"</span></span><br></pre></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p><img src="https://i.imgur.com/Qz5Rv4c.jpg" alt="GitHub Package Registry"></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><ol><li>每次都要打版號好麻煩，能不能自動化 ?</li><li>透過 CI 建立，並傳入參數作為版號 ?</li><li>每次 commit 只要通過 UT 測試就發佈.beta版 ? CI 發佈正式版 ?</li></ol><p>more…</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry#authenticating-to-github-package-registry" target="_blank" rel="noopener">Configuring NuGet for use with GitHub Package Registry</a></li><li><a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Creating a personal access token for the command line</a></li><li><a href="https://www.nuget.org/" target="_blank" rel="noopener">https://www.nuget.org/</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools" target="_blank" rel="noopener">https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/reference/nuspec" target="_blank" rel="noopener">https://docs.microsoft.com/zh-tw/nuget/reference/nuspec</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目標&quot;&gt;&lt;a href=&quot;#目標&quot; class=&quot;headerlink&quot; title=&quot;目標&quot;&gt;&lt;/a&gt;目標&lt;/h2&gt;&lt;p&gt;使用 GitHub Package Registry 建立一個自已的 Nuget Server。&lt;/p&gt;
&lt;h2 id=&quot;步驟&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[工作筆記] 2019 常用工具整理</title>
    <link href="https://blog.marsen.me/2019/09/26/2019/my_tools_2019/"/>
    <id>https://blog.marsen.me/2019/09/26/2019/my_tools_2019/</id>
    <published>2019-09-26T09:41:17.000Z</published>
    <updated>2019-10-15T06:14:43.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="輸入法"><a href="#輸入法" class="headerlink" title="輸入法"></a>輸入法</h2><ul><li>無蝦米 (加速打字，未來不太看好，考慮更換中…)</li></ul><h2 id="網站"><a href="#網站" class="headerlink" title="網站"></a>網站</h2><ul><li><a href="https://www.slant.co/" target="_blank" rel="noopener">Slant 工具比較</a></li><li><a href="https://blog.marsen.me/2019/04/11/2019/tool_sites/">開發常用的工具網站 JSON/YAML/SQL</a></li><li><a href="http://www.richyli.com/tool/loremipsum/" target="_blank" rel="noopener">亂數假文產生器 - 中文</a></li><li><a href="https://www.lipsum.com/feed/html" target="_blank" rel="noopener">亂數假文產生器 - 英文</a></li><li><a href="https://zh-tw.facebook.com/" target="_blank" rel="noopener">資訊收集/廢文發佈</a></li></ul><h2 id="PC-工具"><a href="#PC-工具" class="headerlink" title="PC 工具"></a>PC 工具</h2><ul><li>文字比較工具<ul><li>Win Merge  </li></ul></li><li>Git GUI<ul><li><del>GitKraken(需收費)</del></li><li>Fork</li></ul></li><li>Carnac<ul><li>顯示鍵盤點擊歷程</li></ul></li><li>Windows 用 Launchers<ul><li>Wox</li></ul></li><li>快速搜尋文件<ul><li>Agent Ransack</li></ul></li><li>跨 PC 存放檔案<ul><li>Dropbox</li></ul></li><li>截圖錄影工具<ul><li>ShareX</li><li>Skitch  </li></ul></li><li>遠端桌面管理<ul><li>Remote Desktop Manager Free (試用中)</li><li>Remote Desktop Connection Manager</li></ul></li></ul><h2 id="筆記工具"><a href="#筆記工具" class="headerlink" title="筆記工具"></a>筆記工具</h2><ul><li>Evernote<ul><li>專案分類</li><li>職涯規劃</li><li>已完成的項目</li></ul></li><li>Notion<ul><li>GTD</li><li>周記劃</li></ul></li><li>HackMD<ul><li>暫存的記錄</li><li>會議/社群活動即時記錄</li><li>Blog 草稿</li><li>共筆</li></ul></li><li>Blog<ul><li>技術實作記錄</li><li>社群活動記錄</li></ul></li></ul><h2 id="瀏覽器-amp-外掛"><a href="#瀏覽器-amp-外掛" class="headerlink" title="瀏覽器 &amp; 外掛"></a>瀏覽器 &amp; 外掛</h2><p>95% 使用 Chrome ，4% 使用 FireFox，極少情況使用其它瀏覽器</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul><li>tampermonkey<ul><li>撰寫網頁小工具</li></ul></li><li>One Tab<ul><li>快速收攏大量分頁，常用在特殊主題搜尋的暫存</li></ul></li><li>Clear Cach<ul><li>清快取</li></ul></li><li>grammarly<ul><li>拼字校正</li></ul></li><li>Bitbucket Diff Tree<ul><li>Bitbucket PR 差異比較</li></ul></li><li>JSONView<ul><li>當 response 為 json 時更為好讀</li></ul></li><li>LastPass: Free Password Manager<ul><li>密碼管理</li></ul></li><li>Wappalyzer<ul><li>分析網站使用的框架與技術</li></ul></li><li>cVim<ul><li>使用 Vim 的習慣操作網頁</li></ul></li></ul><h2 id="文件編輯器"><a href="#文件編輯器" class="headerlink" title="文件編輯器"></a>文件編輯器</h2><ul><li>Vim</li><li>NotePad++</li><li>記事本</li></ul><h2 id="個人工具"><a href="#個人工具" class="headerlink" title="個人工具"></a>個人工具</h2><ul><li>桌面記時器 DesktopTimer.exe</li></ul><h2 id="開發工具"><a href="#開發工具" class="headerlink" title="開發工具"></a>開發工具</h2><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><ul><li>ejs</li><li>C#</li><li>Chinese (Traditional) Language Pack for Visual Studio Code</li><li>Cucumber (Gherkin) Full Support</li><li>Docker</li><li>Git History</li><li>Git Project Manager</li><li>GitLens — Git supercharged</li><li>JSON Tools</li><li>Markdown All in One</li><li>markdownlint</li><li>Paste URL</li><li>PowerShell</li><li>Relative Line Numbers</li><li>Remote - WSL</li><li>REST Client</li><li>Settings Sync</li><li>Snippets and Syntax Highlight for Gherkin (Cucumber)</li><li>Sort lines</li><li>SQL Server (mssql)</li><li>stylus</li><li>Swagger Viewer</li><li>Unique Lines</li><li>Vim</li><li>vscode-icons</li><li>Vue 2 Snippets</li></ul><h3 id="Microsoft-Visual-Studio-Professional-2017-預計升到-2019"><a href="#Microsoft-Visual-Studio-Professional-2017-預計升到-2019" class="headerlink" title="Microsoft Visual Studio Professional 2017 (預計升到 2019)"></a>Microsoft Visual Studio Professional 2017 (預計升到 2019)</h3><ul><li>OzCode (付費軟體)<ul><li>增強除錯</li></ul></li><li>ReSharper Ultimate (付費軟體)<ul><li>dotCover (檢驗覆蓋率，需另外安裝)</li><li>強化重構/測試</li></ul></li><li>ILSpy<ul><li>反組譯工具</li></ul></li><li>SpecFlow for Visual Studio 2017<ul><li>BDD 開發</li></ul></li><li>GhostDoc Community for VS2017 and Later (免費版)<ul><li>自動加入註解</li></ul></li><li>ResXManger<ul><li>多語系 Resource 檔編輯</li></ul></li><li>VsVim<ul><li>Vim 支援工具</li></ul></li><li>Snippet Designer<ul><li>Snippet 編輯管理</li></ul></li><li>Style Cop<ul><li>代碼審查</li></ul></li><li>xUnit.net.TestGenerator<ul><li>加速寫單元測試(xUnit)</li></ul></li><li>CodeMaid<ul><li>代碼審查 &amp; 複雜度</li></ul></li><li>Visual F# Tools [實驗性]</li><li>Roslyn Expression Evaluators [實驗性]</li><li>Roslyn Interactive Componets [實驗性]</li><li>Roslyn Language Service [實驗性]</li><li>Microsoft Library Manager</li><li>Develop Automated Tests VS2017</li><li>Visual Commander</li><li>Fix Mixed Tabs</li><li>Microsoft Visual Studio 測試平台</li><li>Microsoft Visual Studio Installer Projects</li><li>Microsoft Azure WebJobs 工具</li><li>Cloud Explorer for VS 2017</li></ul><h3 id="LINQPad-5-付費"><a href="#LINQPad-5-付費" class="headerlink" title="LINQPad 5 (付費)"></a>LINQPad 5 (付費)</h3><p>快速檢驗 C# 語法的小工具</p><h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h3><ul><li>Cmder | Console Emulator</li><li>Windows Powershell ISE</li></ul><h3 id="資料庫管理"><a href="#資料庫管理" class="headerlink" title="資料庫管理"></a>資料庫管理</h3><ul><li>Redis Desktop Manager (Redis)</li><li>SSMS (MsSQL)</li><li>Robo 3T (Mongo DB)</li></ul><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><ul><li>Docker Desktop</li><li>Kitematic</li></ul><p>(未完待續)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;輸入法&quot;&gt;&lt;a href=&quot;#輸入法&quot; class=&quot;headerlink&quot; title=&quot;輸入法&quot;&gt;&lt;/a&gt;輸入法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;無蝦米 (加速打字，未來不太看好，考慮更換中…)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;網站&quot;&gt;&lt;a href=&quot;#網站
      
    
    </summary>
    
    
      <category term="工作筆記" scheme="https://blog.marsen.me/tags/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 利用 .Net Core Project Template 加速開發</title>
    <link href="https://blog.marsen.me/2019/09/01/2019/dotnet_core_projecte_template/"/>
    <id>https://blog.marsen.me/2019/09/01/2019/dotnet_core_projecte_template/</id>
    <published>2019-09-01T12:46:46.000Z</published>
    <updated>2019-09-08T09:50:33.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><p>這篇是實作的紀錄，大部份資源都參考至 MSDN 線上文件<br>那裡會有更新更完整的文件支援。</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>專案上作了一個跨市場的服務，以提供主服務對不同市場金流的支援。<br>首先有一個國際化的專案，用來制定 API 層級的標準化，<br>而在不同的市場，例如:馬來西亞、香港、烏克蘭等…。<br>在地化的項目需要建立外掛(Plugin)專案的方式進行開發…  </p><p>建立一個全新的 Plugin 專案是一件麻煩的事，<br>首先要加入專案，再來要實作相對應的介面，<br>這裡指的是建立一個類別，然後繼承一堆介面，<br>ex:IPay、IRefund、ICheck…等，<br>並不包含商務邏輯的開發與實際的 API 或 SDK 串接，<br>而在公司的標準之下，我還必須引入一堆參考或 Nuget 套件。<br>同時因為國際化專案採用動態載入的機制，<br>有一些細節準則需要由 Plugin 專案遵循，才不會引發異常或 Runtime Error。</p><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><h3 id="建立專案樣版-SOP"><a href="#建立專案樣版-SOP" class="headerlink" title="建立專案樣版 SOP"></a>建立專案樣版 SOP</h3><ol><li><p>建立樣版資料夾，比如說 <code>Blog.Plugin.Template</code></p></li><li><p>準備好你的專案檔與相關的必要檔案</p><p> 這裡的檔案你可以拿現成專案作修改，我個人是從頭手工打造了一個全新的Plugin。<br> 並且去除所有不相關不必要的資料夾、檔案、參考與程式。<br> 簡單的來說，這是一個殼、一個專案樣版(Template)而已。<br> 接下來會遇到的問題「參數化」，比如說專案的名稱，資料夾的名稱，或是程式本身的內容，會依據不同的 Plugin 專案而改變的部份。<br> 我把它分為檔案層級與內容層級的參數化。</p><ul><li><p>檔案層級參數化</p><p>  表示檔案名稱或是資料夾名稱等，我有動態抽換的需求。<br>  我會用 <code>F-*</code> 作為參數名稱，比如說 <code>F-plugin-name</code><br>  接下來將資料夾或檔案名稱想被抽換的部份改成參數名稱就好，參考下圖。<br>  <img src="https://i.imgur.com/wQVnR1h.jpg" alt="檔案層級參數化"></p></li><li><p>內容層級參數化</p><p>  比如說 Class Name、Namespace、建構子或方法，甚至是預設的註解，<br>  簡單的說只要是檔案內容相關的文字有必要被抽換，我就會使用這個參數設定。<br>  我會直接使用 <code>C-*</code> 參數名稱，比如說 <code>C-plugin-name</code>。    下面是個例子。<br>  <img src="https://i.imgur.com/AhlYXRt.jpg" alt="內容層級參數化"></p></li></ul></li><li><p>建立 <code>.template.config</code> 資料夾</p></li><li><p>在<code>.template.config</code> 建立 <code>template.json</code><br>  <code>template.json</code> 可以說是整個專案樣版的靈魂部份，更多的訊息可以在 MSDN 找到，<br>  我只說明 <code>symbols</code> 節點的部份，它用來方置參數的訊息，所以需要建立一個自訂義的子節點，在這裡我命名為 <code>pluginName</code>，同時指定他的 type 為 parameter，<br>  透過設定 <code>defaultValue</code> 給予預設值，最後將 <code>fileRename</code> 指定為 <code>F-plugin-name</code>，    將 <code>(C-plugin-name)</code> 指定為我的內容層級參數。</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"$schema"</span>: <span class="string">"http://json.schemastore.org/template"</span>,</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">"MarkLin"</span>,</span><br><span class="line"><span class="attr">"classifications"</span>: [ <span class="string">"Common"</span>, <span class="string">"SDK"</span>, <span class="string">"C#8"</span> ],</span><br><span class="line"><span class="attr">"identity"</span>: <span class="string">"Marsen.Blog.Plugin.Template"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Marsen Blog Plugin Template"</span>,</span><br><span class="line"><span class="attr">"shortName"</span>: <span class="string">"mbp"</span>,</span><br><span class="line"><span class="attr">"tags"</span>: &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"project"</span></span><br><span class="line">&#125;,  </span><br><span class="line"><span class="attr">"preferNameDirectory"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"symbols"</span>:&#123;</span><br><span class="line">    <span class="attr">"pluginName"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"parameter"</span>,</span><br><span class="line">    <span class="attr">"defaultValue"</span>: <span class="string">"Demo"</span>,</span><br><span class="line">    <span class="attr">"fileRename"</span>: <span class="string">"F-plugin-name"</span>,</span><br><span class="line">    <span class="attr">"replaces"</span>:<span class="string">"(C-plugin-name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CLI強化，在<code>.template.config</code> 建立 <code>dotnetcli.host.json</code><br> 這個檔案建立的目的，是為了讓我接下來使用 CLI 建立專案時能夠指定傳入的參數。<br> 這裡需指定 <code>template.json</code> 中的 symbol 並設定</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"symbolInfo"</span>: &#123;</span><br><span class="line">      <span class="attr">"pluginName"</span>: &#123;</span><br><span class="line">          <span class="attr">"longName"</span>: <span class="string">"pluginName"</span>,</span><br><span class="line">          <span class="attr">"shortName"</span>: <span class="string">"p"</span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>執行 <code>dotnet new i</code> 註冊樣版<br> 執行命令前請確定所在位置包含<code>.template.config</code> 資料夾與相關的檔案</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new -i ./</span><br></pre></td></tr></table></figure></li><li><p>執行 <code>dotnet new -u</code> 查詢樣版列表資訊確認安裝已完成</p></li><li><p>應用</p><p> 在想建立專案的資料夾底下執行 <code>dotnet new &lt;template_name&gt;</code> 語法,<br> 並且可以透過 CLI 指定參數，我並沒有研究 GUI 的操作，有興趣的人請自行研究，<br> 如果能分享給我就不勝感激。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mbp -p Marsen2</span><br></pre></td></tr></table></figure></li><li><p>展示  </p></li></ol><div class="video-container"><iframe src="//www.youtube.com/embed/RA_lHoa5uuI" frameborder="0" allowfullscreen></iframe></div><p>我把這個例子放在 <a href="https://github.com/marsen/dotnet.core.project.template.sample" target="_blank" rel="noopener">Github</a> 上，有興趣的朋友可以試試看。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="移除專案樣板-SOP"><a href="#移除專案樣板-SOP" class="headerlink" title="移除專案樣板 SOP"></a>移除專案樣板 SOP</h3><ol><li>執行 <code>dotnet new -u</code> 查詢樣版列表資訊，可以查到專案樣版的絕對路徑</li><li>執行 <code>dotnet new -u &lt;ABSOLUTE_FILE_SYSTEM_DIRECTORY&gt;</code></li></ol><h3 id="更新專案樣版"><a href="#更新專案樣版" class="headerlink" title="更新專案樣版"></a>更新專案樣版</h3><p>直接進入專案樣版的絕對路徑</p><h3 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h3><p>略…</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/dotnet.core.project.template.sample" target="_blank" rel="noopener">我的範例</a></li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-item-template" target="_blank" rel="noopener">教學課程：建立項目範本</a></li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-project-template" target="_blank" rel="noopener">教學課程：建立專案範本</a></li><li><a href="https://github.com/dotnet/dotnet-template-samples" target="_blank" rel="noopener">dotnet/dotnet-template-samples</a></li><li><a href="https://www.jerriepelser.com/blog/tips-for-developing-dotnet-new-templates/" target="_blank" rel="noopener">Tips for developing templates for dotnet new</a></li><li><a href="http://json.schemastore.org/template" target="_blank" rel="noopener">JSON 結構描述保存區的 template.json 結構描述</a></li><li><a href="https://github.com/dotnet/templating/issues/1238" target="_blank" rel="noopener">How to name (or rename) files based on a parameter? · Issue #1238 · dotnet/templating</a></li><li><a href="https://www.jerriepelser.com/blog/tips-for-developing-dotnet-new-templates/" target="_blank" rel="noopener">Tips for developing templates for dotnet new</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;p&gt;這篇是實作的紀錄，大部份資源都參考至 MSDN 線上文件&lt;br&gt;那裡會有更新更完整的文件支援。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] AWS Auto Scaling Group</title>
    <link href="https://blog.marsen.me/2019/08/25/2019/aws_auto_sacling_group/"/>
    <id>https://blog.marsen.me/2019/08/25/2019/aws_auto_sacling_group/</id>
    <published>2019-08-25T03:21:46.000Z</published>
    <updated>2019-08-25T19:13:40.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近將一個服務掛上雲端(AWS)，使用 EC2 ，<br>並且實作了 Auto Scaling ，特別紀錄一下。</p><h2 id="概觀"><a href="#概觀" class="headerlink" title="概觀"></a>概觀</h2><p>以下使用的都是 AWS 的服務</p><ol><li><p>Auto Scaling Group (ASG) :<br> 本篇主角，根據指定的 Policies 與 LC 加開減少機器。</p></li><li><p>Launch Configuration (LC) :<br> 一個 ASG 背後一定要搭配一個 LC，可以說是 ASG 的生命共同體，<br> 用來指定 EC2 的配置，並透過 <code>User Data</code> 指定實體起動時所需要執行的工作。<br> 註: 也有使用 Launch Template 的作法，這篇不會討論。</p></li><li><p>Target Group (TG):<br> 由 1 到多個 EC2 實體(instance)組成，用來與 ELB(ALB) 搭配。</p></li><li><p>ALB :<br> 流量負載平衡，與 TG 作為搭配。可以依不同條件轉導到不同 TG</p></li></ol><p><img src="/images/2019/8/aws_asg_overview.jpg" alt="Auto Scaling Group"></p><h3 id="組合零件"><a href="#組合零件" class="headerlink" title="組合零件"></a>組合零件</h3><p>這有點像是在玩模型玩具，各個部份的小零件可以組成一個大零件，<br>再將各個部件結合，完成我所要的功能。<br>以下是這所需要的各個零件</p><ul><li>Golden Image : 由實際的 EC2 Instance 建立。並包含 Cloud Watch Agent 的配置。</li><li>User Data : Lanuch Configuration 的一個子項目，可以在 EC2 啟動時，執行指定的命令，比如說在 WINDOWS 透過 Powershell 抓取新版程式來建置服務。</li><li>Launch Configuration : 由上述兩個零件 (Gloden Image &amp; User Data) 組成，另外還可以設定 EBS、Plocies 等設定…</li><li>Target Group : 用來存放相關實體(EC2 Instance)的抽象概念, 可以設定 Health Check 來確定實體的健康情況。</li><li>Auto Scaling Group : 透過 Lanuch Configuration 來建立實體，並且可以將實體放入指定的 Target Group 之中。並且可以設定 Policy 來實現 Scaling Out/In.</li><li>ALB : 負載平衡的一種，透過設定，可以將 Request 導到對應的 Target Group。</li></ul><h2 id="紀錄"><a href="#紀錄" class="headerlink" title="紀錄"></a>紀錄</h2><h3 id="Add-CloudWatch-Agent"><a href="#Add-CloudWatch-Agent" class="headerlink" title="Add CloudWatch Agent"></a>Add CloudWatch Agent</h3><ol><li><p>Login EC2 Instance</p></li><li><p>安裝 CloudWatch Agent</p></li><li><p>準備一個 Json 檔如下</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line"><span class="attr">"agent"</span>:&#123;  </span><br><span class="line">    <span class="attr">"logfile"</span>:<span class="string">"c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"logs"</span>:&#123;  </span><br><span class="line">    <span class="attr">"logs_collected"</span>:&#123;  </span><br><span class="line">        <span class="attr">"files"</span>:&#123;  </span><br><span class="line">            <span class="attr">"collect_list"</span>:[  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="attr">"file_path"</span>:<span class="string">"D:\\logs\\**.log"</span>,</span><br><span class="line">                <span class="attr">"log_group_name"</span>:<span class="string">"/MY/Service/Worker"</span>,</span><br><span class="line">                <span class="attr">"log_stream_name"</span>:<span class="string">"&#123;instance_id&#125;"</span>,</span><br><span class="line">                <span class="attr">"timezone"</span>:<span class="string">"UTC"</span>,</span><br><span class="line">                <span class="attr">"timestamp_format"</span>:<span class="string">"%Y-%m-%dT%H:%M:%S"</span></span><br><span class="line">            &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"log_stream_name"</span>:<span class="string">"default-log-stream"</span>,</span><br><span class="line">    <span class="attr">"force_flush_interval"</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>開啟powershell，切換目錄至 AmazonCloudWatchAgent</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"C:\Program Files\Amazon\AmazonCloudWatchAgent"</span></span><br></pre></td></tr></table></figure></li><li><p>執行以下語法</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:yourjsonfile.json -s</span><br></pre></td></tr></table></figure></li></ol><h3 id="站台加入-Health-Check"><a href="#站台加入-Health-Check" class="headerlink" title="站台加入 Health Check"></a>站台加入 Health Check</h3><ul><li>加入靜態檔案(ex:check.html)</li><li>IIS Building * 80<br><img src="/images/2019/8/aws_iissetting.jpg" alt="IIS Building * 80"></li><li>設定 Target Group 的 Health Check (ex:/check.html)<br><img src="/images/2019/8/aws_tg_healthcheck.jpg" alt="AWS Target Gropu Health Check"></li></ul><h3 id="包成-Gloden-Image"><a href="#包成-Gloden-Image" class="headerlink" title="包成 Gloden Image"></a>包成 Gloden Image</h3><ol><li><p>機器下 ALB</p><p> <img src="/images/2019/8/aws_gi_out_alb.jpg" alt="機器下ALB"></p></li><li><p>開啟 Ec2LaunchSettings.exe</p><p> <img src="/images/2019/8/aws_ec2_launch_settings.jpg" alt="開啟 Ec2LaunchSettings.exe"></p></li><li><p>透過 Ec2LaunchSettings 關機</p><p> <img src="/images/2019/8/aws_ec2_launch_settings_turn_off.jpg" alt="透過 Ec2LaunchSettings 關機"></p></li><li><p>Waitting Instance Stoped , Create Images</p><p> <img src="/images/2019/8/aws_gi_create_images.jpg" alt="Waitting Instance Stoped , Create Images"></p></li></ol><h3 id="Create-Launch-Configuration"><a href="#Create-Launch-Configuration" class="headerlink" title="Create Launch Configuration"></a>Create Launch Configuration</h3><p><img src="/images/2019/8/aws_create_lc.jpg" alt="Create Launch Configuration"></p><ol><li>Choose AMI<br> <img src="/images/2019/8/aws_choose_ami.jpg" alt="Choose Gloden Image"></li><li>Choose Instance Type<br> <img src="/images/2019/8/aws_choose_instance_type.jpg" alt="t2.small"></li><li>Configure details<br> <img src="/images/2019/8/aws_userdata.jpg" alt="Add User Data"></li><li>Add Storage<br> <img src="/images/2019/8/aws_ebs.jpg" alt="Set EBS"></li><li>Configure Security Group</li><li>Review</li></ol><h3 id="Create-Auto-Scaling-group"><a href="#Create-Auto-Scaling-group" class="headerlink" title="Create Auto Scaling group"></a>Create Auto Scaling group</h3><ol><li>Configure Auto Scaling group details<br> <img src="/images/2019/8/aws_create_asg.jpg" alt="Configure Auto Scaling group details"></li><li>Configure scaling policies<blockquote><p>略</p></blockquote></li><li>Configure Notifications<blockquote><p>略</p></blockquote></li><li>Configure Tags<blockquote><p>略</p></blockquote></li><li>Review</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.aws.amazon.com/zh_tw/autoscaling/ec2/userguide/create-asg-from-instance.html" target="_blank" rel="noopener">使用 EC2 執行個體建立 Auto Scaling 群組 - Amazon EC2 Auto Scaling</a></li><li><a href="https://docs.aws.amazon.com/en_us/autoscaling/ec2/userguide/LaunchConfiguration.html" target="_blank" rel="noopener">Launch Configurations - Amazon EC2 Auto Scaling</a></li><li><a href="https://aws.amazon.com/cn/blogs/china/aws-alb-route-distribute/" target="_blank" rel="noopener">使用AWS Application Load Balancer</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/elasticloadbalancing/latest/network/load-balancer-target-groups.html" target="_blank" rel="noopener">Network Load Balancers 的目標群組</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/elasticloadbalancing/latest/network/create-target-group.html" target="_blank" rel="noopener">為 Network Load Balancer 建立目標群組</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudWatch/latest/logs/QuickStartWindows2016.html#configure_cwl_download" target="_blank" rel="noopener">CloudWatch Logs</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html" target="_blank" rel="noopener">使用 CloudWatch 代理程式從 Amazon EC2 執行個體和現場部署伺服器收集指標和日誌 - Amazon CloudWatch</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近將一個服務掛上雲端(AWS)，使用 EC2 ，&lt;br&gt;並且實作了 Auto Scaling ，特別紀錄一下。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="AWS" scheme="https://blog.marsen.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] CPAU 加密仿登入</title>
    <link href="https://blog.marsen.me/2019/08/20/2019/cpau/"/>
    <id>https://blog.marsen.me/2019/08/20/2019/cpau/</id>
    <published>2019-08-20T02:46:10.000Z</published>
    <updated>2019-08-20T04:10:28.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>登入 SQL Server 需要受到權限管控，<br>而在 Windows 中需要使用特定用戶身份登入時，<br>我們常常會選擇 runas 命令。  </p><p>大概類似如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas.exe /netnoly /user:MyCompany\Marsen <span class="string">"C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\Ssms.exe"</span></span><br></pre></td></tr></table></figure><p>我會寫成一個 ps (PowerShell) File 來執行這件事。<br>但是會有一些問題。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ol><li>每次登入都輸入密碼好麻煩</li><li>密碼很長又複雜，Terminal 又看不出輸入是否正確，常常會打錯</li><li>密碼如果寫在 PowerShell 中會有風險</li></ol><p>我希望點兩下就能以正確的身份開啟 SSMS 而且密碼不會被明碼存儲</p><h2 id="CPAU"><a href="#CPAU" class="headerlink" title="CPAU"></a>CPAU</h2><ol><li><p>請先下載<a href="https://www.joeware.net/freetools/tools/cpau/" target="_blank" rel="noopener">CPAU</a>\</p><ul><li>我採用綠色安裝，如果有必要可以設為環境變數</li></ul></li><li><p>準備好 PowerShell 檔,並命名為 dblogin.ps1</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas.exe /netnoly /user:MyCompany\Marsen <span class="string">"C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\Ssms.exe"</span></span><br></pre></td></tr></table></figure></li><li><p>加密,以下的語法會產生以 <code>MyCompany\Marsen</code> 的身份登入執行 SSMS 的批次檔 <code>run.bat</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPAU -u MyCompany\marsen -p *************** -ex <span class="string">"C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\Ssms.exe"</span> -enc -file D:\run.bat</span><br></pre></td></tr></table></figure></li><li><p>解密</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPAU -file D:\run.bat -dec</span><br></pre></td></tr></table></figure></li></ol><p>最後只要將步驟 4 的語法存成一個 bat 檔，就可以隨時點兩下執行了。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v%3Dws.11)" target="_blank" rel="noopener">Runas</a></li><li><a href="https://www.joeware.net/freetools/tools/cpau/" target="_blank" rel="noopener">CPAU</a></li><li><a href="https://blog.xuite.net/billchu1109/wretch/142970080-Rusas%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88CPAU" target="_blank" rel="noopener">Rusas的替代方案CPAU</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;登入 SQL Server 需要受到權限管控，&lt;br&gt;而在 Windows 中需要使用特定用戶身份登入時，&lt;br&gt;我們常常會
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 執行力的修練</title>
    <link href="https://blog.marsen.me/2019/08/10/2019/book/the_4_disciplines_of_execution/"/>
    <id>https://blog.marsen.me/2019/08/10/2019/book/the_4_disciplines_of_execution/</id>
    <published>2019-08-09T19:10:15.000Z</published>
    <updated>2019-08-09T19:19:26.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="與成功有約的四個實踐原則"><a href="#與成功有約的四個實踐原則" class="headerlink" title="與成功有約的四個實踐原則"></a>與成功有約的四個實踐原則</h2><p><img src="https://i.imgur.com/RyowM2h.jpg" alt="四個實踐原則"></p><h2 id="紀律一、鎖定極重要目標"><a href="#紀律一、鎖定極重要目標" class="headerlink" title="紀律一、鎖定極重要目標"></a>紀律一、鎖定極重要目標</h2><p>80 % 用來維持改進日常工作，<br>20% 的時間與心力投入能帶來影響的目標，<br>尋找與使命有更直接關連的目標。  </p><h3 id="法則"><a href="#法則" class="headerlink" title="法則"></a>法則</h3><ol><li>不能聚焦顧於兩個以上的極重要目標</li><li>選擇能幫助打贏戰爭(高層次)的戰役(低層次)</li><li>高階領導人可以否決，但不能命令(賦予所有權與參與感)</li><li>設定「在何時之前從X到Y」的終點線</li></ol><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ol><li>在我們營運的其它部份保持目前績效的前提下，哪一部份的改變能帶來最大的影響 ?</li><li>為了在這場戰爭中取勝，至少一定要打贏哪些戰役 ?</li></ol><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><blockquote><p>影響地圖 ?<br>OKR</p></blockquote><h2 id="紀律二、從領先指標下手"><a href="#紀律二、從領先指標下手" class="headerlink" title="紀律二、從領先指標下手"></a>紀律二、從領先指標下手</h2><p>領先指標的特徵  </p><ol><li>具有預測作用</li><li>團隊有能力影響它</li><li>領先指標可能是違反直覺的</li></ol><p>找到槓桿(領先指標)的支點<br><img src="https://i.imgur.com/DyfN3F5.jpg" alt="領先指標"></p><h2 id="紀律三、設置醒目計分板"><a href="#紀律三、設置醒目計分板" class="headerlink" title="紀律三、設置醒目計分板"></a>紀律三、設置醒目計分板</h2><ul><li>優秀的團隊隨時知道自已是屬於領先還是落後。</li><li>制定一個屬於「隊員」的計分板<ul><li>必須簡單</li><li>必須顯而易見</li><li>同時揭露領先與落後指標</li><li>知道正在贏或輸</li></ul></li><li>賽局本身比計分板重要<ul><li>求「勝」而非求「不敗」</li></ul></li></ul><h3 id="反思-1"><a href="#反思-1" class="headerlink" title="反思"></a>反思</h3><ul><li>看板</li><li>Burn Down/Up Chart</li><li>電子看板的便利，實體看版的可視性</li></ul><h2 id="紀律四、落實當責"><a href="#紀律四、落實當責" class="headerlink" title="紀律四、落實當責"></a>紀律四、落實當責</h2><p>為了把績效得分往前推進而向整個團隊作出承諾，並以有紀律的方式貫徹執行。  </p><ul><li>《爛工作的三個跡象》<ol><li>無人聞問</li><li>可有可無</li><li>無從評量</li></ol></li></ul><h3 id="原則"><a href="#原則" class="headerlink" title="原則"></a>原則</h3><ol><li>每周的同一時間開會</li><li>別讓日常事項進入會議</li></ol><h3 id="議程"><a href="#議程" class="headerlink" title="議程"></a>議程</h3><ol><li>報告:報告上次作出的承諾</li><li>檢討:從成功和失敗中學習</li><li>計畫:釐清並作出新承諾</li></ol><h3 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h3><ul><li>我可以作什麼會對領先指標有幫助 ?</li></ul><h3 id="反思-2"><a href="#反思-2" class="headerlink" title="反思"></a>反思</h3><ul><li>Scurm 四大會議的立會與 Retrospective</li></ul><h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><table><thead><tr><th>極重要目標構想</th><th>目前的成果(從X)</th><th>期望的成果(到Y)</th><th>期限(在何時之前)</th><th>排序</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>領先指標構想</th><th>如何評量</th><th>排序</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>領先指標 Check List</p><ul><li>是否從團隊成員及其他人蒐集了大量意見與建議 ?</li><li>是否有預測作用 ?</li><li>團隊能不能影響它 ?</li><li>它是不是可以被測量 ?</li><li>蒐集他的價值是否高於成本 ?</li><li>每個指標是否包含動詞 ?</li><li>是否可以量化 ?</li></ul><p>計分版主題</p><ol><li>趨勢線</li><li>速度計</li><li>長條圖</li><li>紅綠燈</li></ol><table><thead><tr><th>團隊極重要目標</th><th>落後指標</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>領先指標1</td><td>圖表</td></tr><tr><td></td><td></td></tr><tr><td>領先指標2</td><td>圖表</td></tr><tr><td></td><td></td></tr></tbody></table><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;與成功有約的四個實踐原則&quot;&gt;&lt;a href=&quot;#與成功有約的四個實踐原則&quot; class=&quot;headerlink&quot; title=&quot;與成功有約的四個實踐原則&quot;&gt;&lt;/a&gt;與成功有約的四個實踐原則&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/
      
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 學徒模式--優秀軟體開發者的養成之路</title>
    <link href="https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_patterns/"/>
    <id>https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_patterns/</id>
    <published>2019-08-06T18:06:15.000Z</published>
    <updated>2019-08-06T19:27:21.694Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019/8/apprenticeship_patterns.jpg" alt="送書啦"></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近公司來了幾個來自 Build School 的學員，<br>作為暑期工讀生，開發一些 Side Project ，<br>雖然工作很忙，不過我倒是對帶新人還蠻有信心的。  </p><p>這些小朋友問了一些問題，讓我想到自已剛畢業和剛從資策會出來的那時候。<br>有的問題很大，大到可能要一輩子都無法解決。<br>有的問題很小，小到聽了會笑，但對他們來說可能像是眼裡的一粒沙。  </p><p>我在學習的初期，最困難的問題是<strong>不知道怎麼問問題</strong>。  而過了一陣子後，我發現一個更糟的狀況，<strong>我不知道我有問題</strong>。  而這本書大致上解決了我的上述的兩個問題。</p><h2 id="為何選擇這本書"><a href="#為何選擇這本書" class="headerlink" title="為何選擇這本書?"></a>為何選擇這本書?</h2><p>非常好讀，你不需要從頭讀到尾。<br>首先是每個篇幅非常的短，大概只要 5~10 分鐘就能讀完。<br>再來是除了第一章外，每一大章都會有一個地圖，<br>讓你能看見全貌。  </p><h2 id="如何讀這本書"><a href="#如何讀這本書" class="headerlink" title="如何讀這本書"></a>如何讀這本書</h2><p>而每一篇都包含情境、問題、解決方案與參照，<br>情境與問題就像是這本書的 GPS ,<br>讓你知道你落在這本書的哪個點上 。<br>解決方案是通篇的主體，但是對我來說後面的行動更為重要，<br>我開始練習 Kata、寫 Blog、尋找導師大多是因這本書而開始的。  </p><p>最後，都會附上相關章節的參照。<br>這非常有幫助，原因是在這張地圖上，<br>你可能會同時落在幾個點上。<br>那麼地圖與參照就會非常有幫助，你可以查找地圖發現有關連的章節，<br>也可以直接透過參照找到其它章節。  </p><h2 id="會不會是雞湯文"><a href="#會不會是雞湯文" class="headerlink" title="會不會是雞湯文"></a>會不會是雞湯文</h2><p>會不會變成雞湯，其實取決於你自已。<br>書上的行動，你作了嗎 ?<br>如果不行動，就當作喝雞湯吧。  </p><h2 id="這本書的缺點"><a href="#這本書的缺點" class="headerlink" title="這本書的缺點"></a>這本書的缺點</h2><p>這本書強調的是如何成為一個工匠，<br>如何成為一個達人。<br>我知道的現實是，很多工程人員到了一定的程度就會轉換職務<br>如果你的目標是成為管理者，業務等…職務<br>我想這本書在幫助上可能會少一半。<br>畢竟這不是一本教你管理、銷售或領導的書。</p><h2 id="最後的-mur-mur"><a href="#最後的-mur-mur" class="headerlink" title="最後的 mur mur"></a>最後的 mur mur</h2><p>現實上的工匠真的很少，這不是條發大財的路。<br>走起來也很辛苦，不過這是個革命的時代，<br>各行各業都在與軟體產業發生衝突與融合，<br>如果能有更多優秀的工程師，我們就不需要工程師了。</p><blockquote><p>鍚將會扮演它的角色，直到這個世界不再需要鍚為止，<br>然後鍚就會變成金子。  —El Alquimista</p></blockquote><p>期許自已和看到這篇文章的你都能成為更好的工程師。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019/8/apprenticeship_patterns.jpg&quot; alt=&quot;送書啦&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情
      
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 第八個習慣 --- 從成功到卓越</title>
    <link href="https://blog.marsen.me/2019/08/04/2019/book/the_8th_habit_from_effectiveness_to_greatness/"/>
    <id>https://blog.marsen.me/2019/08/04/2019/book/the_8th_habit_from_effectiveness_to_greatness/</id>
    <published>2019-08-03T18:15:02.000Z</published>
    <updated>2019-08-03T19:14:13.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="找到自已內在的聲音"><a href="#找到自已內在的聲音" class="headerlink" title="找到自已內在的聲音"></a>找到自已內在的聲音</h2><p><img src="/images/2019/8/the_8th_habbit.jpg" alt="第八個習慣"></p><ul><li><p>small things listen to your head , big things listen to your heart</p></li><li><p>孟加拉微形貸款的反思</p><blockquote><p>讓 99% 的人生活更好，並賺取收入成為 1 % 富者</p></blockquote></li><li><p>Most ailing organisations have developed a functional blindness to their own defects. They are not suffering because they cannot resolve their problems, but because they cannot see their problems.  — John Gardner  → 看見全貌 — 李智樺(Rudy Lee)</p></li><li><p>願景和心聲是慢慢演化出來的…感覺到人類的某種需求，而且他們的<strong>良知</strong>的回應試圖滿足這些需求就會出現<strong>願景</strong>。</p></li><li><p>個人領導(發揮影響力)是一種選擇，是一種自已必須去贏得的<strong>自由</strong>——只有當你贏得之後，領導才會變成一種選擇。</p></li><li><p>3+1 的世界(Marsen Lin)</p></li></ul><table><thead><tr><th>Column</th><th>Core</th><th>First</th><th>Second</th><th>Third</th></tr></thead><tbody><tr><td>全人思維模式</td><td>心靈</td><td>心智</td><td>身體</td><td>情感</td></tr><tr><td>四種才能</td><td>SQ 精神</td><td>IQ 智力</td><td>PQ 身體</td><td>EQ 情感</td></tr><tr><td>人類四項基本需求</td><td>發揮影響力</td><td>學習</td><td>生活</td><td>愛</td></tr><tr><td>四種才能的最高表現</td><td>良知</td><td>願景</td><td>自律</td><td>熱情</td></tr><tr><td>四種才能的反模式</td><td>自我</td><td>受害者心理</td><td>放縱</td><td>淪為社會的鏡子</td></tr><tr><td>將人物化的管理</td><td>老闆</td><td>規定</td><td>效率</td><td>控制</td></tr><tr><td>領導的四項職責</td><td>以身作則</td><td>探索方向</td><td>整合體系</td><td>充份授權</td></tr><tr><td>四大管理措施</td><td>文化</td><td>策略</td><td>結構</td><td>執行</td></tr><tr><td>完整工作中的全人</td><td>服務</td><td>計畫</td><td>執行</td><td>評估</td></tr></tbody></table><ul><li>現況</li></ul><blockquote><p>報酬: 不公 / 一般 / 很好<br>尊重: 有 / 無<br>自主性: 有 / 無<br>意義: 有 / 無<br>愛 : 有 / 無</p></blockquote><ul><li><p>通往卓越的地圖 vs 選擇地圖</p><p>  <img src="/images/2019/8/the_8th_habbit_map.jpg" alt="通往卓越的地圖"></p><p>  <img src="/images/2019/8/qt_choice_map.jpg" alt="選擇地圖"></p></li><li><p>目的和手段是不可分的，目的實際存在於手段之中。</p></li><li><p>用於實現目的手段與目的同樣重要 — 康德</p></li><li><p>只要目的合理，用什麼樣的手段都是合理的。— 馬基維利</p></li><li><p>在刺激和回應之間有一段空間，我們有自由和能力選擇自已的回應</p><blockquote><p>聰明是一種天賦，而善良是一種選擇。</p></blockquote></li><li><p>所有事物都是經過兩次創造，一次是心智上的創造，一次是實際的創造</p></li></ul><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ul><li>我在家庭、社區、工作單位裡感受到什麼需求 ?</li><li>我是否擁有可以滿足這個需求的天賦才能 ?</li><li>滿足這個需求的機會是否能激起我的熱情 ?</li><li>我的良知是否在激勵我積極投入、採取行動 ?</li></ul><h2 id="激勵他人尋找內在的聲音"><a href="#激勵他人尋找內在的聲音" class="headerlink" title="激勵他人尋找內在的聲音"></a>激勵他人尋找內在的聲音</h2><ul><li>領導是一種如何充份授權的藝術。</li><li>對人充份授權，對物進行管理與控制</li><li>工業時代的管理，老闆/規定/效率/控制</li></ul><h3 id="七、以身作則"><a href="#七、以身作則" class="headerlink" title="七、以身作則"></a>七、以身作則</h3><ul><li>不論什麼時候，如果你認為問題在別人身上，那麼這個想法本身就有問題。</li><li>主動，是自我授權的一種形式</li><li>有的時候，在某些文化中，得到原諒比得到批准來得容易</li><li>7種自我授權<ol><li>坐等吩附</li><li>詢問</li><li>提出建議</li><li>我想做</li><li>執行並立刻報告</li><li>執行後定期報告</li><li>只管去做</li></ol></li><li>做一個燈塔，不要當法管; 作一個榜樣，不要當批評家。</li></ul><h3 id="八、成為表率"><a href="#八、成為表率" class="headerlink" title="八、成為表率"></a>八、成為表率</h3><ul><li><p>七個習慣</p><ul><li>主動積極</li><li>以終為始</li><li>要事第一</li><li>雙贏思維</li><li>知彼解已</li><li>統合綜效</li><li>不斷更新</li></ul></li><li><p>有系統的個人計劃</p><ul><li>「確定任務與價值」</li><li>願景和價值觀<ol><li>每日計劃</li><li>每周計劃</li><li>設定目標</li><li>確定任務和價值</li></ol></li></ul></li></ul><h3 id="九、贏得信任"><a href="#九、贏得信任" class="headerlink" title="九、贏得信任"></a>九、贏得信任</h3><ul><li><p>儲蓄</p><ol><li>先努力理解他人</li><li>信守承諾</li><li>誠實、開誠布公</li><li>和善、有禮</li><li>雙贏或無交易的思維方式</li><li>明確的期望</li><li>對不在場者保持忠誠</li><li>道歉</li><li>接受回饋意見</li><li>寬恕</li></ol></li><li><p>支出</p><ol><li>先求被他人理解</li><li>破壞承諾</li><li>圓滑的操縱</li><li>冷漠、無禮</li><li>我贏你輸或我輸你贏的思維方式</li><li>破壞期望</li><li>不忠誠、欺騙</li><li>驕傲、自負、傲慢</li><li>不接受回饋意見</li><li>心懷怨恨</li></ol></li><li><p>必要的犧牲</p><ol><li>不耐煩、自我中心</li><li>情緒、感情、時間</li><li>自我中心、傲慢、控制</li><li>自我、時間、感覺、成見、偏見</li><li>勝者為王、競爭意識</li><li>蜻蜓點水式的交流</li><li>某些社會認可、祕而不宣</li><li>自我、傲慢、驕傲、時間</li><li>自我、傲慢、驕傲、起反作用的溝通</li><li>驕傲、自我中心</li></ol></li><li><p>內在原則</p><ol><li>相互了解</li><li>完整／執行</li><li>遠見／價值觀、統一／執行、相互了解</li><li>遠見／價值觀、完整／執行</li><li>相互尊重／互惠</li><li>相互尊重／互惠、相互了解、創造性合作、更新</li><li>遠見／價值觀、完整／執行</li><li>遠見／價值觀、完整／執行</li><li>相互了解</li><li>遠見／價值觀、統一／執行</li></ol></li><li><p>真正的付出，必須是對方願意接受的東西</p></li><li><p>說謊是將問題推給未來，誠實則是將問題留給過去</p></li><li><p>成年人只是大孩子而已</p></li><li><p>你如何看待我的角色與目標 ?　你如何看待自已的角色與目標 ?</p></li><li><p>我們自已選擇什麼樣的回應方式，是決定生活的關鍵因素</p></li><li><p>信任和愛一樣</p><ul><li>愛是一個動詞，而愛情是愛的結果</li><li>讓自已的情感服從價值</li><li>信任需要冒險、磨練， 沒有風險是最大的冒險</li></ul></li><li><p>個人層次</p><ul><li>態度積極的好榜樣。</li><li>不要抱怨、比較、批評、競爭和爭鬥。</li><li>作一個燈塔式的人物，而不要作法官式的人，作一個榜樣而不要作批評家</li><li>無力改變所有的事情(別人)時，改變自已</li></ul></li><li><p>人們需感覺自已被欣賞，需要感覺到自已所從事的工作是有價值的</p></li></ul><h3 id="十-融合心聲"><a href="#十-融合心聲" class="headerlink" title="十 融合心聲"></a>十 融合心聲</h3><ul><li>雙贏思維只要有一方願意改變就可以了</li></ul><p>改變得從願意改變的那個人開始 — 改變提問，改變人生</p><ul><li><p>傾聽的連續性</p><ol><li>忽略</li><li>假裝在聽</li><li>選擇性傾聽</li><li>專心傾聽</li><li>以同理心傾聽 (以對方的框架思考)</li></ol></li><li><p>解決方案</p><ol><li>你輸我贏/你贏我輸 [交易]</li><li>妥協 [交易]</li><li>相互了解(沒有共識) [轉變]</li><li>你輸我贏/你贏我輸(增加了解與關心) [轉變]</li><li>妥協(在關係上取得統合綜效) [轉變]</li><li>在問題和關係上取得統合綜效 [轉變]</li></ol></li><li><p>人們會看到同樣的事實，但是以個人的經驗加上不同的解釋，創造意義並產生行為</p></li><li><p>一但你有了身分上的權利，你會認定只有一個答案是對的，自我愈強烈，愈固執，愈僵化。</p></li><li><p>沉默是必要的，問一個問題「說出自已的真正想法，會比沉默好嗎 ?」</p></li><li><p>兩個步驟</p><ol><li>問「是否願意尋求一種比雙方的方法更好的解決方案 ?」</li><li>覆述對方的意見直到對方認可，確定你真正理解他的意思。</li></ol></li><li><p>第三選擇不一定是第三個方案，而是心態上真正的理解對方，而非妥協</p></li><li><p>領導是一種選擇，而非一種職位</p></li><li><p>與人和文化有關時，快就是慢，慢就是快</p></li></ul><h3 id="十一-同心協力"><a href="#十一-同心協力" class="headerlink" title="十一 同心協力"></a>十一 同心協力</h3><p>問題</p><ol><li>你清楚了解組織的目標嗎 ?</li><li>你對組織忠誠奉獻嗎 ?</li></ol><p>四個現實問題</p><ol><li>市場狀況</li><li>核心競爭力</li><li>利益關系人的期望與所需</li><li>價值觀</li></ol><p>刺蝟概念</p><ol><li>你真正的專長是什麼 ?</li><li>你對什麼事充滿熱情 ?</li><li>人們會對什麼掏腰包 ?</li></ol><ul><li>你的良知期望怎麼作 ?</li></ul><h3 id="十二-整合體系"><a href="#十二-整合體系" class="headerlink" title="十二 整合體系"></a>十二 整合體系</h3><p>問題</p><ul><li>你是怎麼想的 ?</li><li>成長過程中，你最喜歡做什麼 ? 有什麼優秀的表現 ?</li></ul><blockquote><p>持續整合不只是工程的事，而是整個組織與公司的事。</p></blockquote><h3 id="十三-充分授權"><a href="#十三-充分授權" class="headerlink" title="十三 充分授權"></a>十三 充分授權</h3><ul><li>透過目標與責任以達到預期結果。</li><li>若以授權的名義放任員工，自律也無法實現。</li><li>The Doctrine of Stubborn refusal — 出於良知</li><li>服務型的領導人的問題<ul><li>工作進度如何 ? 依據看板</li><li>你正在學習什麼 ?</li><li>你的目標是什麼 ?</li><li>我能幫你作什麼 ?</li><li>作為一個幫助者，我表現得如何 ?</li></ul></li><li>選擇的自由與能力<ul><li>領導<ul><li>意義 : 創造性刺激</li><li>愛 :  真心誠意的保證</li><li>職責: 愉快的合作</li></ul></li><li>管理<ul><li>獎勵 : 自願服從</li><li>恐懼 : 願意服從</li><li>憤怒 : 反抗或退出</li></ul></li></ul></li><li>為不同意見保留一席之地，建立回饋機制讓他理解別人的感受。</li></ul><p>問題</p><ul><li>誰喜歡現在的方式 ?</li><li>誰可以作 ?  誰有能力作 ?  誰有責任作 ?</li><li>真正的考驗是改變能不能持久 ? → 回顧與重溫約定。(類似 Retrospective)</li><li>你的建議是什麼 ? 你們的意見是什麼 ?</li><li>知而不行，是為不知</li><li>你所知道的東西 還不足以讓你提出合適的問題</li></ul><p>參考</p><ul><li><a href="https://www.franklincovey.com/the-7-habits.html" target="_blank" rel="noopener">https://www.franklincovey.com/the-7-habits.html</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;找到自已內在的聲音&quot;&gt;&lt;a href=&quot;#找到自已內在的聲音&quot; class=&quot;headerlink&quot; title=&quot;找到自已內在的聲音&quot;&gt;&lt;/a&gt;找到自已內在的聲音&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/2019/8/the_8th_habbit.jp
      
    
    </summary>
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[學習筆記] 重構使用 Introduce Variable for Substring</title>
    <link href="https://blog.marsen.me/2019/07/09/2019/introduce_variable_for_substring/"/>
    <id>https://blog.marsen.me/2019/07/09/2019/introduce_variable_for_substring/</id>
    <published>2019-07-09T12:02:13.000Z</published>
    <updated>2019-07-13T03:45:31.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><ul><li>這是個人的學習記錄</li><li>可能對你沒幫助</li><li>不知不知最可怕。快不起來,因為你不覺得慢</li><li>希望對你有幫助</li><li>使用 Visual Studio &amp; ReSharper</li></ul><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><blockquote><p>把原本的程式<br>string url = “<a href="http://localhost:5000/api/v3.3/refund/PayPal/SF188964T&quot;" target="_blank" rel="noopener">http://localhost:5000/api/v3.3/refund/PayPal/SF188964T&quot;</a></p><p>變成下面這樣</p><p>string domain = “<a href="http://localhost:5000&quot;;" target="_blank" rel="noopener">http://localhost:5000&quot;;</a><br>string code = “SF188964T”;<br>string payType = “PayPal”;<br>string url = $”{domain}/api/refund/{payType}/{code}”;  </p><p>你會怎麼作 ?</p></blockquote><p>我原本的作法，一個字一個挖出來，命名變數，再填回去。</p><p><strong>怎麼作可以更快 ?</strong></p><p>透過 Resharper 的 Refactor &gt; Introduce Variable &gt; Introduce Variable for Substring 即可快速重構。</p><p>參考 91 的影片</p><div class="video-container"><iframe src="//www.youtube.com/embed/Nqz8qapjjz4" frameborder="0" allowfullscreen></iframe></div><p>我實測原本的開發時間約為2~3分鐘，善用工具約可以在 30 ~ 45 s 完成。<br>效能提昇 400 % !!!!!(聽起來就很威)</p><div class="video-container"><iframe src="//www.youtube.com/embed/C9jLXrh3LRg" frameborder="0" allowfullscreen></iframe></div><p>當然結合了 Vim 與 Visual Studio 的工具才達到這樣的速度，強烈推薦以下課程。</p><h2 id="我只推薦好東西"><a href="#我只推薦好東西" class="headerlink" title="我只推薦好東西"></a>我只推薦好東西</h2><p><a href="https://dotblogs.com.tw/hatelove/2019/06/17/extreme-developing-training-202002" target="_blank" rel="noopener">【極速開發+】 202002 第九梯次 台北</a></p><h3 id="課程優點"><a href="#課程優點" class="headerlink" title="課程優點"></a>課程優點</h3><ol><li>學心法也學作法，不是只有理論的打高空</li><li>認識同好 ，來上課的同學都是願意精進自已的人，所以身上有很多寶可以挖</li><li>認識 91 ，遇到 91 盡量挖就對了，偷到一招半式都完勝 10 年在那邊處理 NullReferenceException</li><li>學習怎麼學習</li></ol><h2 id="其它本周學習事項"><a href="#其它本周學習事項" class="headerlink" title="其它本周學習事項"></a>其它本周學習事項</h2><ol><li>可以讓中斷點停留在 lambda express 中</li><li>MSTest 請用 DescriptionAttribute 加入測試描述</li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/api/system.web.ui.webcontrols.boundfield.convertemptystringtonull?view=netframework-4.8" target="_blank" rel="noopener">.Net MVC Model Binding 若欄位為空字串預設為轉為 Null</a></li></ol><h2 id="本周待確認事項"><a href="#本周待確認事項" class="headerlink" title="本周待確認事項"></a>本周待確認事項</h2><ol><li>如何對 HttpClient 測試 ?</li><li>如何用 <a href="https://fluentvalidation.net/testing" target="_blank" rel="noopener">FluentValidation</a> 作測試 ?</li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是個人的學習記錄&lt;/li&gt;
&lt;li&gt;可能對你沒幫助&lt;/li&gt;
&lt;li&gt;不知不知最可怕。快不起來,因為你
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] Stripe 串接</title>
    <link href="https://blog.marsen.me/2019/06/17/2019/stripe_payment/"/>
    <id>https://blog.marsen.me/2019/06/17/2019/stripe_payment/</id>
    <published>2019-06-17T04:56:17.000Z</published>
    <updated>2019-06-18T01:57:16.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><ul><li>Stripe 簡介</li><li>註冊</li><li>付款</li></ul><h2 id="Stripe-簡介"><a href="#Stripe-簡介" class="headerlink" title="Stripe 簡介"></a>Stripe 簡介</h2><blockquote><p>Stripe是一家提供讓個人或公司在網際網路上接受付款服務的科技公司。<br>Stripe提供在網上接受付款所需的技術、避免信用卡詐騙技術及銀行基礎設施  </p></blockquote><p>– 引述自 Wiki</p><blockquote><p>Our mission is to increase<br>the GDP of the internet  </p></blockquote><p>– 引述自 Stripe 官網</p><p>業務範圍大多為歐美，亞洲方面支援香港、新加坡與日本等國…</p><h2 id="註冊"><a href="#註冊" class="headerlink" title="註冊"></a>註冊</h2><p>只需要透過信箱即可<a href="https://dashboard.stripe.com/register" target="_blank" rel="noopener">註冊</a>，  註冊後需要到信箱收取確認信以開通帳戶，<br>如果真的要在線上使用需要提供公司相關的資訊，<br>但以開發者而言，此時的 Stripe 已經提供一組測試 api 供你使用，<br>隨後即可以登入後台操作。<br><strong>請在 Dashboard 的左邊側欄&gt;開發者&gt;API 密鑰，取得Secret key</strong> ，<br>在後面呼叫 API 中都會使用這組 Secret Key 請特別留意。</p><h2 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h2><p>這裡只介紹 Stripe 信用卡的付款方法，<br>並根據 <a href="https://stripe.com/doc" target="_blank" rel="noopener">Stripe 文件</a>整理一些資訊給大家。  </p><p>如下圖，這是一個標準的 Stripe 結帳流程，<br><img src="/images/2019/6/01-overview.png" alt="stripe overview"></p><p>主要的兩個步驟在 <code>Create Source</code> 與 <code>Create Charge</code> ，<br>這裡會透過呼叫 <a href="https://stripe.com/docs/api" target="_blank" rel="noopener">Stripe API</a> 以完成付款流程。  </p><p>下面會介紹幾種信用卡的付款方式， 僅供參考，實際作業請以最新的 Stripe 文件為準。<br>過程中如有呼叫 API 都會用 curl 帶過，<br>Secret Key 一律以 <code>sk</code> 表示， Public Key 以 <code>pk</code> 表示<br>Stripe 有提供多種語言的範例或是提供 SDK 或 Libary， 請親自去看它們的文件囉。</p><h3 id="使用-Checkout-Session"><a href="#使用-Checkout-Session" class="headerlink" title="使用 Checkout Session"></a>使用 Checkout Session</h3><h4 id="Step-1-建立-Session"><a href="#Step-1-建立-Session" class="headerlink" title="Step 1. 建立 Session"></a>Step 1. 建立 Session</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/checkout/sessions \</span><br><span class="line">  -u sk_test_dAa6L6BL4gZDuscgJcl3an8K00aJL2yIaW: \</span><br><span class="line">  -d payment_method_types[]=card \</span><br><span class="line">  -d line_items[][name]=T-shirt \</span><br><span class="line">  -d line_items[][description]=<span class="string">"Comfortable cotton t-shirt"</span> \</span><br><span class="line">  -d line_items[][images][]=<span class="string">"https://example.com/t-shirt.png"</span> \</span><br><span class="line">  -d line_items[][amount]=500 \</span><br><span class="line">  -d line_items[][currency]=hkd \</span><br><span class="line">  -d line_items[][quantity]=1 \</span><br><span class="line">  -d success_url=<span class="string">"https://example.com/success"</span> \</span><br><span class="line">  -d cancel_url=<span class="string">"https://example.com/cancel"</span></span><br></pre></td></tr></table></figure><h4 id="Step-2-建立-CheckOut-頁面"><a href="#Step-2-建立-CheckOut-頁面" class="headerlink" title="Step 2. 建立 CheckOut 頁面"></a>Step 2. 建立 CheckOut 頁面</h4><p>Step 1 會取得一組 session_id ，請填入頁面中的<code>{session_id}</code>，<code>pk</code> 請填入 <code>public key</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://js.stripe.com/v3/"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> stripe = Stripe(<span class="string">'pk'</span>);</span></span><br><span class="line"><span class="undefined">stripe.redirectToCheckout(&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// Make the id field from the Checkout Session creation API response</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// available to this file， so you can provide it as parameter here</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// instead of the &#123;&#123;CHECKOUT_SESSION_ID&#125;&#125; placeholder.</span></span></span><br><span class="line"><span class="javascript">  sessionId: <span class="string">'&#123;session_id&#125;'</span></span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// If `redirectToCheckout` fails due to a browser or network</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// error， display the localized error message to your customer</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// using `result.error.message`.</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Step-3-載入頁面"><a href="#Step-3-載入頁面" class="headerlink" title="Step 3. 載入頁面"></a>Step 3. 載入頁面</h4><p>調整你的付款流程，引導消費者到 Step 2. 的頁面，<br>會自動轉導到 Stripe 的標準頁，並且出現填寫信用卡的資訊，<br>消費者需要手動輸入卡號後，確認付款。<br>如果確認會引導至 Step 1 的 <code>success_url</code><br>消費者取消的話會引導至 Step 1 的 <code>cancel_url</code>  </p><h4 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h4><p>這是標準的第三方串接步驟，可以發現在 Step 3 的時候，<br>消費者會被帶離你原本的站台到 Stripe 的付款頁面，<br>這樣的好處是你不需要經手敏感的資料，像是信用卡卡號，<br>但是有時候，轉導到外部頁面會讓消費者不安進而中斷結帳，<br>那我們可以參考其它的作法。  </p><h3 id="使用-Source"><a href="#使用-Source" class="headerlink" title="使用 Source"></a>使用 Source</h3><p>一般來說，Source 是 Stripe 最常用的付款方式，<br>但在歐洲相關規定調整後，信用卡不再建議使用這個 API。<br>可以參考官方文件的<a href="https://stripe.com/docs/sources/cards" target="_blank" rel="noopener">說明</a></p><blockquote><p>Card Payments with Sources<br>Use Sources to accept card payments from around the world.  </p><p>Use of this API is no longer recommended. We recommend adopting the Payment Intents API.<br>This new integration lets you benefit from Dynamic 3D Secure and helps you prepare for<br>Strong Customer Authentication regulation in Europe.</p></blockquote><p>不過理論上您的客戶中沒有歐洲人的話，還是可以呼叫這個 API ，<br>作法如下:</p><h4 id="Step-1-Create-Source-並指定-Type-為-Card"><a href="#Step-1-Create-Source-並指定-Type-為-Card" class="headerlink" title="Step 1. Create Source 並指定 Type 為 Card"></a>Step 1. Create Source 並指定 Type 為 Card</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/sources</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">type</span>=card</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d owner[email]=<span class="string">"jenny.rosen@example.com"</span></span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12</span><br><span class="line">  -d card[exp_year]=2020</span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Charge-With-Source"><a href="#Step-2-Charge-With-Source" class="headerlink" title="Step 2. Charge With Source"></a>Step 2. Charge With Source</h4><p>Step 1 可以取得 source id，利用 source id 呼叫 charge API 付款   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/charges</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">source</span>=&#123;&#123;<span class="built_in">source</span> id&#125;&#125;</span><br><span class="line">  -d amount=411</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d description=<span class="string">"Charge for jenny.rosen@example.com"</span></span><br><span class="line">  -d metadata[a]=<span class="string">"b"</span></span><br><span class="line">  -d metadata[b]=123</span><br></pre></td></tr></table></figure><h3 id="使用-Token"><a href="#使用-Token" class="headerlink" title="使用 Token"></a>使用 Token</h3><p>不過 Sorce 信用卡在<a href="https://stripe.com/docs/payments/payment-methods#transitioning" target="_blank" rel="noopener">官方文件</a>上不再被建議使用，<br>我們可以看看另一個類似的方法 <em>Token</em></p><h4 id="Step-1-Create-Token-並傳入卡號"><a href="#Step-1-Create-Token-並傳入卡號" class="headerlink" title="Step 1. Create Token 並傳入卡號"></a>Step 1. Create Token 並傳入卡號</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/tokens</span><br><span class="line">  -u sk</span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12</span><br><span class="line">  -d card[exp_year]=2020</span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Charge-With-Token"><a href="#Step-2-Charge-With-Token" class="headerlink" title="Step 2. Charge With Token"></a>Step 2. Charge With Token</h4><p>Step 1 可以取得 token id，利用 source id 呼叫 charge API 付款</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/charges</span><br><span class="line">  -u sk</span><br><span class="line">  -d <span class="built_in">source</span>=&#123;&#123;token id&#125;&#125;</span><br><span class="line">  -d amount=412</span><br><span class="line">  -d currency=hkd</span><br><span class="line">  -d description=<span class="string">"Charge for jenny.rosen@example.com"</span></span><br><span class="line">  -d metadata[a]=<span class="string">"c"</span></span><br><span class="line">  -d metadata[b]=663</span><br></pre></td></tr></table></figure><h3 id="使用-Payment-Intent"><a href="#使用-Payment-Intent" class="headerlink" title="使用 Payment Intent"></a>使用 Payment Intent</h3><p>終於來到 Payment Intent 了，<br>實際上這是目前 Stripe 最推薦的信用卡支付方式，<br>呼叫的作法也很類似於 Source 與 Token，<br>沒什麼特別考量的話，建議使用這個付款方式。</p><h4 id="Step-1-Create-Payment-Method-並傳入卡號"><a href="#Step-1-Create-Payment-Method-並傳入卡號" class="headerlink" title="Step 1. Create Payment Method 並傳入卡號"></a>Step 1. Create Payment Method 並傳入卡號</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/payment_methods</span><br><span class="line">  -u sk</span><br><span class="line">  -X POST  </span><br><span class="line">  -d <span class="built_in">type</span>=card  </span><br><span class="line">  -d card[number]=&#123;&#123;cardNumber&#125;&#125;</span><br><span class="line">  -d card[exp_month]=12  </span><br><span class="line">  -d card[exp_year]=2020  </span><br><span class="line">  -d card[cvc]=123</span><br></pre></td></tr></table></figure><h4 id="Step-2-Create-Payment-Intent-With-Payment-Method"><a href="#Step-2-Create-Payment-Intent-With-Payment-Method" class="headerlink" title="Step 2. Create Payment Intent With Payment Method"></a>Step 2. Create Payment Intent With Payment Method</h4><p>Step 1 可以取得 payment method id，<br>利用 payment method id 呼叫 payment intents API 付款</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.stripe.com/v1/payment_intents  </span><br><span class="line">  -u sk  </span><br><span class="line">  -d payment_method=&#123;&#123;payment method id&#125;&#125;</span><br><span class="line">  -d amount=555  </span><br><span class="line">  -d currency=hkd  </span><br><span class="line">  -d confirmation_method=manual  </span><br><span class="line">  -d confirm=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>想快速成立訂單請用 Session 的作法，<br>想要避免轉換率下降，請使用 Payment Intents。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://stripe.com/en-hk" target="_blank" rel="noopener">Online payment processing for internet businesses - Stripe</a></li><li><a href="https://dashboard.stripe.com/" target="_blank" rel="noopener">DashBoard</a></li><li><a href="https://stripe.com/docs" target="_blank" rel="noopener">Documentation | Stripe</a></li><li><a href="https://stripe.com/docs/api" target="_blank" rel="noopener">Stripe API Reference</a></li><li><a href="https://zh.wikipedia.org/wiki/Stripe" target="_blank" rel="noopener">Stripe Wiki</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Agenda&quot;&gt;&lt;a href=&quot;#Agenda&quot; class=&quot;headerlink&quot; title=&quot;Agenda&quot;&gt;&lt;/a&gt;Agenda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Stripe 簡介&lt;/li&gt;
&lt;li&gt;註冊&lt;/li&gt;
&lt;li&gt;付款&lt;/li&gt;
&lt;/ul&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="API" scheme="https://blog.marsen.me/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 讓 SonarQube 檢查你的代碼 </title>
    <link href="https://blog.marsen.me/2019/05/16/2019/opensource_with_sonarcloud/"/>
    <id>https://blog.marsen.me/2019/05/16/2019/opensource_with_sonarcloud/</id>
    <published>2019-05-16T09:13:18.000Z</published>
    <updated>2019-09-08T10:11:38.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ol><li>SonarQube 是一個開源的代碼品質(Quality)管理系統</li><li>我目前的公司 N 社是自架 SonarQube Server 再與 CI 結合</li><li>能夠透過工具讓代碼品質提昇，我訂定的目標如下<ul><li>免費</li><li>能夠與 CI 結合，持續檢查代碼品質</li><li>與 Side Project 結合</li></ul></li></ol><h2 id="應該要知道的事"><a href="#應該要知道的事" class="headerlink" title="應該要知道的事"></a>應該要知道的事</h2><ol><li>掃瞄環境為 Windows</li><li>掃瞄專案為 .Net Core 2.2 版</li><li>使用 PowerShell 執行 Command</li><li>也許不需要知道</li></ol><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><ol><li><p>申請<a href="https://sonarcloud.io" target="_blank" rel="noopener">SonarCloud</a>帳號，我直接使用 Github</p><ul><li>需要允許 SonarCloud 存取 Github 的專案 Repo</li><li>建立一組 Token, 用來作身份驗証，可以重複使用請勿外流</li><li>如果要刪除 Token 請至 My Account &gt; Security 找到並 Revoke<pre><code>![建立 token](/images/2019/5/sonarcloud_gen.jpg)  ![建立 token2](/images/2019/5/sonarcloud_gentoken.jpg)  </code></pre></li><li>下載 SonarQube 執行檔，請選擇你的語言<pre><code>![執行命令](/images/2019/5/sonarcloud_command.jpg)</code></pre></li></ul></li><li><p>執行掃瞄前的準備作業</p><ul><li>設定 Path (實務上我沒有設定)</li><li>切換到專案目錄底下</li></ul></li><li><p>啟動掃瞄，以 .Net Core 為例</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> dotnet <span class="string">"&#123;path of sonar scanner&#125;\SonarScanner.MSBuild.dll"</span> begin /k:<span class="string">"&#123;project name&#125;"</span> /o:&#123;group name&#125; /d:sonar.host.url=<span class="string">"https://sonarcloud.io"</span> /d:sonar.login=<span class="string">"&#123;your token&#125;"</span></span></span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using the .NET Core version of the Scanner for MSBuild</span><br><span class="line">Pre-processing started.</span><br><span class="line">中略...</span><br><span class="line">16:40:31.855  Pre-processing succeeded.</span><br></pre></td></tr></table></figure><ol><li>建置專案</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core</span><br><span class="line">Copyright (C) Microsoft Corporation. All rights reserved.</span><br><span class="line">中略...</span><br><span class="line">Build succeeded.</span><br></pre></td></tr></table></figure><ol><li>上傳結果</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> dotnet <span class="string">"&#123;path of sonar scanner&#125;\SonarScanner.MSBuild.dll"</span> end /d:sonar.login=<span class="string">"&#123;your token&#125;"</span></span></span><br></pre></td></tr></table></figure><p>輸出結果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SonarScanner <span class="keyword">for</span> MSBuild 4.6.1</span><br><span class="line">Using the .NET Core version of the Scanner <span class="keyword">for</span> MSBuild</span><br><span class="line">Post-processing started.</span><br><span class="line">中略...</span><br><span class="line">INFO: Analysis total time: 21.446 s</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: EXECUTION SUCCESS</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">INFO: Total time: 2:27.021s</span><br><span class="line">INFO: Final Memory: 24M/72M</span><br><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line">The SonarQube Scanner has finished</span><br></pre></td></tr></table></figure><p>最後到 SonarCloud 的網站上就可以看到報告結果，<br>下一步就是將這整段流程結合 CI ，官網推薦是使用 Travis CI,<br>也有相同的文件與資源，我會試試看或是使用 Jenkins,<br>如果有機會能更進一步，我想結合 <a href="https://www.openshift.com/" target="_blank" rel="noopener">OpenShift</a> ,<br>讓部署的過程中結合代碼品質檢查。</p><p><img src="/images/2019/5/sonarcloud_result.jpg" alt="結果上傳"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://dotnetthoughts.net/static-code-analysis-of-netcore-projects/" target="_blank" rel="noopener">Static Code Analysis of .NET Core Projects with SonarCloud</a></li><li><a href="https://zh.wikipedia.org/wiki/SonarQube" target="_blank" rel="noopener">SonarQube - 维基百科，自由的百科全书</a></li><li><a href="https://www.sonarqube.org/" target="_blank" rel="noopener">Continuous Inspection | SonarQube</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;SonarQube 是一個開源的代碼品質(Quality)管理系統&lt;/li&gt;
&lt;li&gt;我目前的公司 N 社是自架
      
    
    </summary>
    
    
      <category term=".Net Framework" scheme="https://blog.marsen.me/tags/Net-Framework/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Unit Testing With TypeScript</title>
    <link href="https://blog.marsen.me/2019/05/16/2019/typescript_unit_test/"/>
    <id>https://blog.marsen.me/2019/05/16/2019/typescript_unit_test/</id>
    <published>2019-05-16T05:18:16.000Z</published>
    <updated>2019-06-10T14:43:28.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><ul><li>難得有機會寫前端的東西</li><li>其實只有寫 JavaScript</li><li>我要用 TypeScript 寫</li><li>合理的軟體工序 TDD</li><li>所以我要寫測試</li><li>node 版本 v8.11.1</li><li>npm 版本 5.6.0</li><li>typescript 版本 3.3.3333</li></ul><h2 id="Context-amp-User-Stories"><a href="#Context-amp-User-Stories" class="headerlink" title="Context &amp; User Stories"></a>Context &amp; User Stories</h2><p>來自前端的需求，在一個日曆工具要加入對可選日期判斷的邏輯。<br>原始需求如下，g、h、i、j 可以透過修改日曆元件選項調整，<br>而細微的日期與時間判斷需要撰寫新的方法作判斷。  </p><h3 id="原始需求"><a href="#原始需求" class="headerlink" title="原始需求"></a>原始需求</h3><blockquote><p>a. 每週一過中午12點不能選週二及以前的日期<br>b. 每週二過中午12點不能選週三及以前的日期<br>c. 每週三過中午12點不能選週四及以前的日期<br>d. 每週四過中午12點不能選週五及以前的日期<br>e. 每週五過中午12點不能選隔週一及以前的日期<br>f. 每週日都不能選<br>g. <del>90天以後的日期不能選</del><br>h. <del>需指導我們如何讓特定日期不能選，以因應遇到國定假日的狀況</del><br>i. <del>預設為選擇最近一個可以使用的日期</del><br>j. <del>改成中文</del>  </p></blockquote><h2 id="測試環境準備"><a href="#測試環境準備" class="headerlink" title="測試環境準備"></a>測試環境準備</h2><h3 id="使用-Mocha-與-Chai"><a href="#使用-Mocha-與-Chai" class="headerlink" title="使用 Mocha 與 Chai"></a>使用 Mocha 與 Chai</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D chai mocha nyc ts-node typescript</span><br></pre></td></tr></table></figure><h4 id="安裝-TypeScript"><a href="#安裝-TypeScript" class="headerlink" title="安裝 TypeScript"></a>安裝 <a href="https://www.typescriptlang.org" target="_blank" rel="noopener">TypeScript</a></h4><p>安裝至專案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -D typescript ts-node</span></span><br></pre></td></tr></table></figure><p>安裝至全域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm i -g typescript</span></span><br></pre></td></tr></table></figure><p>建立專案 <code>tsconfig.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc --init</span><br></pre></td></tr></table></figure><h4 id="安裝-MochaJs"><a href="#安裝-MochaJs" class="headerlink" title="安裝 MochaJs"></a>安裝 <a href="https://mochajs.org/" target="_blank" rel="noopener">MochaJs</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D mocha @types/mocha</span><br></pre></td></tr></table></figure><h4 id="安裝-Chai"><a href="#安裝-Chai" class="headerlink" title="安裝 Chai"></a>安裝 <a href="https://www.chaijs.com/" target="_blank" rel="noopener">Chai</a></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D Chai @types/chai</span><br></pre></td></tr></table></figure><h4 id="設定測試"><a href="#設定測試" class="headerlink" title="設定測試"></a>設定測試</h4><p>package.json\</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;test&quot;: &quot;mocha -r ts-node/register tests/**/*.test.ts&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="寫測試"><a href="#寫測試" class="headerlink" title="寫測試"></a>寫測試</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; expect &#125; from &apos;chai&apos;;</span><br><span class="line">import Calculator from &apos;../src/calculate&apos;;</span><br><span class="line"></span><br><span class="line">describe(&apos;calculate&apos;, function() &#123;</span><br><span class="line">  it(&apos;add&apos;, function() &#123;</span><br><span class="line">    let result = Calculator.Sum(5, 2);</span><br><span class="line">    expect(result).equal(7);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="實作代碼"><a href="#實作代碼" class="headerlink" title="實作代碼"></a>實作代碼</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default class calculator &#123;</span><br><span class="line">    static Sum(a: number, b: number): number &#123;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="執行測試"><a href="#執行測試" class="headerlink" title="執行測試"></a>執行測試</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm t</span><br></pre></td></tr></table></figure><h4 id="修正代碼"><a href="#修正代碼" class="headerlink" title="修正代碼"></a>修正代碼</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export default class calculator &#123;</span><br><span class="line">    static Sum(a: number, b: number): number &#123;</span><br><span class="line">        let c = a + b;</span><br><span class="line">        eturn c;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">calculate</span><br><span class="line">  √ add</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 passing (61ms)</span><br></pre></td></tr></table></figure><h2 id="測試覆蓋率"><a href="#測試覆蓋率" class="headerlink" title="測試覆蓋率"></a>測試覆蓋率</h2><p>// TODO</p><h3 id="安裝-nyc"><a href="#安裝-nyc" class="headerlink" title="安裝 nyc"></a>安裝 nyc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nyc</span><br></pre></td></tr></table></figure><h3 id="設定-scripts"><a href="#設定-scripts" class="headerlink" title="設定 scripts"></a>設定 scripts</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;:&#123;    </span><br><span class="line">     &quot;testCover&quot;: &quot;nyc -r lcov -e .ts -x \&quot;*.test.ts\&quot; mocha -r ts-node/register tests/**/*.test.ts &amp;&amp; nyc report&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npm run testCover</span></span><br></pre></td></tr></table></figure><h3 id="執行結果"><a href="#執行結果" class="headerlink" title="執行結果"></a>執行結果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">略過測試部份</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">File                    |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br><span class="line">All files               |      100 |      100 |    98.63 |      100 |                   |</span><br><span class="line"> src                    |      100 |      100 |     87.5 |      100 |                   |</span><br><span class="line">  Calculator.ts         |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  beforeShowDay.ts      |      100 |      100 |       80 |      100 |                   |</span><br><span class="line"> tests                  |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  beforeShowDay.test.ts |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">  calculator.test.ts    |      100 |      100 |      100 |      100 |                   |</span><br><span class="line">------------------------|----------|----------|----------|----------|-------------------|</span><br></pre></td></tr></table></figure><h2 id="完整-Test-Cases"><a href="#完整-Test-Cases" class="headerlink" title="完整 Test Cases"></a>完整 Test Cases</h2><blockquote><p> 今天是 2019/3/30 號星期六 12:05<br>   √ 日曆上 2019/4/02 星期二 出貨 可以選<br>   √ 日曆上 2019/4/02 星期二 設定為國定假日, 出貨 不可以選  </p><p> 今天是 2019/3/24 號星期日 12:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/23 號星期六 12:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 23:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/21 號星期四 01:30<br>   √ 日曆上 2019/3/21 星期四 出貨 不可以選<br>   √ 日曆上 2019/3/22 星期五 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 23:05<br>   √ 日曆上 2019/3/25 星期一 出貨 不可以選<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選  </p><p> 今天是 2019/3/19 號星期二 23:05<br>   √ 日曆上 2019/3/21 星期四 出貨 可以選  </p><p> 今天是 2019/3/22 號星期五 12:59<br>   √ 日曆上 2019/3/22 星期五 出貨 不能選,因為現在時間超過 12 點<br>   √ 日曆上 2019/3/25 星期一 出貨 不能選,因為現在時間超過 12 點<br>   √ 日曆上 2019/3/26 星期二 出貨 可以選<br>   √ 日曆上 2019/4/1 星期一 出貨 可以選<br>   √ 日曆上 2019/3/23 星期六 出貨 不能選,因為現在時間超過 12 點  </p><p> 今天是 2019/3/21 號星期四 23:59<br>   √ 日曆上 2019/3/21 星期四 出貨 不能選,因為現在時間超過 12 點  </p><p> 今天是 2019/3/18 號星期一12:00<br>   √ 日曆上 2019/3/18 星期一 出貨 不能選,因為現在是12點<br>   √ 日曆上 2019/3/19 星期二 出貨 不能選,因為現在是12點<br>   √ 日曆上 2019/3/20 星期三 出貨 可以選<br>   √ 日曆上 2019/3/21 星期四 出貨 可以選  </p><p> 今天是 2019/3/18 號星期一10:00<br>   √ 日曆上 2019/3/24 星期日 出貨;不能選,因為週日都不能選<br>   √ 日曆上 2019/3/18 星期一 出貨 不可以選,因為當天不能選<br>   √ 日曆上 2019/3/19 星期二 出貨 可以選<br>   √ 日曆上 2019/3/20 星期三 出貨 可以選  </p></blockquote><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>能堅持「工序」是專業人士的表現，<br>我相信這是一種實務上能保持品質與速度的作法。<br>特別是越大規模越複雜的專案，<br>避免掉進焦油坑的方法就是一開始就別踩下去。  </p><p>寫測試案例也是一種技能，在這次的 Case 中，<br>E2E測試是相對困難的，受限於時間與日期，<br>單元測試可以控制時間反而成了絕妙的工具。</p><p>我一開始寫的測試並不優良，涵蓋的情境不夠(註:這裡並非指程式碼的函蓋率)，<br>但是與 PO 反覆確認之後，調試出的情境終於滿足了需求，<br>看來我還要增進一下寫測試案例的能力。</p><p>最後，下次再試試用 <code>Jest</code> 寫寫看。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li>[TSUnitTestsSetup](http:// <a href="https://github.com/ChiragRupani/TSUnitTestsSetup" target="_blank" rel="noopener">https://github.com/ChiragRupani/TSUnitTestsSetup</a>)</li><li><a href="https://medium.com/@RupaniChirag/writing-unit-tests-in-typescript-d4719b8a0a40" target="_blank" rel="noopener">Writing unit tests in TypeScript</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;難得有機會寫前端的東西&lt;/li&gt;
&lt;li&gt;其實只有寫 JavaScript&lt;/li&gt;
&lt;li&gt;我要用 TypeS
      
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://blog.marsen.me/tags/TypeScript/"/>
    
      <category term="Node.js" scheme="https://blog.marsen.me/tags/Node-js/"/>
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] ASP.NET 專案部署地雷-消失的靜態檔</title>
    <link href="https://blog.marsen.me/2019/04/12/2019/csproj_content_none/"/>
    <id>https://blog.marsen.me/2019/04/12/2019/csproj_content_none/</id>
    <published>2019-04-12T08:38:16.000Z</published>
    <updated>2019-09-08T10:28:37.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="應該知道的事"><a href="#應該知道的事" class="headerlink" title="應該知道的事"></a>應該知道的事</h2><ul><li>這個是 Debug 的筆記</li><li>用的是 .Net Framework 4.6 不是 .Net Core</li><li>對你可能沒有幫助</li></ul><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>方案裡面有三個 Web 專案 Web1 、Web2 、Web3,<br>因開發某功能需要加入一個文字靜態檔 <code>Iamfile.txt</code><br>在部署的時候卻無法將檔案部署至網站根目錄。</p><h2 id="誤解"><a href="#誤解" class="headerlink" title="誤解"></a>誤解</h2><p>對檔案按右鍵 &gt; 屬性 &gt; 複製的輸出目錄 &gt; 下拉選取一律複製。</p><p><img src="/images/2019/4/copy_file_to_bin.jpg" alt></p><p>很可惜，這個設定的調整會讓這個檔案在<strong>建置</strong>的時候輸出到指定資料夾中( Ex: \bin )，<br>這個操作會影響 <code>csproj</code> 如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">None</span> <span class="attr">Include</span>=<span class="string">"Iamfile.txt"</span>&gt;</span></span><br><span class="line">+  <span class="tag">&lt;<span class="name">CopyToOutputDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToOutputDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">None</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>注意 Tag 的名稱為 <code>None</code>，需要調整為 <code>Content</code>，目前不確定如何用 IDE 操作。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Content</span> <span class="attr">Include</span>=<span class="string">"Iamfile.txt"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>找到你的 MSBuild 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin </span><br></pre></td></tr></table></figure><p>執行建置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">λ MSBuild.exe D:\Projects\IsASolution.sln /p:Configuration=QA;DeployOnBuild=<span class="literal">true</span>;PublishProfile=Mall.QA.pubxml;MvcBuildViews=<span class="literal">false</span>;AutoVersion=True</span><br></pre></td></tr></table></figure><p>執行後輸出的位置需要看你的部署檔 <code>*.pubxml</code> 如下範例<br>可以在 <code>D:\Archives\QA\IsASolution</code> 找到我的輸出。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">此檔案是由您 Web 專案的發行/封裝處理程序所使用。您可以編輯此 MSBuild 檔案，</span></span><br><span class="line"><span class="comment">以自訂此處理程序的行為。若要深入了解，請造訪 http://go.microsoft.com/fwlink/?LinkID=208121。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">ToolsVersion</span>=<span class="string">"4.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/developer/msbuild/2003"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebPublishMethod</span>&gt;</span>FileSystem<span class="tag">&lt;/<span class="name">WebPublishMethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedBuildConfiguration</span>&gt;</span>QA<span class="tag">&lt;/<span class="name">LastUsedBuildConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LastUsedPlatform</span>&gt;</span>Any CPU<span class="tag">&lt;/<span class="name">LastUsedPlatform</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SiteUrlToLaunchAfterPublish</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExcludeApp_Data</span>&gt;</span>False<span class="tag">&lt;/<span class="name">ExcludeApp_Data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">publishUrl</span>&gt;</span>D:\Archives\QA\IsASolution<span class="tag">&lt;/<span class="name">publishUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DeleteExistingFiles</span>&gt;</span>True<span class="tag">&lt;/<span class="name">DeleteExistingFiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PrecompileBeforePublish</span>&gt;</span>True<span class="tag">&lt;/<span class="name">PrecompileBeforePublish</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EnableUpdateable</span>&gt;</span>True<span class="tag">&lt;/<span class="name">EnableUpdateable</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DebugSymbols</span>&gt;</span>False<span class="tag">&lt;/<span class="name">DebugSymbols</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">WDPMergeOption</span>&gt;</span>DonotMerge<span class="tag">&lt;/<span class="name">WDPMergeOption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span></span></span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;應該知道的事&quot;&gt;&lt;a href=&quot;#應該知道的事&quot; class=&quot;headerlink&quot; title=&quot;應該知道的事&quot;&gt;&lt;/a&gt;應該知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這個是 Debug 的筆記&lt;/li&gt;
&lt;li&gt;用的是 .Net Framework 4.6 不是
      
    
    </summary>
    
    
      <category term=".Net Framework" scheme="https://blog.marsen.me/tags/Net-Framework/"/>
    
  </entry>
  
  <entry>
    <title>[工作筆記] 好用的線上工具</title>
    <link href="https://blog.marsen.me/2019/04/11/2019/tool_sites/"/>
    <id>https://blog.marsen.me/2019/04/11/2019/tool_sites/</id>
    <published>2019-04-11T03:16:21.000Z</published>
    <updated>2019-09-26T09:46:04.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Net-Config-Transformation-Online"><a href="#Net-Config-Transformation-Online" class="headerlink" title=".Net Config Transformation Online"></a>.Net Config Transformation Online</h2><p><a href="https://webconfigtransformationtester.apphb.com/" target="_blank" rel="noopener">Web.config Transformation Tester</a></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON-C-Class"><a href="#JSON-C-Class" class="headerlink" title="JSON C# Class"></a>JSON C# Class</h3><ul><li><a href="http://json2csharp.com/" target="_blank" rel="noopener">json2csharp - generate c# classes from json</a></li></ul><h3 id="JSON-Query-Online"><a href="#JSON-Query-Online" class="headerlink" title="JSON Query Online"></a>JSON Query Online</h3><ul><li><a href="http://www.jsonquerytool.com/" target="_blank" rel="noopener">Home - Online JSON Query Tester</a></li></ul><h3 id="JSON-Format"><a href="#JSON-Format" class="headerlink" title="JSON Format"></a>JSON Format</h3><ul><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSON Formatter &amp; Validator</a></li><li><a href="http://jsonviewer.stack.hu/" target="_blank" rel="noopener">Online JSON Viewer</a></li></ul><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><ul><li><a href="http://www.yamllint.com/" target="_blank" rel="noopener">YAMLlint - The YAML Validator</a></li></ul><h2 id="SQL-Format"><a href="#SQL-Format" class="headerlink" title="SQL Format"></a>SQL Format</h2><p><a href="https://sqlformat.org/" target="_blank" rel="noopener">Format SQL Statements Online - sqlformat.org</a></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Net-Config-Transformation-Online&quot;&gt;&lt;a href=&quot;#Net-Config-Transformation-Online&quot; class=&quot;headerlink&quot; title=&quot;.Net Config Transformation O
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] ASP.Net Core Logger</title>
    <link href="https://blog.marsen.me/2019/04/06/2019/aspdotnet_core_logging/"/>
    <id>https://blog.marsen.me/2019/04/06/2019/aspdotnet_core_logging/</id>
    <published>2019-04-06T04:21:17.000Z</published>
    <updated>2019-09-08T10:08:48.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><ul><li>這是個人的學習記錄</li><li>可能對你沒幫助</li><li>網路上資訊很多</li><li>希望對你有幫助</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Asp.Net Core 的 Life Cycle 由 <code>Program.cs</code> 的 <code>main</code> 方法開始(是的，就如同其它一般的程式)，<br>在 <code>WebHostBuilder</code> 中的 <code>ConfigureLogging</code> 可以提供彈性讓你設定屬於你的 LoggerProvider，<br>不論是微軟提供、知名的第三方套件或是你手工自已刻一個，大致你的程式碼會如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureLogging(logging=&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            logging.ClearProviders();</span><br><span class="line">            logging.AddEventLog();</span><br><span class="line">            logging.AddFile(<span class="string">"D:\\Temp\\Log.txt"</span>);</span><br><span class="line">            logging.AddConsole();</span><br><span class="line">        &#125;)</span><br><span class="line">        .UseStartup&lt;Startup&gt;()</span><br></pre></td></tr></table></figure><p>而在 Controller 或其它 Module 間，你只要透過建構子注入 logger 實體就可以實現 log 的功能</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._logger = logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="預設的行為"><a href="#預設的行為" class="headerlink" title="預設的行為"></a>預設的行為</h2><p>如果你沒有呼叫 <code>ConfigureLogging</code> 預設的行為如下述.</p><p>The default project template calls <code>CreateDefaultBuilder</code>， which adds the following logging providers:</p><ul><li>Console</li><li>Debug</li><li>EventSource (starting in ASP.NET Core 2.2)</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CreateWebHostBuilder(args).Build().Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .UseStartup&lt;Startup&gt;();</span><br></pre></td></tr></table></figure><h3 id="Find-the-Logs"><a href="#Find-the-Logs" class="headerlink" title="Find the Logs"></a>Find the Logs</h3><h4 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h4><p>範例說明:在建構子中注入 <code>ILogger</code> 實體，運行網站後連到 Home\Index 頁面，並觀察 Console</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeController</span> : <span class="title">Controller</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _logger;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Initializes a new instance of the <span class="doctag">&lt;see cref="HomeController" /&gt;</span> class.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeController</span>(<span class="params">ILogger&lt;HomeController&gt; logger</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Information，<span class="string">"HomeController Information"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Critical，<span class="string">"HomeController Critical"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Debug，<span class="string">"HomeController Debug"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Error，<span class="string">"HomeController Error"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.None，<span class="string">"HomeController None"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Trace，<span class="string">"HomeController Trace"</span>);</span><br><span class="line">        <span class="keyword">this</span>._logger.Log(LogLevel.Warning，<span class="string">"HomeController Warning"</span>);</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果如下，可以發現 <code>LogLevel.None</code>、<code>LogLevel.Trace</code> 與 <code>LogLevel.Warning</code> 並未出現在 Console 資訊當中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Information</span><br><span class="line">crit: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Critical</span><br><span class="line">dbug: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Debug</span><br><span class="line">fail: Marsen.NetCore.Site.Controllers.HomeController[0]</span><br><span class="line">      HomeController Error</span><br></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.extensions.logging.loglevel?view=aspnetcore-2.2" target="_blank" rel="noopener">LogLevel</a>說明了 <code>None</code> 的意義就是不記錄任何訊息，</p><table><thead><tr><th>Enum</th><th>Level</th><th>Description</th></tr></thead><tbody><tr><td>Trace</td><td>0</td><td>Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment.</td></tr><tr><td>Debug</td><td>1</td><td>Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.</td></tr><tr><td>Information</td><td>2</td><td>Logs that track the general flow of the application. These logs should have long-term value.</td></tr><tr><td>Warning</td><td>3</td><td>Logs that highlight an abnormal or unexpected event in the application flow， but do not otherwise cause the application execution to stop.</td></tr><tr><td>Error</td><td>4</td><td>Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity， not an application-wide failure.</td></tr><tr><td>Critical</td><td>5</td><td>Logs that describe an unrecoverable application or system crash， or a catastrophic failure that requires immediate attention.</td></tr><tr><td>None</td><td>6</td><td>Not used for writing log messages. Specifies that a logging category should not write any messages.</td></tr></tbody></table><p>Log 的作用範圍會受 <code>appsettings.json</code> 影響，<br>另外要注意 appsettings.json 的載入順序.  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"Logging": &#123;</span><br><span class="line">  "LogLevel": &#123;</span><br><span class="line">    "Default": "Trace"，</span><br><span class="line">    "System": "Information"，</span><br><span class="line">    "Microsoft": "Information"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h4><p>如同 <code>Console</code> 的行為一般，可以在 Visual Studio 的輸出(Output)&gt;偵錯(Debug)視窗中，查詢到記錄。</p><p><img src="https://i.imgur.com/274witm.jpg" alt></p><h4 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h4><p>如同<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2#eventsource-provider" target="_blank" rel="noopener">官方文件</a>所說，我下載了 <code>PerfView</code> ，<br>如下圖作了設定，<br><img src="/images/2019/4/perfview.jpg" alt="PerfView"><br>不過我並沒有取得記錄，<br><img src="/images/2019/4/perfview.jpg" alt="PerfView Log">  </p><p>錯誤訊息如下<br> <code>EventSource Microsoft-Extensions-Logging: Object reference not set to an instance of an object</code><br>暫時不打算深追查，<br>ETW 可以記錄的 Memory 、Disc IO 、CPU 等資訊，<br>其實與我想要的應用程式記錄有所差異，稍稍記錄一下以後也許用得到。<br>如果有人能留言給我一些方向，也是非常歡迎。  </p><h2 id="自訂-Filelog-與-EventLog"><a href="#自訂-Filelog-與-EventLog" class="headerlink" title="自訂 Filelog 與 EventLog"></a>自訂 Filelog 與 EventLog</h2><p>調整一下程式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IWebHostBuilder <span class="title">CreateWebHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>) </span>=&gt;</span><br><span class="line">    WebHost.CreateDefaultBuilder(args)</span><br><span class="line">        .ConfigureLogging(logging=&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            logging.AddEventLog();</span><br><span class="line">            logging.AddFile(<span class="string">"D:\\Temp\\Log.txt"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        .UseStartup&lt;Startup&gt;()</span><br></pre></td></tr></table></figure><p>這裡我使用 <code>Microsoft.Extensions.Logging.EventLog</code> 處理 EventLog 可以在 Event View 中看見記錄;<br>而 file log 我使用 <code>Serilog.Extensions.Logging.File</code> ， 特別要注意以下兩點  </p><ul><li>Nuget 使用的版本為 2.0.0 以上版本，目前仍然不是穩定版本  </li><li>AddFile 傳入的是記錄檔的完整 Path 而非目錄  </li></ul><h2 id="自訂-Elmah"><a href="#自訂-Elmah" class="headerlink" title="自訂 Elmah"></a>自訂 Elmah</h2><p>Elmah 在 Net 算是一個蠻方便的工具，有提供簡易介面、可以選擇用 File 或是 Database 方式作 Logging，<br>更重要是小弟我用了 4 年，順手就研究一下。</p><p>設定相當簡單， 在 <code>Startup.cs</code> 的 <code>ConfigureServices</code> 加入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">services.AddElmah&lt;XmlFileErrorLog&gt;(options =&gt;            </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//options.CheckPermissionAction = context =&gt; context.User.Identity.IsAuthenticated;</span></span><br><span class="line">    <span class="comment">//options.Path = @"elmah";</span></span><br><span class="line">    options.LogPath = <span class="string">"D:\\Temp\\elmah"</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 <code>Configure</code> 加入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseElmah();</span><br></pre></td></tr></table></figure><p>要注意是使用 <code>XmlFileErrorLog</code> 時，要設定的 options 是 <code>LogPath</code> 而非 <code>Path</code>，  其實使用 File 只能說是開發環境的暫時處置，真正的 Prodction 應該將 Log 放到專門的 Database 或是 Cloud Service 之中，<br>在這裡可以看見 Elmah 的行為與 Net Core 的行為並不一致，Log 與錯誤記錄本來就不該混為一談。<br>我想我要調整一下我的想法了，不過關於 Log 暫時就到此為止。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://codingblast.com/asp-net-core-logging/" target="_blank" rel="noopener">ASP.NET Core Logging</a></li><li><a href="https://stackify.com/net-core-loggerfactory-use-correctly/" target="_blank" rel="noopener">.NET Core Logging With LoggerFactory: Best Practices and Tips</a></li><li><a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2#log-scopes" target="_blank" rel="noopener">Logging in ASP.NET Core</a></li><li><a href="https://blog.johnwu.cc/article/ironman-day16-asp-net-core-multiple-environments.html" target="_blank" rel="noopener">[鐵人賽 Day16] ASP.NET Core 2 系列 - 多重環境組態管理 (Multiple Environments)</a></li><li><a href="https://stackoverflow.com/questions/47773058/asp-net-core-eventlog-provider" target="_blank" rel="noopener">ASP.NET Core EventLog provider</a></li><li><a href="http://www.techbloginterview.com/asp-net-core-the-mvc-request-life-cycle/" target="_blank" rel="noopener">ASP.NET Core: The MVC Request Life Cycle</a></li><li><a href="https://mattwarren.org/2018/08/21/Monitoring-and-Observability-in-the-.NET-Runtime/" target="_blank" rel="noopener">Monitoring and Observability in the .NET Runtime</a></li><li><a href="https://github.com/ElmahCore/ElmahCore" target="_blank" rel="noopener">ElmahCore/ElmahCore</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;這是個人的學習記錄&lt;/li&gt;
&lt;li&gt;可能對你沒幫助&lt;/li&gt;
&lt;li&gt;網路上資訊很多&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term=".Net Framework" scheme="https://blog.marsen.me/tags/Net-Framework/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 重構---改善既有程式的設計，第一章</title>
    <link href="https://blog.marsen.me/2019/03/01/2019/book/refactoring/refactoring_Ch1/"/>
    <id>https://blog.marsen.me/2019/03/01/2019/book/refactoring/refactoring_Ch1/</id>
    <published>2019-03-01T03:17:16.000Z</published>
    <updated>2019-06-10T14:43:28.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼"><a href="#為什麼" class="headerlink" title="為什麼"></a>為什麼</h2><h3 id="知道自已不知道"><a href="#知道自已不知道" class="headerlink" title="知道自已不知道"></a>知道自已不知道</h3><p>上次在公司內部開始進行 <a href="/2019/01/30/2019/coding_dojo_in_company/">Coding Dojo</a>，在 <a href="/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/">FizzBuzz 的 Kata</a> 嚐到了甜頭<br>但是下一道題目「Bowling」，卻卡住了。<br>我們有測試，也通過測試，但是卻寸步難行，<br>在重構上我們非常的弱，這裡的重構不是指一次性的全面翻掉，<br>而是逐步的、可靠的前進，<br>我想習得這樣的技能，因為現場的代碼腐敗的更加嚴重，<br>如果連 Kata 產生的代碼都不能優化，<br>那想對產品指手劃腳只不過是說幹話。</p><h2 id="閱讀經典-重構—改善即有的程式設計"><a href="#閱讀經典-重構—改善即有的程式設計" class="headerlink" title="閱讀經典:重構—改善即有的程式設計"></a>閱讀經典:重構—改善即有的程式設計</h2><p><img src="https://i.stack.imgur.com/BrLmD.jpg" alt></p><p>這是一本來自 Martin Fowler 的經典書籍，新版已經出了，而且是以 <code>JavaScript</code> 作為範例語言。<br>不過我手頭上借到的是以 <code>Java</code> 作為範例的板本。</p><h3 id="CH1-重構，第一個案例"><a href="#CH1-重構，第一個案例" class="headerlink" title="CH1 重構，第一個案例"></a>CH1 重構，第一個案例</h3><p>第一個問題就是我找不到書中說的「線上範例」，<br>即使找到我也沒有 <code>Java</code> 的開發環境，所以心一橫就開始了改寫成 <code>C#</code> 的計劃<br>這部份比我想像中的簡單很多，兩個語言是相同類似的，<br><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/6e600db029fe2f62df724d0179b708c97a0b3313" target="_blank" rel="noopener">第1章，第一個案例</a></p><p><strong>接下來只要照著書上一步一步作就會…覺得越來越沒 fu …</strong><br>為什麼 ??? </p><p>其實 Martin 大叔在書中有提到「為即將修改的程式建立可靠的測試…畢竟是人，可能會犯錯。所以我需要可靠的測試」。<br>沒fu的原因就是<strong>我沒加測試</strong>，即使重構了，我也不知道好壞。<br>沒有反饋是很糟糕的一件事。</p><h3 id="CH1-重構，第一個案例，加上測試"><a href="#CH1-重構，第一個案例，加上測試" class="headerlink" title="CH1 重構，第一個案例，加上測試"></a>CH1 重構，第一個案例，加上測試</h3><p>那麼要怎麼加測試呢 ?<br>書上的案例我分析了一下，其實重構的目標只是一個單純的方法<br>會針對不同的情境回傳不同的字串。</p><p>簡單的說，我只要讓測試覆蓋這個方法就可以開始重構了，<br>我選擇<a href="https://www.jetbrains.com/dotcover/" target="_blank" rel="noopener">dotCover</a>來檢驗我的覆蓋率。<br>選擇的原因很簡單，因為我有買<a href="https://www.jetbrains.com/resharper/?" target="_blank" rel="noopener">ReSharper</a>，  如果有更好用更便宜的工具也請介紹給我。</p><blockquote><p>OS:課金真的能解決很多人生問題啊(茶)…</p></blockquote><p>最後的結果，我開了一個<a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/d8d6f463960572af6ffdb3a5612fd00623d0d7e2" target="_blank" rel="noopener">分支</a>包含了100%的測試覆蓋率，<br>這樣就可以開開心心重構了，相信我有測試真得很有感覺。</p><p>重構的技法請自行看書，我只稍微作個記錄，有興趣可以 fork 回去玩。</p><ul><li>Extract Method </li><li>Move Method </li><li>Replace Temp with Query </li><li>Replace Type Code with State/Strategy Pattern </li><li>Replace Conditional with Polymorphism</li><li>Self Encapsulate Field</li></ul><p>在重構的過程中我儘可能讓步驟小(Baby Step)，看我的commit歷程即可知道，但是最好可以自已作作看。<br>另外有一些心法，也稍作個記錄</p><ul><li>把一坨爛 Code 抽到獨立的方法之中</li><li>如果一個類別方法並沒有使用到該類別的資訊<ul><li>考慮職責，是不是要讓它搬家</li><li>提醒自已這是個壞味道</li></ul></li><li><strong>拆分職責時，有個方法相依兩個不同的類別的資訊，那應該將方法放在哪裡呢?</strong>(這裡花了點時間理解)<ul><li>將方法放在未來可能變化較大的類別之中</li><li>相依的資訊作為方法參數傳進來</li><li>這樣未來有異動就被縮限在這個類別裡面。</li></ul></li><li>暫存變數常常會帶來問題(壞味道)<ul><li>儘可能的把它消除</li><li>要考慮效能的問題(書上後面會說。)</li></ul></li><li>保持小步調、頻繁測試<ul><li>使用中繼方法可以縮小重構步調(特別是對public的方法)</li><li>讓新的 return 值插在舊的 return 之前</li><li>測試 ok 就可以刪掉舊 code (有時刪不掉也還是可以運作的)</li><li>善用<a href="https://blog.marsen.me/2018/03/20/2018/mutation_testing/">變異測試</a></li></ul></li><li>UML 可以幫助對程式重構前後的理解</li><li>Java 與 C# 對繼承的處理是不同的<ul><li><a href="https://stackoverflow.com/questions/13323099/java-inheritance-vs-c-sharp-inheritance" target="_blank" rel="noopener">Java inheritance vs. C# inheritance</a></li></ul></li></ul><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>第一章的範例完成後的結果大致如下<br><img src="/images/2019/3/test_cover_100.jpg" alt="100%!!!"><br>很帥氣的100%啊，這樣的 code 測試覆蓋率 100 % 全綠燈，<br>而且完成了重構，根本是現場不可能出現的完全體程式碼!!!  代碼的部份我會放在最後的參考區塊。</p><p><img src="/images/2019/3/cell.jpg" alt="我有沒有可能讓它更好？或是找出他的缺陷呢？"><br>下一步，我有沒有可能讓它更好？或是找出他的缺陷呢？  </p><p>這個時候我想起了<a href="https://blog.marsen.me/2018/03/20/2018/mutation_testing/">變異測試</a><br>還沒有實作過，來玩看看好了。  </p><p>首先要選擇測試工具，這裡使用了<a href="https://stryker-mutator.io/" target="_blank" rel="noopener">Stryker Mutator</a>，  但是注意只能用在 .Net Core 的版本<br>照著官網安裝完成後執行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">dotnet stryker</span></span><br></pre></td></tr></table></figure><p>跑下去竟然真的找到有存活的變異<br><img src="/images/2019/3/run_stryker.jpg" alt="存活的變異"><br>這兩個變異存活的原因是類似的，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> result = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (daysRented &gt; <span class="number">2</span>)</span><br><span class="line">    result += (daysRented - <span class="number">2</span>) * <span class="number">1.5</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><p>變異點發生在 <code>daysRented &gt; 2</code> 的判斷式之中，<br>現有的測試在變異發生(<code>daysRented &gt;= 2</code>)時，無法提出警訊，也就是測試上的不足。<br>不過依現有的邏輯，不論是進入 <code>if</code> 進行了加0運算，或是直接回傳 result，<br>都是等價的(回傳 2 )，目前還沒有想法怎麼強化我的測試，<br>希望有先進願意不嗇指點，實務上跟本沒在跑變異測試。</p><h2 id="後記2"><a href="#後記2" class="headerlink" title="後記2"></a>後記2</h2><p>回歸一下我們當初 Kata 的目的:</p><ul><li>學習 Pair ，並透過 Pair 彼此學習</li><li>學習 TDD ，並透過 TDD 學習重構</li><li>學習 Vim，並提昇開發速度</li></ul><p>事情沒有那麼簡單，比如說學習 Vim 的過程中，<br>我們的目的是增進開發速度，但是一開始反而會變慢，<br>一定要刻意的練習才能習得，<br>你必須擁有以下的能力。</p><ul><li>打字速度，網路上很多資源，我是使用<a href="https://www.ratatype.com/" target="_blank" rel="noopener">Ratatype</a>作練習<ul><li>能盲打</li><li>指法要正確(特別在特殊符號)</li><li>快速切換中英(建議加入英文輸入法用 win + space 之切換過去)</li></ul></li><li>英文能力。命名是開發很重要的一課，英文不好看不懂寫得差，命名自然不會好。 </li><li>熟悉工具，特別是你的IDE與外掛<ul><li>Visual Studio</li><li>Resharper</li><li>OzCode </li><li>more ..</li></ul></li><li>Vim <ul><li>Vim Basic 基本功(v、c、i、s、j、k、g、h、l….)</li><li>VimRc 要學會配置自已的 VimRC，這裡不僅要刻意練習，還要<strong>刻意試錯</strong>找到自已最順的模式</li></ul></li></ul><p>彼此學習方面需要相當的軟技能，<br>溝通、尊重、謙虛…;這些一生的功課我就不贅言了。<br>Pair Programming 一半是 Pair 一半是 Progrmming；<br>而在進入 Progrmming 之前請搞懂你<strong>要作什麼</strong>。  </p><p>同樣的在 TDD 的過程之中，我們沒有事先理好需求，<br>沒有想好作好需求分析，隨便選了測試案例就開始進行，<br>如果好好分析，是可以歸納出其中的邏輯，<br>甚至是理出 test case 的順序。</p><p>重要的是過程，但是<strong>我們太在乎結果，以致程式快速的腐敗。</strong><br>甚至到了難以修改的狀態，僅管有測試保護，卻無法重構。</p><p>這是很好的一課，特別在這裡記錄一下。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.ratatype.com/" target="_blank" rel="noopener">Ratatype</a></li><li><a href="https://www.tenlong.com.tw/products/9789861547534" target="_blank" rel="noopener">重構─改善既有程式的設計， 2/e (Refactoring: Improving The Design of Existing Code)</a></li><li><a href="https://www.jetbrains.com/dotcover/" target="_blank" rel="noopener">dotCover: A Code Coverage Tool for .NET by JetBrains</a> </li><li><a href="https://stackoverflow.com/questions/13323099/java-inheritance-vs-c-sharp-inheritance" target="_blank" rel="noopener">Java inheritance vs. C# inheritance</a></li><li><a href="https://github.com/marsen/Marsen.NetCore.Dojo/tree/Refactoring_Improving_The_Design_of_Existing_Code_With_Test" target="_blank" rel="noopener">marsen/Marsen.NetCore.Dojo</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;為什麼&quot;&gt;&lt;a href=&quot;#為什麼&quot; class=&quot;headerlink&quot; title=&quot;為什麼&quot;&gt;&lt;/a&gt;為什麼&lt;/h2&gt;&lt;h3 id=&quot;知道自已不知道&quot;&gt;&lt;a href=&quot;#知道自已不知道&quot; class=&quot;headerlink&quot; title=&quot;知道自已不知道
      
    
    </summary>
    
    
      <category term="Testing" scheme="https://blog.marsen.me/tags/Testing/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記]使用 Windows PowerShell 批次上傳 AWS S3</title>
    <link href="https://blog.marsen.me/2019/02/20/2019/Setting_up_aws_tools_for_powershell/"/>
    <id>https://blog.marsen.me/2019/02/20/2019/Setting_up_aws_tools_for_powershell/</id>
    <published>2019-02-20T11:09:18.000Z</published>
    <updated>2019-06-10T14:43:28.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>相關服務要雲端化，要將站台、資料等…遷移至 AWS，<br>這個案例需要將大量在 File Server 上的檔案(報表/單據/報告書等…)上傳至 S3<br>因為檔案數量相當的大，所以開發一個簡單的指令來執行。</p><h3 id="Step-1-下載並安裝適用於-Windows-PowerShell-的-AWS-工具"><a href="#Step-1-下載並安裝適用於-Windows-PowerShell-的-AWS-工具" class="headerlink" title="Step 1 下載並安裝適用於 Windows PowerShell 的 AWS 工具"></a>Step 1 下載並安裝適用於 Windows PowerShell 的 AWS 工具</h3><ul><li><a href="https://aws.amazon.com/tw/powershell/" target="_blank" rel="noopener">下載適用於 Windows PowerShell 的 AWS 工具</a></li></ul><p><img src="/images/2019/2/awstools.jpg" alt="只需要安裝必要的程式"></p><h3 id="設定-aws-config"><a href="#設定-aws-config" class="headerlink" title="設定 aws config"></a>設定 aws config</h3><p>打開 terminal 執行以下語法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; aws configure</span><br></pre></td></tr></table></figure><p>依指示設定 <code>Access key ID</code> 與 <code>Secret access key</code>，  這個資料需要具備一定的權限才能取得，如果權限不足請向你的 AWS 服務管理員申請。</p><h3 id="撰寫-PowerShell-與執行"><a href="#撰寫-PowerShell-與執行" class="headerlink" title="撰寫 PowerShell 與執行"></a>撰寫 PowerShell 與執行</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bucketName</span> = <span class="string">"********************-your_bucket_name"</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">"Your\s3\path\"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-ChildItem</span> -Filter *.pdf |</span><br><span class="line"><span class="built_in">ForEach-Object</span> -Begin&#123;<span class="variable">$i</span>=<span class="number">0</span>&#125; &#123;  </span><br><span class="line">  <span class="variable">$i</span>++;</span><br><span class="line">  <span class="variable">$key</span> = <span class="variable">$path</span>+<span class="variable">$_</span> ;</span><br><span class="line">  <span class="comment">## 進度顯示</span></span><br><span class="line">  <span class="built_in">Write-Host</span> <span class="variable">$key</span> <span class="string">"(<span class="variable">$i</span>/1000)"</span>  -ForegroundColor Green ;</span><br><span class="line">  <span class="comment">## 上傳 S3</span></span><br><span class="line">  Write-S3Object -BucketName <span class="variable">$bucketName</span> -File <span class="variable">$_</span>.FullName -Key <span class="variable">$key</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目標&quot;&gt;&lt;a href=&quot;#目標&quot; class=&quot;headerlink&quot; title=&quot;目標&quot;&gt;&lt;/a&gt;目標&lt;/h2&gt;&lt;p&gt;相關服務要雲端化，要將站台、資料等…遷移至 AWS，&lt;br&gt;這個案例需要將大量在 File Server 上的檔案(報表/單據/報告書等…)
      
    
    </summary>
    
    
      <category term="PowerShell" scheme="https://blog.marsen.me/tags/PowerShell/"/>
    
      <category term="AWS" scheme="https://blog.marsen.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Coding Dojo 第一個 Kata FizzBuzz</title>
    <link href="https://blog.marsen.me/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/"/>
    <id>https://blog.marsen.me/2019/02/06/2019/coding_dojo_kata_fizzbuzz_first/</id>
    <published>2019-02-05T20:11:17.000Z</published>
    <updated>2019-06-10T14:43:28.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>記錄一下 Kata 的思路。</p><h2 id="實例化需求"><a href="#實例化需求" class="headerlink" title="實例化需求"></a>實例化需求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 is 1</span><br><span class="line">2 is 2</span><br><span class="line">3 is Fizz</span><br><span class="line">4 is 4</span><br><span class="line">5 is Buzz</span><br><span class="line">6 is Fizz</span><br><span class="line">15 is FizzBuzz</span><br></pre></td></tr></table></figure><p>雖然可以把上面的案例濃縮到 4 種，<br>整除 3 是 Fizz、<br>整除 5 是 Buzz、<br>整除 3 又整除 5 是 FizzBuzz ,<br>不符合上述條件的都是原數字。</p><p>有沒有必要寫這麼多測試呢？<br>比如說 1、2、4 的測試是不是重複了？<br>日前 91 大有過類似的討論， </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一個 test case 挑最簡單的，讓你可以從紅燈變綠燈。驅動出你需要的產品代碼。  </span><br><span class="line">接下來後面的幾個，都可以只是拿來「確認」是否滿足你期望的情境，  </span><br><span class="line">也就是你寫新的測試案例，你期望他就是綠燈了，然後驗證是否符合你的期望。  </span><br><span class="line">目的是「驗證」，不是「驅動」</span><br></pre></td></tr></table></figure><p>測試的不是只有「驅動開發」而已。<br>而好的程式碼，也不能只依靠測試。</p><h3 id="第一個測試案例，1-回傳-1"><a href="#第一個測試案例，1-回傳-1" class="headerlink" title="第一個測試案例，1 回傳 1"></a>第一個測試案例，1 回傳 1</h3><p>我一開始就寫成這樣，所以後面的 2、4 案例也都會是綠燈。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考慮另一種情況，也許有的人第一個測試案例會寫成這樣</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候就有可能需要靠 2、4 的測試案例來驅動程式碼的改變。<br>實際上並沒有，第一種寫法對我來說就夠 Baby Step 了。</p><h3 id="第二個測試案例，3-回傳-Fizz"><a href="#第二個測試案例，3-回傳-Fizz" class="headerlink" title="第二個測試案例，3 回傳 Fizz"></a>第二個測試案例，3 回傳 Fizz</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> number.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信這是很好理解的，雖然我的案例是從 1、2、3 而來，<br>但是在我的腦海中已經思考好了這個程式碼的「餘數規則」，  </p><h3 id="所有測試案例"><a href="#所有測試案例" class="headerlink" title="所有測試案例"></a>所有測試案例</h3><p>實作出一個「餘數規則」後，程式碼應該很容易隨著測試案例變成下面這個樣子，<br>用一堆 <code>if</code> 檢查「餘數」然後回傳指定的「字串」，就是我們的「規則」。<br>這個時候的複雜度是 4 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">5</span> == <span class="number">0</span> &amp; number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h2><p>我儘量還原當初的想法，並記錄下來，<br>有許多值得改善的地方，換個順序重構起來就會更明快。</p><h3 id="重構餘數檢查"><a href="#重構餘數檢查" class="headerlink" title="重構餘數檢查"></a>重構餘數檢查</h3><p>這一步真的非常的的小，我想大多數的人甚至會跳過這步驟的重構，<br>我只是把餘數檢查抽成私有方法，可以透過 <code>Resharp</code> 快速重構。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy15(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy15</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IsDivisibleBy3(number) &amp;&amp; IsDivisibleBy5(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽出-result-變數作為回傳值"><a href="#抽出-result-變數作為回傳值" class="headerlink" title="抽出 result 變數作為回傳值"></a>抽出 result 變數作為回傳值</h3><p>這裡我是作了一個舖墊，主要是我看到了 <code>Fizz</code> 與 <code>Buzz</code> 的字串重複出現在 <code>FizzBuzz</code>，  我預計下一階段要讓 <code>FizzBuzz</code> 是透過組合產生，而不是寫死在程式之中。<br>特別要注意的事是，我為了產生 result 變數，必須在最後多作一次空字串的檢查，<br>這個時候的複雜度會達到 5 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy15(number))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"FizzBuzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result = <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(result))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> number.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy15</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IsDivisibleBy3(number) &amp;&amp; IsDivisibleBy5(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="組合-result-值"><a href="#組合-result-值" class="headerlink" title="組合 result 值"></a>組合 result 值</h3><p>這個階段 ‘Fizz’ 與 ‘Buzz’ 在程式中只會出現一次，<br>15 的餘數檢查也被移除了，這時的複雜度是 4 ，<br>可惜的是我沒有意識到第三個 <code>if</code> 的明顯不同，<br>如果我能提早重構成 <code>result = number.ToString();</code><br>後面的重構也許會更簡潔一點。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy3(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(result))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> number.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy3</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-FizzRule-Class"><a href="#實作-FizzRule-Class" class="headerlink" title="實作 FizzRule Class"></a>實作 FizzRule Class</h3><p>這是繼 <code>FizzBuzz</code> 後產生的第二個 Class，<br>算有指標意義，這裡原本的目的是想要消除 <code>if</code>，  但無法一步到位，先試著把 Fizz 與 Buzz 的邏輯作分離，<br>一樣我只聚焦在 Fizz 與 Buzz 身上，<br>而忽略了 <code>其它</code> 的邏輯判斷，寫成了三元判斷除了變成一行外其實沒有其他好處。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">        <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Fizz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (IsDivisibleBy5(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">"Buzz"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">IsDivisibleBy5</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-BuzzRule-Class"><a href="#實作-BuzzRule-Class" class="headerlink" title="實作 BuzzRule Class"></a>實作 BuzzRule Class</h3><p>一樣把 Buzz 的邏輯搬到新的 Class 中，<br>這裡故意用相同的方法名，是為了下一步要抽介面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">    <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="string">"Fizz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buzzRule = <span class="keyword">new</span> BuzzRule();</span><br><span class="line">    <span class="keyword">if</span> (buzzRule.Check(number))</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="string">"Buzz"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="介面-IRule"><a href="#介面-IRule" class="headerlink" title="介面 IRule"></a>介面 IRule</h3><p>終於抽出了介面，自已為聰明的把關鍵字抽離到了介面之中，<br>卻沒有考慮到真正的邏輯是組合 result 的行為仍然相依在 <code>FizzBuzz</code> Class</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> Word &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Fizz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BuzzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Buzz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IRule-List"><a href="#IRule-List" class="headerlink" title="IRule List"></a>IRule List</h3><p>準備好了 IRule ，就是要讓 <code>FizzBuzz</code> 與 <code>FizzRule</code> 以及 <code>BuzzRule</code> 解耦的階段了，<br>這步我踩得有小，可以更直接一點重構，<br>一樣的問題，我仍然沒有意識最後一個<code>if(?:)</code>其實也是一種 <code>IRule</code>，  也沒有意識到 <code>result+=XXX</code> 與 <code>return YYY?number.ToString() : result;</code> 其實應該是屬於 <code>IRule</code> 的一部份<br>這時的複雜度仍然是 4  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt; &#123;<span class="keyword">new</span> FizzRule(), <span class="keyword">new</span> BuzzRule()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> fizzRule = <span class="keyword">new</span> FizzRule();</span><br><span class="line">        <span class="keyword">if</span> (fizzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += fizzRule.Word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> buzzRule = <span class="keyword">new</span> BuzzRule();</span><br><span class="line">        <span class="keyword">if</span> (buzzRule.Check(number))</span><br><span class="line">        &#123;</span><br><span class="line">            result += buzzRule.Word;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="foreach-List"><a href="#foreach-List" class="headerlink" title="foreach List"></a>foreach List<irule></irule></h3><p>自以為帥氣的完成重構，而且用 <code>foreach</code> 消除了重複的 <code>if</code>…<br>實際上複雜度完全沒有下降。<br>關鍵的 <code>result += rule.Word;</code> 與<br><code>return string.IsNullOrEmpty(result) ? number.ToString() : result;</code><br>我繼續忽視它。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt; &#123;<span class="keyword">new</span> FizzRule(), <span class="keyword">new</span> BuzzRule()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> rule <span class="keyword">in</span> _rules)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rule.Check(number))</span><br><span class="line">            &#123;</span><br><span class="line">                result += rule.Word;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重構二、面對問題"><a href="#重構二、面對問題" class="headerlink" title="重構二、面對問題"></a>重構二、面對問題</h2><h3 id="消除-foreach"><a href="#消除-foreach" class="headerlink" title="消除 foreach"></a>消除 foreach</h3><p>參考 Martin 大叔的作法，把 foreach 變成 pipelines<br>光是這個作法就讓我的複雜度從 4 下降到 2 了，<br>此時，<code>result += rule.Word;</code> 與<br><code>return string.IsNullOrEmpty(result) ? number.ToString() : result;</code><br>就顯得相當奇怪，第一個邏輯我認為應該放進實作<code>IRule</code>的類別之中，<br>而第二個邏輯應該是一個未被實作的 Rule 。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> myRules = _rules;</span><br><span class="line">        myRules</span><br><span class="line">        .Where(r =&gt; r.Check(number))</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(n =&gt; result += n.Word);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作-Apply"><a href="#實作-Apply" class="headerlink" title="實作 Apply"></a>實作 Apply</h3><p>終於將<code>result += rule.Word;</code>的邏輯從 <code>FizzBuzz</code> 抽離到 <code>IRule</code> 之中，<br>再由各自的 Rule 實作，這個時候就會覺得 <code>IRule.Check</code> 與 <code>IRule.Word</code> 有點累贅，<br>基於 SOLID 原則，這部份邏輯甚至不該被揭露在 <code>FizzBuzz</code>之中。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">string</span> Word &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">        .Where(r =&gt; r.Check(number))</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(n =&gt; result = n.Apply(result));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(result) ? number.ToString() : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NormalRule"><a href="#NormalRule" class="headerlink" title="NormalRule"></a>NormalRule</h3><p>終於加上 <code>NormalRule</code> Class 了，裡面只有一個方法 <code>Apply</code>，  這裡是為了將來的介面準備，我想讓 NormalRule 成為 <code>IRule</code> 的一部份，<br>不過可以看到的問題是，方法簽章並不一致。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">            .Where(r =&gt; r.Check(number))</span><br><span class="line">            .ToList()</span><br><span class="line">            .ForEach(n =&gt; result = n.Apply(result));</span><br><span class="line">        <span class="keyword">var</span> normalRule = <span class="keyword">new</span> NormalRule();</span><br><span class="line">        <span class="keyword">return</span> normalRule.Apply(number, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-IRule-Apply"><a href="#修改-IRule-Apply" class="headerlink" title="修改 IRule.Apply"></a>修改 IRule.Apply</h3><p>在我的認知中，對 Production Code 修改介面是件危險的事，<br>這在 Kata 是可行的，但是在實際的 Production 恐怕就不夠 Baby Step 了，<br>我或許應該創造一個 IRuleV2 之類的介面，而不是直接修改 <code>IRule</code>。</p><p>首先編譯會不過，這會趨動我去修改 <code>FizzRule</code> 與 <code>BuzzRule</code><br>另外，這個時間點 <code>IRule.Check</code> 與 <code>IRule.Word</code> 作為 public 的資訊就顯得相當多餘了。<br>所以我會進一步將這些資訊從 <code>IRule</code> 介面中拿掉，<br>這也會使得 <code>FizzBuzz</code> Class 產生 Error，趁這個時候把 <code>.Where()</code> 與 <code>.ToList()</code> 一併拿掉，<br>但是要記得將 <code>IRule.Check</code> 與 <code>IRule.Word</code> 包含至 <code>IRule.Apply</code> 之中。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> Word =&gt; <span class="string">"Fizz"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">Check</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Check(number) ? input += <span class="keyword">this</span>.Word : input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NormalRule-與-IRule"><a href="#NormalRule-與-IRule" class="headerlink" title="NormalRule 與 IRule"></a>NormalRule 與 IRule</h3><p>這裡讓 <code>NormalRule</code> 實作 <code>IRule</code> 介面，<br>實際上在上面幾步已經完成了，<code>IRule</code> 反而比較像一個標籤掛在 <code>NormalRule</code> 上，<br>如此一來，就能夠在 <code>FizzBuzz</code> 裡面透過 <code>List&lt;IRule&gt;</code> 統整所有的規則。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">string</span> result = <span class="keyword">string</span>.Empty;</span><br><span class="line">        _rules</span><br><span class="line">            .ForEach(n =&gt; result = n.Apply(number, result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><p>作到這裡大概把我想作的東西都作掉了，<br><code>if</code> 散落在各個 <code>Rules</code> 裡面，<br>如果是 Production Code 我想我會使用 NameSpace 與專案資料夾再作進一步的整理吧。<br>最後把 <code>FizzRule</code> 與 <code>BuzzRule</code> 的 <code>Check</code> 與 <code>Word</code> 拿掉只是一點潔癖。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzRule</span> : <span class="title">IRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Apply</span>(<span class="params"><span class="keyword">int</span> number, <span class="keyword">string</span> input</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">3</span> == <span class="number">0</span> ? input += <span class="string">"Fizz"</span> : input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>過程中一直考慮著想要拿掉所有<code>if</code>，或是套用職責鏈(Chain of Responsibility Pattern)的 Pattern，<br>現在想想都有點走歪了方向，一再忽視責職的歸屬而讓後面的重構有點吃力，<br>不過透過 TDD 仍然讓程式碼重構到了一定的程度。<br>如果重來一次的話，我會選擇提早分離職責，<br>不過當中的取捨可能需要練習更多的 KATA 吧。</p><p>有人說這麼重構，會不會有點 Over Design 了，<br>我想說的是，反正是練習嘛，刻意練習到過頭也只是剛好而已，<br>如果不在練習時下點苦功，在戰場上用得出來嗎？<br>至少我的天賦而言，我應該是用不出來的。</p><h3 id="後記-1-20190207"><a href="#後記-1-20190207" class="headerlink" title="後記 1. 20190207"></a>後記 1. 20190207</h3><h4 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h4><p>文章貼出後，同事的回饋，可以使用 <code>Aggregate</code> 取代 <code>Foreach</code>，  程式碼可以更加精鍊。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _rules.Aggregate(<span class="keyword">string</span>.Empty, (r, n) =&gt; n.Apply(number, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="參數優化"><a href="#參數優化" class="headerlink" title="參數優化"></a>參數優化</h4><p>把 r、n 這類較沒意義的命名改成 input 與 rule，<br>單純是為了讓 <code>Aggreate</code> 的可讀性較高一些。<br>接下來這個異動的幅度較大，實務上我不會這樣作，<br>讓 <code>Apply</code> 的方法簽章順序與 <code>Aggreate</code> 一樣把 <code>input</code> String 放在最前面，<br>真的真的非常沒有必要，因為會異動到介面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FizzBuzz</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;IRule&gt; _rules = <span class="keyword">new</span> List&lt;IRule&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> FizzRule(),</span><br><span class="line">        <span class="keyword">new</span> BuzzRule(),</span><br><span class="line">        <span class="keyword">new</span> NormalRule()</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetResult</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _rules.Aggregate(<span class="keyword">string</span>.Empty, (input, rule) =&gt; rule.Apply(input, number));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/Coding_Dojo_Csharp/tree/fizzbuzz/20190205/UnitTestProject6" target="_blank" rel="noopener">Coding_Dojo_Csharp</a></li><li><a href="https://martinfowler.com/articles/refactoring-pipelines.html?fbclid=IwAR0uG0IXa_i6JoSRPtO6s-gXj-0jOAZDNrBYRmaHAJ2_RYFpiqcrbr4Z86k" target="_blank" rel="noopener">Refactoring with Loops and Collection Pipelines</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;記錄一下 Kata 的思路。&lt;/p&gt;
&lt;h2 id=&quot;實例化需求&quot;&gt;&lt;a href=&quot;#實例化需求&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="Testing" scheme="https://blog.marsen.me/tags/Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
      <category term="重構" scheme="https://blog.marsen.me/tags/%E9%87%8D%E6%A7%8B/"/>
    
  </entry>
  
</feed>
